# coding: utf-8

"""
    Spacestudio Orbit Propagation API

    <b>CHANGELOG</b> <ul>   <li><b>1.4.0</b> - 2024-07-05 - Add <b>initialDate</b> field in <b>OrbitPropagationRequest</b> schema</li>   <li><b>1.3.0</b> - 2024-07-03 - Add <b>atmosphericModel</b> and NRLMSISE00-related fields in <b>DragPerturbation</b> schema</li>   <li><b>1.2.0</b> - 2024-06-13 - Add <b>missionDuration</b> field in response payload</li>   <li><b>1.1.5</b> - 2024-06-06 - Improve API documentation</li>   <li><b>1.1.4</b> - 2024-05-28 - Improve API documentation</li>   <li><b>1.1.3</b> - 2024-05-28 - Improve API documentation</li>   <li><b>1.1.2</b> - 2024-05-28 - Improve API documentation</li>   <li><b>1.1.1</b> - 2024-05-28 - Delete <i>NONE</i> solar array type</li>   <li><b>1.1.0</b> - 2024-05-28 - Add perturbations and refactor API</li>   <li><b>1.0.0</b> - 2024-05-27 - Initial version</li> </ul> 

    The version of the OpenAPI document: 1.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from spacestudio_orbit_propagation.models.cartesian_ephemerides import CartesianEphemerides
from spacestudio_orbit_propagation.models.keplerian_ephemerides import KeplerianEphemerides
from typing import Optional, Set
from typing_extensions import Self

class OrbitPropagationResultOrbitalEphemeridesMean(BaseModel):
    """
    The mean orbital ephemerides of the spacecraft during all the simulation duration,  interpolated at the requested time steps. 
    """ # noqa: E501
    keplerian: Optional[KeplerianEphemerides] = None
    cartesian: Optional[CartesianEphemerides] = None
    __properties: ClassVar[List[str]] = ["keplerian", "cartesian"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrbitPropagationResultOrbitalEphemeridesMean from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of keplerian
        if self.keplerian:
            _dict['keplerian'] = self.keplerian.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cartesian
        if self.cartesian:
            _dict['cartesian'] = self.cartesian.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrbitPropagationResultOrbitalEphemeridesMean from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "keplerian": KeplerianEphemerides.from_dict(obj["keplerian"]) if obj.get("keplerian") is not None else None,
            "cartesian": CartesianEphemerides.from_dict(obj["cartesian"]) if obj.get("cartesian") is not None else None
        })
        return _obj


