# coding: utf-8

"""
    Spacestudio Orbit Propagation API

    <b>CHANGELOG</b> <ul>   <li><b>1.4.0</b> - 2024-07-05 - Add <b>initialDate</b> field in <b>OrbitPropagationRequest</b> schema</li>   <li><b>1.3.0</b> - 2024-07-03 - Add <b>atmosphericModel</b> and NRLMSISE00-related fields in <b>DragPerturbation</b> schema</li>   <li><b>1.2.0</b> - 2024-06-13 - Add <b>missionDuration</b> field in response payload</li>   <li><b>1.1.5</b> - 2024-06-06 - Improve API documentation</li>   <li><b>1.1.4</b> - 2024-05-28 - Improve API documentation</li>   <li><b>1.1.3</b> - 2024-05-28 - Improve API documentation</li>   <li><b>1.1.2</b> - 2024-05-28 - Improve API documentation</li>   <li><b>1.1.1</b> - 2024-05-28 - Delete <i>NONE</i> solar array type</li>   <li><b>1.1.0</b> - 2024-05-28 - Add perturbations and refactor API</li>   <li><b>1.0.0</b> - 2024-05-27 - Initial version</li> </ul> 

    The version of the OpenAPI document: 1.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from spacestudio_orbit_propagation.models.orbit import Orbit
from spacestudio_orbit_propagation.models.orbit_propagation_result_field_indexes_inner import OrbitPropagationResultFieldIndexesInner
from spacestudio_orbit_propagation.models.orbit_propagation_result_orbital_ephemerides import OrbitPropagationResultOrbitalEphemerides
from spacestudio_orbit_propagation.models.orbit_propagation_result_spacecraft_states import OrbitPropagationResultSpacecraftStates
from typing import Optional, Set
from typing_extensions import Self

class OrbitPropagationResult(BaseModel):
    """
    OrbitPropagationResult
    """ # noqa: E501
    delta_inclination: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The delta inclination cost of the executed maneuver", alias="deltaInclination")
    delta_eccentricity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The delta eccentricity cost of the executed maneuver", alias="deltaEccentricity")
    delta_semi_major_axis: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The delta SMA cost of the executed maneuver", alias="deltaSemiMajorAxis")
    mission_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The mission duration (in seconds)", alias="missionDuration")
    number_of_periods: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The ratio between mission duration and the keplerian period of the initial orbit", alias="numberOfPeriods")
    spacecraft_states: Optional[OrbitPropagationResultSpacecraftStates] = Field(default=None, alias="spacecraftStates")
    orbital_ephemerides: Optional[OrbitPropagationResultOrbitalEphemerides] = Field(default=None, alias="orbitalEphemerides")
    ephemerides: Optional[List[List[Union[StrictFloat, StrictInt]]]] = Field(default=None, description="A list of all the requested ephemerides at each timestep")
    field_indexes: Optional[List[OrbitPropagationResultFieldIndexesInner]] = Field(default=None, description="A map between the generated ephemerides labels and their indexes in the ephemerides array", alias="fieldIndexes")
    ephemerides_frame: Optional[StrictStr] = Field(default=None, description="The frame in which the ephemerides are defined", alias="ephemeridesFrame")
    errors: Optional[List[StrictStr]] = None
    warnings: Optional[List[StrictStr]] = None
    final_orbit: Optional[Orbit] = Field(default=None, alias="finalOrbit")
    __properties: ClassVar[List[str]] = ["deltaInclination", "deltaEccentricity", "deltaSemiMajorAxis", "missionDuration", "numberOfPeriods", "spacecraftStates", "orbitalEphemerides", "ephemerides", "fieldIndexes", "ephemeridesFrame", "errors", "warnings", "finalOrbit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrbitPropagationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of spacecraft_states
        if self.spacecraft_states:
            _dict['spacecraftStates'] = self.spacecraft_states.to_dict()
        # override the default output from pydantic by calling `to_dict()` of orbital_ephemerides
        if self.orbital_ephemerides:
            _dict['orbitalEphemerides'] = self.orbital_ephemerides.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in field_indexes (list)
        _items = []
        if self.field_indexes:
            for _item in self.field_indexes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fieldIndexes'] = _items
        # override the default output from pydantic by calling `to_dict()` of final_orbit
        if self.final_orbit:
            _dict['finalOrbit'] = self.final_orbit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrbitPropagationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deltaInclination": obj.get("deltaInclination"),
            "deltaEccentricity": obj.get("deltaEccentricity"),
            "deltaSemiMajorAxis": obj.get("deltaSemiMajorAxis"),
            "missionDuration": obj.get("missionDuration"),
            "numberOfPeriods": obj.get("numberOfPeriods"),
            "spacecraftStates": OrbitPropagationResultSpacecraftStates.from_dict(obj["spacecraftStates"]) if obj.get("spacecraftStates") is not None else None,
            "orbitalEphemerides": OrbitPropagationResultOrbitalEphemerides.from_dict(obj["orbitalEphemerides"]) if obj.get("orbitalEphemerides") is not None else None,
            "ephemerides": obj.get("ephemerides"),
            "fieldIndexes": [OrbitPropagationResultFieldIndexesInner.from_dict(_item) for _item in obj["fieldIndexes"]] if obj.get("fieldIndexes") is not None else None,
            "ephemeridesFrame": obj.get("ephemeridesFrame"),
            "errors": obj.get("errors"),
            "warnings": obj.get("warnings"),
            "finalOrbit": Orbit.from_dict(obj["finalOrbit"]) if obj.get("finalOrbit") is not None else None
        })
        return _obj


