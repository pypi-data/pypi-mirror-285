# coding: utf-8

"""
    Spacestudio Orbit Propagation API

    <b>CHANGELOG</b> <ul>   <li><b>1.4.0</b> - 2024-07-05 - Add <b>initialDate</b> field in <b>OrbitPropagationRequest</b> schema</li>   <li><b>1.3.0</b> - 2024-07-03 - Add <b>atmosphericModel</b> and NRLMSISE00-related fields in <b>DragPerturbation</b> schema</li>   <li><b>1.2.0</b> - 2024-06-13 - Add <b>missionDuration</b> field in response payload</li>   <li><b>1.1.5</b> - 2024-06-06 - Improve API documentation</li>   <li><b>1.1.4</b> - 2024-05-28 - Improve API documentation</li>   <li><b>1.1.3</b> - 2024-05-28 - Improve API documentation</li>   <li><b>1.1.2</b> - 2024-05-28 - Improve API documentation</li>   <li><b>1.1.1</b> - 2024-05-28 - Delete <i>NONE</i> solar array type</li>   <li><b>1.1.0</b> - 2024-05-28 - Add perturbations and refactor API</li>   <li><b>1.0.0</b> - 2024-05-27 - Initial version</li> </ul> 

    The version of the OpenAPI document: 1.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from spacestudio_orbit_propagation.models.orbit import Orbit
from spacestudio_orbit_propagation.models.perturbation import Perturbation
from spacestudio_orbit_propagation.models.platform import Platform
from spacestudio_orbit_propagation.models.spacecraft_geometry import SpacecraftGeometry
from typing import Optional, Set
from typing_extensions import Self

class OrbitPropagationRequestInputs(BaseModel):
    """
    The orbit propagation computation inputs
    """ # noqa: E501
    initial_date: Optional[datetime] = Field(default=None, description="The initial date to use for orbit propagation (overrides the orbit date/time if set)", alias="initialDate")
    target_date_definition_type: Optional[StrictStr] = Field(default=None, description="The type of target date to use (either DURATION or TARGET_DATE)", alias="targetDateDefinitionType")
    duration: Optional[StrictInt] = Field(default=None, description="The duration of the orbit extrapolation in seconds (if DURATION target date definition type is used)")
    target_date: Optional[datetime] = Field(default=None, description="The target date/time (if TARGET_DATE target date definition type is used)", alias="targetDate")
    propagation_type: Optional[StrictStr] = Field(default=None, description="The type of propagation to use for the computation", alias="propagationType")
    platform: Optional[Platform] = None
    spacecraft_geometry: Optional[SpacecraftGeometry] = Field(default=None, alias="spacecraftGeometry")
    initial_orbit: Optional[Orbit] = Field(default=None, alias="initialOrbit")
    perturbations: Optional[List[Perturbation]] = Field(default=None, description="The perturbations to apply to the orbit propagation")
    __properties: ClassVar[List[str]] = ["initialDate", "targetDateDefinitionType", "duration", "targetDate", "propagationType", "platform", "spacecraftGeometry", "initialOrbit", "perturbations"]

    @field_validator('target_date_definition_type')
    def target_date_definition_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DURATION', 'TARGET_DATE']):
            raise ValueError("must be one of enum values ('DURATION', 'TARGET_DATE')")
        return value

    @field_validator('propagation_type')
    def propagation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NUMERICAL', 'SEMI_ANALYTICAL']):
            raise ValueError("must be one of enum values ('NUMERICAL', 'SEMI_ANALYTICAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrbitPropagationRequestInputs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of platform
        if self.platform:
            _dict['platform'] = self.platform.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spacecraft_geometry
        if self.spacecraft_geometry:
            _dict['spacecraftGeometry'] = self.spacecraft_geometry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initial_orbit
        if self.initial_orbit:
            _dict['initialOrbit'] = self.initial_orbit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in perturbations (list)
        _items = []
        if self.perturbations:
            for _item in self.perturbations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['perturbations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrbitPropagationRequestInputs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "initialDate": obj.get("initialDate"),
            "targetDateDefinitionType": obj.get("targetDateDefinitionType"),
            "duration": obj.get("duration"),
            "targetDate": obj.get("targetDate"),
            "propagationType": obj.get("propagationType"),
            "platform": Platform.from_dict(obj["platform"]) if obj.get("platform") is not None else None,
            "spacecraftGeometry": SpacecraftGeometry.from_dict(obj["spacecraftGeometry"]) if obj.get("spacecraftGeometry") is not None else None,
            "initialOrbit": Orbit.from_dict(obj["initialOrbit"]) if obj.get("initialOrbit") is not None else None,
            "perturbations": [Perturbation.from_dict(_item) for _item in obj["perturbations"]] if obj.get("perturbations") is not None else None
        })
        return _obj


