# coding: utf-8

"""
    Spacestudio Orbit Propagation API

    <b>CHANGELOG</b> <ul>   <li><b>1.4.0</b> - 2024-07-05 - Add <b>initialDate</b> field in <b>OrbitPropagationRequest</b> schema</li>   <li><b>1.3.0</b> - 2024-07-03 - Add <b>atmosphericModel</b> and NRLMSISE00-related fields in <b>DragPerturbation</b> schema</li>   <li><b>1.2.0</b> - 2024-06-13 - Add <b>missionDuration</b> field in response payload</li>   <li><b>1.1.5</b> - 2024-06-06 - Improve API documentation</li>   <li><b>1.1.4</b> - 2024-05-28 - Improve API documentation</li>   <li><b>1.1.3</b> - 2024-05-28 - Improve API documentation</li>   <li><b>1.1.2</b> - 2024-05-28 - Improve API documentation</li>   <li><b>1.1.1</b> - 2024-05-28 - Delete <i>NONE</i> solar array type</li>   <li><b>1.1.0</b> - 2024-05-28 - Add perturbations and refactor API</li>   <li><b>1.0.0</b> - 2024-05-27 - Initial version</li> </ul> 

    The version of the OpenAPI document: 1.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacestudio_orbit_propagation.models.orbit_propagation_request import OrbitPropagationRequest

class TestOrbitPropagationRequest(unittest.TestCase):
    """OrbitPropagationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrbitPropagationRequest:
        """Test OrbitPropagationRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrbitPropagationRequest`
        """
        model = OrbitPropagationRequest()
        if include_optional:
            return OrbitPropagationRequest(
                inputs = spacestudio_orbit_propagation.models.orbit_propagation_request_inputs.OrbitPropagationRequest_inputs(
                    initial_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    target_date_definition_type = 'DURATION', 
                    duration = 56, 
                    target_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    propagation_type = 'NUMERICAL', 
                    platform = spacestudio_orbit_propagation.models.platform.Platform(
                        mass = 1.337, ), 
                    spacecraft_geometry = spacestudio_orbit_propagation.models.spacecraft_geometry.SpacecraftGeometry(), 
                    initial_orbit = spacestudio_orbit_propagation.models.orbit.Orbit(
                        inclination = 1.337, 
                        sma = 1.337, 
                        eccentricity = 1.337, 
                        parameters = spacestudio_orbit_propagation.models.orbit_parameters.OrbitParameters(), 
                        advanced_parameters = spacestudio_orbit_propagation.models.advanced_orbit_parameters.AdvancedOrbitParameters(
                            orbit_date = '', 
                            ascending_node_type = 'RAAN', 
                            raan = 1.337, 
                            mltan = 1.337, 
                            anomaly = 1.337, 
                            anomaly_type = 'TRUE', 
                            orbital_element_type = 'MEAN', 
                            perigee_argument = 1.337, ), ), 
                    perturbations = [
                        spacestudio_orbit_propagation.models.perturbation.Perturbation()
                        ], ),
                outputs = spacestudio_orbit_propagation.models.orbit_propagation_request_outputs.OrbitPropagationRequest_outputs(
                    orbital_ephemerides = spacestudio_orbit_propagation.models.orbit_propagation_request_outputs_orbital_ephemerides.OrbitPropagationRequest_outputs_orbitalEphemerides(
                        types = [
                            'CARTESIAN'
                            ], 
                        timestep = 1.337, 
                        mean = True, 
                        osculating = True, ), 
                    spacecraft_states = spacestudio_orbit_propagation.models.orbit_propagation_request_outputs_spacecraft_states.OrbitPropagationRequest_outputs_spacecraftStates(
                        mean = True, 
                        osculating = True, ), 
                    ephemerides = [
                        'CARTESIAN'
                        ], 
                    ephemerides_step = 56, 
                    mean_ephemerides = True, 
                    osculating_ephemerides = True, )
            )
        else:
            return OrbitPropagationRequest(
        )
        """

    def testOrbitPropagationRequest(self):
        """Test OrbitPropagationRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
