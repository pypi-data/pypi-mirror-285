# coding: utf-8

"""
    Spacestudio Orbit Propagation API

    <b>CHANGELOG</b> <ul>   <li><b>1.4.0</b> - 2024-07-05 - Add <b>initialDate</b> field in <b>OrbitPropagationRequest</b> schema</li>   <li><b>1.3.0</b> - 2024-07-03 - Add <b>atmosphericModel</b> and NRLMSISE00-related fields in <b>DragPerturbation</b> schema</li>   <li><b>1.2.0</b> - 2024-06-13 - Add <b>missionDuration</b> field in response payload</li>   <li><b>1.1.5</b> - 2024-06-06 - Improve API documentation</li>   <li><b>1.1.4</b> - 2024-05-28 - Improve API documentation</li>   <li><b>1.1.3</b> - 2024-05-28 - Improve API documentation</li>   <li><b>1.1.2</b> - 2024-05-28 - Improve API documentation</li>   <li><b>1.1.1</b> - 2024-05-28 - Delete <i>NONE</i> solar array type</li>   <li><b>1.1.0</b> - 2024-05-28 - Add perturbations and refactor API</li>   <li><b>1.0.0</b> - 2024-05-27 - Initial version</li> </ul> 

    The version of the OpenAPI document: 1.4.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacestudio_orbit_propagation.models.orbit_propagation_result import OrbitPropagationResult

class TestOrbitPropagationResult(unittest.TestCase):
    """OrbitPropagationResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrbitPropagationResult:
        """Test OrbitPropagationResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrbitPropagationResult`
        """
        model = OrbitPropagationResult()
        if include_optional:
            return OrbitPropagationResult(
                delta_inclination = 1.337,
                delta_eccentricity = 1.337,
                delta_semi_major_axis = 1.337,
                mission_duration = 1.337,
                number_of_periods = 1.337,
                spacecraft_states = spacestudio_orbit_propagation.models.orbit_propagation_result_spacecraft_states.OrbitPropagationResult_spacecraftStates(
                    mu = 1.337, 
                    ephemerides_frame = '', 
                    timestamps = [
                        ''
                        ], 
                    mass = [
                        1.337
                        ], 
                    mean = spacestudio_orbit_propagation.models.mean_or_osculating_spacecraft_states.MeanOrOsculatingSpacecraftStates(
                        pv_coordinates = spacestudio_orbit_propagation.models.mean_or_osculating_spacecraft_states_pv_coordinates.MeanOrOsculatingSpacecraftStates_pvCoordinates(
                            position = [
                                [
                                    1.337
                                    ]
                                ], 
                            velocity = [
                                [
                                    1.337
                                    ]
                                ], 
                            acceleration = [
                                [
                                    1.337
                                    ]
                                ], ), 
                        attitude = spacestudio_orbit_propagation.models.mean_or_osculating_spacecraft_states_attitude.MeanOrOsculatingSpacecraftStates_attitude(
                            rotation = [
                                [
                                    1.337
                                    ]
                                ], 
                            rotation_rate = [
                                [
                                    1.337
                                    ]
                                ], 
                            rotation_acceleration = [
                                [
                                    1.337
                                    ]
                                ], ), ), 
                    osculating = spacestudio_orbit_propagation.models.mean_or_osculating_spacecraft_states.MeanOrOsculatingSpacecraftStates(), ),
                orbital_ephemerides = spacestudio_orbit_propagation.models.orbit_propagation_result_orbital_ephemerides.OrbitPropagationResult_orbitalEphemerides(
                    ephemerides_frame = '', 
                    timestamps = [
                        ''
                        ], 
                    mean = spacestudio_orbit_propagation.models.orbit_propagation_result_orbital_ephemerides_mean.OrbitPropagationResult_orbitalEphemerides_mean(
                        keplerian = spacestudio_orbit_propagation.models.keplerian_ephemerides.KeplerianEphemerides(
                            true_anomaly = [
                                1.337
                                ], 
                            mean_anomaly = [
                                1.337
                                ], 
                            inclination = [
                                1.337
                                ], 
                            eccentric_anomaly = [
                                1.337
                                ], 
                            perigee_altitude = [
                                1.337
                                ], 
                            ltan = [
                                1.337
                                ], 
                            altitude = [
                                1.337
                                ], 
                            semi_major_axis = [
                                1.337
                                ], 
                            eccentricity = [
                                1.337
                                ], 
                            raan = [
                                1.337
                                ], ), 
                        cartesian = spacestudio_orbit_propagation.models.cartesian_ephemerides.CartesianEphemerides(
                            x = [
                                1.337
                                ], 
                            y = [
                                1.337
                                ], 
                            z = [
                                1.337
                                ], 
                            vx = [
                                1.337
                                ], 
                            vy = [
                                1.337
                                ], 
                            vz = [
                                1.337
                                ], ), ), 
                    osculating = spacestudio_orbit_propagation.models.orbit_propagation_result_orbital_ephemerides_osculating.OrbitPropagationResult_orbitalEphemerides_osculating(), ),
                ephemerides = [
                    [
                        1.337
                        ]
                    ],
                field_indexes = [
                    spacestudio_orbit_propagation.models.orbit_propagation_result_field_indexes_inner.OrbitPropagationResult_fieldIndexes_inner(
                        key = '', 
                        index = 56, )
                    ],
                ephemerides_frame = '',
                errors = [
                    ''
                    ],
                warnings = [
                    ''
                    ],
                final_orbit = spacestudio_orbit_propagation.models.orbit.Orbit(
                    inclination = 1.337, 
                    sma = 1.337, 
                    eccentricity = 1.337, 
                    parameters = spacestudio_orbit_propagation.models.orbit_parameters.OrbitParameters(), 
                    advanced_parameters = spacestudio_orbit_propagation.models.advanced_orbit_parameters.AdvancedOrbitParameters(
                        orbit_date = '', 
                        ascending_node_type = 'RAAN', 
                        raan = 1.337, 
                        mltan = 1.337, 
                        anomaly = 1.337, 
                        anomaly_type = 'TRUE', 
                        orbital_element_type = 'MEAN', 
                        perigee_argument = 1.337, ), )
            )
        else:
            return OrbitPropagationResult(
        )
        """

    def testOrbitPropagationResult(self):
        """Test OrbitPropagationResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
