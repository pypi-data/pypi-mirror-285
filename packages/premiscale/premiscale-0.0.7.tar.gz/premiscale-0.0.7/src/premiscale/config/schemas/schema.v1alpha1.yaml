version: enum('v1alpha1')
controller: include('controller')
---
controller:
  pidFile: str(min=1)
  mode: enum('kubernetes', 'standalone', 'standalone-external-metrics', 'kubernetes-external-metrics')
  kubernetes: include('kubernetes')
  healthcheck: include('healthcheck')
  databases: include('databases')
  platform: include('platform')
  reconciliation: include('reconciliation')
  autoscale: include('autoscale')
---
kubernetes:
  autoscalerPort: int(min=1, max=65535)
  autoscalerHost: str(min=1)
---
healthcheck:
  host: str(min=1)
  port: int(min=1, max=65535)
---
reconciliation:
  interval: int(min=5)
---
autoscale:
  hosts: include('hosts')
  groups: include('groups')
---
databases:
  collectionInterval: int(min=5)
  hostConnectionTimeout: int(min=1)
  maxHostConnectionThreads: int(min=0)
  state: include('state')
  timeseries: include('timeseries')
  # This field depends on maxHostConnectionThreads. If it is less than that field, it will be set to that value.
  hostConnectionQueueSize: int(min=1, required=False)
---
state:
  type: enum('memory', 'mysql')
  dbfile: str(min=1, required=False)
  connection: include('connection', required=False)
---
timeseries:
  type: enum('memory', 'influxdb')
  retention: int(min=300)
  # Only relevant for type 'memory'.
  dbfile: str(min=1, required=False)
  connection: include('connection', required=False)
---
connection:
  url: str(min=1)
  database: str(min=1)
  organization: str(min=1, required=False)
  credentials:
    # In the case of InfluxDB, this field is not used.
    username: str(min=0)
    # In the case of InfluxDB, this field is used as the token.
    password: str(min=1)
---
platform:
  domain: str(min=1)
  token: str(min=1)
  certificates: include('certificates')
  actionsQueueMaxSize: int(min=0)
---
certificates:
  path: str(min=1)
---
# Part of autoscaling configuration
hosts: list(include('host'), min=0)
---
host:
  name: str(min=1)
  address: str(min=1)
  port: int(min=1, max=65535)
  protocol: enum('ssh', 'SSH', 'tls', 'TLS', 'http', 'HTTP', 'https', 'HTTPS')
  timeout: int(min=1, max=599940, required=False)
  user: str(min=1, required=False)
  sshKey: str(min=1, required=False)
  hypervisor: enum('esx', 'qemu')
---
# The other half of autoscaling configuration
groups: map(include('group'), min=0)
---
group:
  image: str(min=1)
  name: str(min=1)
  imageMigration: enum('migrate', 'centralized')
  cloud-init:
    inline: str(min=1)
    file: str(min=1)
  hosts: any(include('hosts'), list(min=1))
  replacement:
    strategy: enum('rollingUpdate')
    maxUnavailable: int(min=0)
    maxSurge: int(min=0)
  networking:
    # Ignore in the case that the users' cloud-init scripts perform the networking.
    type: enum('static', 'dynamic', 'ignore')
    addresses: list(str(min=1), min=1)
    subnet: str(min=1)
    gateway: str(min=1)
  scaling:
    method: enum('random', 'vacancy', 'linear', 'linear-random')
    maxNodes: int(min=0)
    minNodes: int(min=0)
    increment: int(min=0)
    cooldown: int(min=0)
    resourceTarget: include('resources')
---
resources:
  cpu: int(min=0)
  memory: int(min=0)
  storage: int(min=0)