# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.discoverability import Discoverability
from ..types.http_validation_error import HttpValidationError

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class VoicesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_my_voices(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Any:
        """
        Retrieve the voices created by the authenticated user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Any
            Successful Response

        Examples
        --------
        from deeptune.client import DeeptuneApi

        client = DeeptuneApi(
            xi_api_key="YOUR_XI_API_KEY",
            token="YOUR_TOKEN",
        )
        client.voices.get_my_voices()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/api/my-voices", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_voice(
        self,
        *,
        discoverability: Discoverability,
        file: str,
        name: str,
        accent: typing.Optional[str] = OMIT,
        age: typing.Optional[str] = OMIT,
        desc: typing.Optional[str] = OMIT,
        gender: typing.Optional[str] = OMIT,
        tags: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Any:
        """
        Create a new voice with the provided details.

        Parameters
        ----------
        discoverability : Discoverability

        file : str

        name : str

        accent : typing.Optional[str]

        age : typing.Optional[str]

        desc : typing.Optional[str]

        gender : typing.Optional[str]

        tags : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Any
            Successful Response

        Examples
        --------
        from deeptune.client import DeeptuneApi

        client = DeeptuneApi(
            xi_api_key="YOUR_XI_API_KEY",
            token="YOUR_TOKEN",
        )
        client.voices.create_voice(
            discoverability="PUBLIC",
            file="file",
            name="name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/api/my-voices",
            method="POST",
            json={
                "accent": accent,
                "age": age,
                "desc": desc,
                "discoverability": discoverability,
                "file": file,
                "gender": gender,
                "name": name,
                "tags": tags,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_library_voices(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Any:
        """
        Retrieve all voices available in the library.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Any
            Successful Response

        Examples
        --------
        from deeptune.client import DeeptuneApi

        client = DeeptuneApi(
            xi_api_key="YOUR_XI_API_KEY",
            token="YOUR_TOKEN",
        )
        client.voices.get_library_voices()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/api/voices", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_voice(
        self,
        voice_id: str,
        *,
        accent: typing.Optional[str] = OMIT,
        age: typing.Optional[str] = OMIT,
        desc: typing.Optional[str] = OMIT,
        discoverability: typing.Optional[Discoverability] = OMIT,
        file: typing.Optional[str] = OMIT,
        gender: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        tags: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Any:
        """
        Update details of a specific voice.

        Parameters
        ----------
        voice_id : str
            The ID of the voice to update

        accent : typing.Optional[str]

        age : typing.Optional[str]

        desc : typing.Optional[str]

        discoverability : typing.Optional[Discoverability]

        file : typing.Optional[str]

        gender : typing.Optional[str]

        name : typing.Optional[str]

        tags : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Any
            Successful Response

        Examples
        --------
        from deeptune.client import DeeptuneApi

        client = DeeptuneApi(
            xi_api_key="YOUR_XI_API_KEY",
            token="YOUR_TOKEN",
        )
        client.voices.update_voice(
            voice_id="voice_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/api/voices/{jsonable_encoder(voice_id)}",
            method="POST",
            json={
                "accent": accent,
                "age": age,
                "desc": desc,
                "discoverability": discoverability,
                "file": file,
                "gender": gender,
                "name": name,
                "tags": tags,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_voice(self, voice_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Any:
        """
        Delete a specific voice by its ID.

        Parameters
        ----------
        voice_id : str
            The ID of the voice to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Any
            Successful Response

        Examples
        --------
        from deeptune.client import DeeptuneApi

        client = DeeptuneApi(
            xi_api_key="YOUR_XI_API_KEY",
            token="YOUR_TOKEN",
        )
        client.voices.delete_voice(
            voice_id="voice_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/api/voices/{jsonable_encoder(voice_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncVoicesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_my_voices(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Any:
        """
        Retrieve the voices created by the authenticated user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Any
            Successful Response

        Examples
        --------
        from deeptune.client import AsyncDeeptuneApi

        client = AsyncDeeptuneApi(
            xi_api_key="YOUR_XI_API_KEY",
            token="YOUR_TOKEN",
        )
        await client.voices.get_my_voices()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/api/my-voices", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_voice(
        self,
        *,
        discoverability: Discoverability,
        file: str,
        name: str,
        accent: typing.Optional[str] = OMIT,
        age: typing.Optional[str] = OMIT,
        desc: typing.Optional[str] = OMIT,
        gender: typing.Optional[str] = OMIT,
        tags: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Any:
        """
        Create a new voice with the provided details.

        Parameters
        ----------
        discoverability : Discoverability

        file : str

        name : str

        accent : typing.Optional[str]

        age : typing.Optional[str]

        desc : typing.Optional[str]

        gender : typing.Optional[str]

        tags : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Any
            Successful Response

        Examples
        --------
        from deeptune.client import AsyncDeeptuneApi

        client = AsyncDeeptuneApi(
            xi_api_key="YOUR_XI_API_KEY",
            token="YOUR_TOKEN",
        )
        await client.voices.create_voice(
            discoverability="PUBLIC",
            file="file",
            name="name",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/api/my-voices",
            method="POST",
            json={
                "accent": accent,
                "age": age,
                "desc": desc,
                "discoverability": discoverability,
                "file": file,
                "gender": gender,
                "name": name,
                "tags": tags,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_library_voices(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Any:
        """
        Retrieve all voices available in the library.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Any
            Successful Response

        Examples
        --------
        from deeptune.client import AsyncDeeptuneApi

        client = AsyncDeeptuneApi(
            xi_api_key="YOUR_XI_API_KEY",
            token="YOUR_TOKEN",
        )
        await client.voices.get_library_voices()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/api/voices", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_voice(
        self,
        voice_id: str,
        *,
        accent: typing.Optional[str] = OMIT,
        age: typing.Optional[str] = OMIT,
        desc: typing.Optional[str] = OMIT,
        discoverability: typing.Optional[Discoverability] = OMIT,
        file: typing.Optional[str] = OMIT,
        gender: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        tags: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Any:
        """
        Update details of a specific voice.

        Parameters
        ----------
        voice_id : str
            The ID of the voice to update

        accent : typing.Optional[str]

        age : typing.Optional[str]

        desc : typing.Optional[str]

        discoverability : typing.Optional[Discoverability]

        file : typing.Optional[str]

        gender : typing.Optional[str]

        name : typing.Optional[str]

        tags : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Any
            Successful Response

        Examples
        --------
        from deeptune.client import AsyncDeeptuneApi

        client = AsyncDeeptuneApi(
            xi_api_key="YOUR_XI_API_KEY",
            token="YOUR_TOKEN",
        )
        await client.voices.update_voice(
            voice_id="voice_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/api/voices/{jsonable_encoder(voice_id)}",
            method="POST",
            json={
                "accent": accent,
                "age": age,
                "desc": desc,
                "discoverability": discoverability,
                "file": file,
                "gender": gender,
                "name": name,
                "tags": tags,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_voice(
        self, voice_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Delete a specific voice by its ID.

        Parameters
        ----------
        voice_id : str
            The ID of the voice to delete

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Any
            Successful Response

        Examples
        --------
        from deeptune.client import AsyncDeeptuneApi

        client = AsyncDeeptuneApi(
            xi_api_key="YOUR_XI_API_KEY",
            token="YOUR_TOKEN",
        )
        await client.voices.delete_voice(
            voice_id="voice_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/api/voices/{jsonable_encoder(voice_id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
