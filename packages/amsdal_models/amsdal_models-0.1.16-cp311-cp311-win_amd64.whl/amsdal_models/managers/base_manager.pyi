from _typeshed import Incomplete
from amsdal_models.querysets.base_queryset import ModelType as ModelType, QuerySet as QuerySet, QuerySetOne as QuerySetOne, QuerySetOneRequired as QuerySetOneRequired
from amsdal_models.querysets.executor import LAKEHOUSE_DB_ALIAS as LAKEHOUSE_DB_ALIAS
from amsdal_utils.query.utils import Q as Q
from typing import Any, Generic

logger: Incomplete

class BaseManager(Generic[ModelType]):
    """
    Base manager for creating QuerySets for models.
    """
    model: type[ModelType]
    def copy(self, cls: type[ModelType]) -> BaseManager: ...
    def get_queryset(self) -> QuerySet[ModelType]: ...
    def using(self, value: str) -> QuerySet[ModelType]: ...
    def all(self) -> QuerySet[ModelType]: ...
    def only(self, fields: list[str]) -> QuerySet[ModelType]: ...
    def distinct(self, fields: list[str]) -> QuerySet[ModelType]: ...
    def filter(self, *args: Q, **kwargs: Any) -> QuerySet[ModelType]: ...
    def exclude(self, *args: Q, **kwargs: Any) -> QuerySet[ModelType]: ...
    def get(self, *args: Q, **kwargs: Any) -> QuerySetOneRequired[ModelType]: ...
    def get_or_none(self, *args: Q, **kwargs: Any) -> QuerySetOne[ModelType]: ...
    def first(self, *args: Q, **kwargs: Any) -> QuerySetOne[ModelType]: ...
    def latest(self) -> QuerySet[ModelType]: ...
    def previous_version(self, obj: ModelType) -> ModelType | None: ...
    def next_version(self, obj: ModelType) -> ModelType | None: ...
    def get_specific_version(self, object_id: str, object_version: str | None) -> ModelType | None: ...
    def bulk_update(self, objs: list[ModelType], using: str | None = ...) -> None: ...
    def bulk_create(self, objs: list[ModelType], using: str | None = ...) -> None: ...
    def bulk_delete(self, objs: list[ModelType], using: str | None = ...) -> None: ...
