from _typeshed import Incomplete
from amsdal_models.classes.base import BaseModel as BaseModel
from amsdal_models.classes.errors import AmsdalClassError as AmsdalClassError, AmsdalClassNotFoundError as AmsdalClassNotFoundError
from amsdal_models.classes.model import Model as Model
from amsdal_models.classes.utils import resolve_modes_module as resolve_modes_module
from amsdal_models.classes.writer import ClassWriter as ClassWriter
from amsdal_models.schemas.data_models.schemas_directory import SchemasDirectory as SchemasDirectory
from amsdal_utils.models.enums import SchemaTypes as SchemaTypes
from amsdal_utils.models.mixins.cached_mixin import CachedMixin
from amsdal_utils.utils.singleton import Singleton
from pathlib import Path

class ClassManager(CachedMixin, metaclass=Singleton):
    models_dir: Path
    _loaded_classes: Incomplete
    def __init__(self) -> None: ...
    def init_models_root(self, models_dir: Path): ...
    @property
    def models_module_name(self) -> str: ...
    def init_sys_path(self) -> None: ...
    def generate_models(self, schemas_dirs: list[SchemasDirectory]) -> None: ...
    def teardown(self) -> None: ...
    def resolve_schema_type(self, class_name: str) -> SchemaTypes: ...
    def import_model_class(self, class_name: str, schema_type: SchemaTypes) -> type['Model']: ...
    def import_class(self, class_name: str, schema_type: SchemaTypes) -> type[BaseModel]: ...
    def unload_classes(self, class_name: str, schema_type: SchemaTypes) -> None: ...
    def unload_all_classes(self) -> None: ...
