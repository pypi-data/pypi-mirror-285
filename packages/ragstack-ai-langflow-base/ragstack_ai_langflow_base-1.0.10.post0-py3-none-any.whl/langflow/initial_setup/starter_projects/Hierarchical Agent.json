{
    "id": "6302081f-5af2-4b9f-bd19-2baaf7218ba6",
    "data": {
        "nodes": [
            {
                "id": "HierarchicalCrewComponent-JNKGT",
                "type": "genericNode",
                "position": {
                    "x": 568,
                    "y": 352.296875
                },
                "data": {
                    "type": "HierarchicalCrewComponent",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "agents": {
                                "trace_as_metadata": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "agents",
                                "display_name": "Agents",
                                "advanced": false,
                                "input_types": [
                                    "Agent"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "other"
                            },
                            "function_calling_llm": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "function_calling_llm",
                                "display_name": "Function Calling LLM",
                                "advanced": true,
                                "input_types": [
                                    "LanguageModel"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "other"
                            },
                            "manager_agent": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "manager_agent",
                                "display_name": "Manager Agent",
                                "advanced": false,
                                "input_types": [
                                    "Agent"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "other"
                            },
                            "manager_llm": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "manager_llm",
                                "display_name": "Manager LLM",
                                "advanced": false,
                                "input_types": [
                                    "LanguageModel"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "other"
                            },
                            "tasks": {
                                "trace_as_metadata": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "tasks",
                                "display_name": "Tasks",
                                "advanced": false,
                                "input_types": [
                                    "HierarchicalTask"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "other"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from crewai import Crew, Process  # type: ignore\n\nfrom langflow.base.agents.crewai.crew import BaseCrewComponent\nfrom langflow.io import HandleInput\n\n\nclass HierarchicalCrewComponent(BaseCrewComponent):\n    display_name: str = \"Hierarchical Crew\"\n    description: str = (\n        \"Represents a group of agents, defining how they should collaborate and the tasks they should perform.\"\n    )\n\n    inputs = BaseCrewComponent._base_inputs + [\n        HandleInput(name=\"agents\", display_name=\"Agents\", input_types=[\"Agent\"], is_list=True),\n        HandleInput(name=\"tasks\", display_name=\"Tasks\", input_types=[\"HierarchicalTask\"], is_list=True),\n        HandleInput(name=\"manager_llm\", display_name=\"Manager LLM\", input_types=[\"LanguageModel\"], required=False),\n        HandleInput(name=\"manager_agent\", display_name=\"Manager Agent\", input_types=[\"Agent\"], required=False),\n    ]\n\n    def build_crew(self) -> Crew:\n        tasks, agents = self.get_tasks_and_agents()\n        crew = Crew(\n            agents=agents,\n            tasks=tasks,\n            process=Process.hierarchical,\n            verbose=self.verbose,\n            memory=self.memory,\n            cache=self.use_cache,\n            max_rpm=self.max_rpm,\n            share_crew=self.share_crew,\n            function_calling_llm=self.function_calling_llm,\n            manager_agent=self.manager_agent,\n            manager_llm=self.manager_llm,\n            step_callback=self.get_step_callback(),\n            task_callback=self.get_task_callback(),\n        )\n        return crew\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "max_rpm": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 100,
                                "name": "max_rpm",
                                "display_name": "Max RPM",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "int"
                            },
                            "memory": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "memory",
                                "display_name": "Memory",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "bool"
                            },
                            "share_crew": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "share_crew",
                                "display_name": "Share Crew",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "bool"
                            },
                            "use_cache": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": true,
                                "name": "use_cache",
                                "display_name": "Cache",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "bool"
                            },
                            "verbose": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 0,
                                "name": "verbose",
                                "display_name": "Verbose",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "int"
                            }
                        },
                        "description": "Represents a group of agents, defining how they should collaborate and the tasks they should perform.",
                        "icon": "CrewAI",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Hierarchical Crew",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "output",
                                "display_name": "Output",
                                "method": "build_output",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "verbose",
                            "memory",
                            "use_cache",
                            "max_rpm",
                            "share_crew",
                            "function_calling_llm",
                            "agents",
                            "tasks",
                            "manager_llm",
                            "manager_agent"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "HierarchicalCrewComponent-JNKGT",
                    "description": "Represents a group of agents, defining how they should collaborate and the tasks they should perform.",
                    "display_name": "Hierarchical Crew"
                },
                "selected": false,
                "width": 384,
                "height": 459,
                "dragging": false
            },
            {
                "id": "OpenAIModel-xoZ41",
                "type": "genericNode",
                "position": {
                    "x": -1222.8457213471152,
                    "y": 699.9983009041272
                },
                "data": {
                    "type": "OpenAIModel",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schea is a list of dictionarie s\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.openai_api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n        model_kwargs[\"seed\"] = seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "input_value",
                                "display_name": "Input",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "json_mode": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "json_mode",
                                "display_name": "JSON Mode",
                                "advanced": true,
                                "dynamic": false,
                                "info": "If True, it will output JSON regardless of passing a schema.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "max_tokens": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "max_tokens",
                                "display_name": "Max Tokens",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                "title_case": false,
                                "type": "int"
                            },
                            "model_kwargs": {
                                "trace_as_input": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": {},
                                "name": "model_kwargs",
                                "display_name": "Model Kwargs",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "dict"
                            },
                            "model_name": {
                                "trace_as_metadata": true,
                                "options": [
                                    "gpt-4o",
                                    "gpt-4-turbo",
                                    "gpt-4-turbo-preview",
                                    "gpt-4",
                                    "gpt-3.5-turbo",
                                    "gpt-3.5-turbo-0125"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "gpt-3.5-turbo",
                                "name": "model_name",
                                "display_name": "Model Name",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "openai_api_base": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "openai_api_base",
                                "display_name": "OpenAI API Base",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                "title_case": false,
                                "type": "str"
                            },
                            "openai_api_key": {
                                "load_from_db": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "openai_api_key",
                                "display_name": "OpenAI API Key",
                                "advanced": false,
                                "input_types": [],
                                "dynamic": false,
                                "info": "The OpenAI API Key to use for the OpenAI model.",
                                "title_case": false,
                                "password": true,
                                "type": "str"
                            },
                            "output_schema": {
                                "trace_as_input": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": {},
                                "name": "output_schema",
                                "display_name": "Schema",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                                "title_case": false,
                                "type": "dict"
                            },
                            "seed": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 1,
                                "name": "seed",
                                "display_name": "Seed",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The seed controls the reproducibility of the job.",
                                "title_case": false,
                                "type": "int"
                            },
                            "stream": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "stream",
                                "display_name": "Stream",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Stream the response from the model. Streaming works only in Chat.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "system_message": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "system_message",
                                "display_name": "System Message",
                                "advanced": true,
                                "dynamic": false,
                                "info": "System message to pass to the model.",
                                "title_case": false,
                                "type": "str"
                            },
                            "temperature": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 0.1,
                                "name": "temperature",
                                "display_name": "Temperature",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "float"
                            }
                        },
                        "description": "Generates text using OpenAI LLMs.",
                        "icon": "OpenAI",
                        "base_classes": [
                            "LanguageModel",
                            "Message"
                        ],
                        "display_name": "OpenAI",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "text_output",
                                "display_name": "Text",
                                "method": "text_response",
                                "value": "__UNDEFINED__",
                                "cache": true
                            },
                            {
                                "types": [
                                    "LanguageModel"
                                ],
                                "selected": "LanguageModel",
                                "name": "model_output",
                                "display_name": "Language Model",
                                "method": "build_model",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "max_tokens",
                            "model_kwargs",
                            "json_mode",
                            "output_schema",
                            "model_name",
                            "openai_api_base",
                            "openai_api_key",
                            "temperature",
                            "stream",
                            "system_message",
                            "seed"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "OpenAIModel-xoZ41"
                },
                "selected": false,
                "width": 384,
                "height": 623,
                "positionAbsolute": {
                    "x": -1222.8457213471152,
                    "y": 699.9983009041272
                },
                "dragging": false
            },
            {
                "id": "ChatOutput-IACYe",
                "type": "genericNode",
                "position": {
                    "x": 1070.9148596889393,
                    "y": 499.80777483894144
                },
                "data": {
                    "type": "ChatOutput",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"Machine\",\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\", display_name=\"Sender Name\", info=\"Name of the sender.\", value=\"AI\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "data_template": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "{text}",
                                "name": "data_template",
                                "display_name": "Data Template",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                "title_case": false,
                                "type": "str"
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "input_value",
                                "display_name": "Text",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Message to be passed as output.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Machine",
                                "name": "sender",
                                "display_name": "Sender Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Type of sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender_name": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "AI",
                                "name": "sender_name",
                                "display_name": "Sender Name",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "session_id": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "session_id",
                                "display_name": "Session ID",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Session ID for the message.",
                                "title_case": false,
                                "type": "str"
                            },
                            "should_store_message": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": true,
                                "name": "should_store_message",
                                "display_name": "Store Messages",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Store the message in the history.",
                                "title_case": false,
                                "type": "bool"
                            }
                        },
                        "description": "Display a chat message in the Playground.",
                        "icon": "ChatOutput",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Chat Output",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "message",
                                "display_name": "Message",
                                "method": "message_response",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "should_store_message",
                            "sender",
                            "sender_name",
                            "session_id",
                            "data_template"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "ChatOutput-IACYe",
                    "description": "Display a chat message in the Playground.",
                    "display_name": "Chat Output"
                },
                "selected": false,
                "width": 384,
                "height": 309,
                "positionAbsolute": {
                    "x": 1070.9148596889393,
                    "y": 499.80777483894144
                },
                "dragging": false
            },
            {
                "id": "HierarchicalTaskComponent-vvJXu",
                "type": "genericNode",
                "position": {
                    "x": 63.673086094601445,
                    "y": -375.5883288441139
                },
                "data": {
                    "type": "HierarchicalTaskComponent",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "tools": {
                                "trace_as_metadata": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "tools",
                                "display_name": "Tools",
                                "advanced": true,
                                "input_types": [
                                    "Tool"
                                ],
                                "dynamic": false,
                                "info": "List of tools/resources limited for task execution. Uses the Agent tools by default.",
                                "title_case": false,
                                "type": "other"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.agents.crewai.tasks import HierarchicalTask\nfrom langflow.custom import Component\nfrom langflow.io import HandleInput, MultilineInput, Output\n\n\nclass HierarchicalTaskComponent(Component):\n    display_name: str = \"Hierarchical Task\"\n    description: str = \"Each task must have a description, an expected output and an agent responsible for execution.\"\n    icon = \"CrewAI\"\n    inputs = [\n        MultilineInput(\n            name=\"task_description\",\n            display_name=\"Description\",\n            info=\"Descriptive text detailing task's purpose and execution.\",\n        ),\n        MultilineInput(\n            name=\"expected_output\",\n            display_name=\"Expected Output\",\n            info=\"Clear definition of expected task outcome.\",\n        ),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"List of tools/resources limited for task execution. Uses the Agent tools by default.\",\n            required=False,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Task\", name=\"task_output\", method=\"build_task\"),\n    ]\n\n    def build_task(self) -> HierarchicalTask:\n        task = HierarchicalTask(\n            description=self.task_description,\n            expected_output=self.expected_output,\n            tools=self.tools or [],\n        )\n        self.status = task\n        return task\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "expected_output": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Succinct response that answers the User's query.",
                                "name": "expected_output",
                                "display_name": "Expected Output",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Clear definition of expected task outcome.",
                                "title_case": false,
                                "type": "str"
                            },
                            "task_description": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "task_description",
                                "display_name": "Description",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Descriptive text detailing task's purpose and execution.",
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Each task must have a description, an expected output and an agent responsible for execution.",
                        "icon": "CrewAI",
                        "base_classes": [
                            "HierarchicalTask"
                        ],
                        "display_name": "Hierarchical Task",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "HierarchicalTask"
                                ],
                                "selected": "HierarchicalTask",
                                "name": "task_output",
                                "display_name": "Task",
                                "method": "build_task",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "task_description",
                            "expected_output",
                            "tools"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "HierarchicalTaskComponent-vvJXu",
                    "description": "Each task must have a description, an expected output and an agent responsible for execution.",
                    "display_name": "Hierarchical Task"
                },
                "selected": false,
                "width": 384,
                "height": 455,
                "positionAbsolute": {
                    "x": 63.673086094601445,
                    "y": -375.5883288441139
                },
                "dragging": false
            },
            {
                "id": "CrewAIAgentComponent-XU5MB",
                "type": "genericNode",
                "position": {
                    "x": -479.3544836211363,
                    "y": 184.85118314299666
                },
                "data": {
                    "type": "CrewAIAgentComponent",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "llm": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "llm",
                                "display_name": "Language Model",
                                "advanced": false,
                                "input_types": [
                                    "LanguageModel"
                                ],
                                "dynamic": false,
                                "info": "Language model that will run the agent.",
                                "title_case": false,
                                "type": "other"
                            },
                            "tools": {
                                "trace_as_metadata": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": [],
                                "name": "tools",
                                "display_name": "Tools",
                                "advanced": false,
                                "input_types": [
                                    "Tool"
                                ],
                                "dynamic": false,
                                "info": "Tools at agents disposal",
                                "title_case": false,
                                "type": "other"
                            },
                            "allow_code_execution": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "allow_code_execution",
                                "display_name": "Allow Code Execution",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Whether the agent is allowed to execute code.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "allow_delegation": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": true,
                                "name": "allow_delegation",
                                "display_name": "Allow Delegation",
                                "advanced": false,
                                "dynamic": false,
                                "info": "Whether the agent is allowed to delegate tasks to other agents.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "backstory": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "You are a reliable researcher and journalist ",
                                "name": "backstory",
                                "display_name": "Backstory",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The backstory of the agent.",
                                "title_case": false,
                                "type": "str"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from crewai import Agent  # type: ignore\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, DictInput, HandleInput, MultilineInput, Output\n\n\nclass CrewAIAgentComponent(Component):\n    display_name = \"CrewAI Agent\"\n    description = \"Represents an agent of CrewAI.\"\n    documentation: str = \"https://docs.crewai.com/how-to/LLM-Connections/\"\n    icon = \"CrewAI\"\n\n    inputs = [\n        MultilineInput(name=\"role\", display_name=\"Role\", info=\"The role of the agent.\"),\n        MultilineInput(name=\"goal\", display_name=\"Goal\", info=\"The objective of the agent.\"),\n        MultilineInput(name=\"backstory\", display_name=\"Backstory\", info=\"The backstory of the agent.\"),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"Tools at agents disposal\",\n            value=[],\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"Language model that will run the agent.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        BoolInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            info=\"Whether the agent should have memory or not\",\n            advanced=True,\n            value=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            advanced=True,\n            value=False,\n        ),\n        BoolInput(\n            name=\"allow_delegation\",\n            display_name=\"Allow Delegation\",\n            info=\"Whether the agent is allowed to delegate tasks to other agents.\",\n            value=True,\n        ),\n        BoolInput(\n            name=\"allow_code_execution\",\n            display_name=\"Allow Code Execution\",\n            info=\"Whether the agent is allowed to execute code.\",\n            value=False,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"kwargs\",\n            display_name=\"kwargs\",\n            info=\"kwargs of agent.\",\n            is_list=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Agent\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Agent:\n        kwargs = self.kwargs if self.kwargs else {}\n        agent = Agent(\n            role=self.role,\n            goal=self.goal,\n            backstory=self.backstory,\n            llm=self.llm,\n            verbose=self.verbose,\n            memory=self.memory,\n            tools=self.tools if self.tools else [],\n            allow_delegation=self.allow_delegation,\n            allow_code_execution=self.allow_code_execution,\n            **kwargs,\n        )\n        self.status = repr(agent)\n        return agent\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "goal": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Search for information about the User's query and answer as best as you can",
                                "name": "goal",
                                "display_name": "Goal",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The objective of the agent.",
                                "title_case": false,
                                "type": "str"
                            },
                            "kwargs": {
                                "trace_as_input": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": {},
                                "name": "kwargs",
                                "display_name": "kwargs",
                                "advanced": true,
                                "dynamic": false,
                                "info": "kwargs of agent.",
                                "title_case": false,
                                "type": "dict"
                            },
                            "memory": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": true,
                                "name": "memory",
                                "display_name": "Memory",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Whether the agent should have memory or not",
                                "title_case": false,
                                "type": "bool"
                            },
                            "role": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Research",
                                "name": "role",
                                "display_name": "Role",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The role of the agent.",
                                "title_case": false,
                                "type": "str"
                            },
                            "verbose": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "verbose",
                                "display_name": "Verbose",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "bool"
                            }
                        },
                        "description": "Represents an agent of CrewAI.",
                        "icon": "CrewAI",
                        "base_classes": [
                            "Agent"
                        ],
                        "display_name": "CrewAI Agent",
                        "documentation": "https://docs.crewai.com/how-to/LLM-Connections/",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Agent"
                                ],
                                "selected": "Agent",
                                "name": "output",
                                "display_name": "Agent",
                                "method": "build_output",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "role",
                            "goal",
                            "backstory",
                            "tools",
                            "llm",
                            "memory",
                            "verbose",
                            "allow_delegation",
                            "allow_code_execution",
                            "kwargs"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "CrewAIAgentComponent-XU5MB",
                    "description": "Represents an agent of CrewAI.",
                    "display_name": "CrewAI Agent"
                },
                "selected": false,
                "width": 384,
                "height": 665,
                "positionAbsolute": {
                    "x": -479.3544836211363,
                    "y": 184.85118314299666
                },
                "dragging": false
            },
            {
                "id": "CrewAIAgentComponent-Trkfd",
                "type": "genericNode",
                "position": {
                    "x": -451.69853654304495,
                    "y": 1664.003205846104
                },
                "data": {
                    "type": "CrewAIAgentComponent",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "llm": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "llm",
                                "display_name": "Language Model",
                                "advanced": false,
                                "input_types": [
                                    "LanguageModel"
                                ],
                                "dynamic": false,
                                "info": "Language model that will run the agent.",
                                "title_case": false,
                                "type": "other"
                            },
                            "tools": {
                                "trace_as_metadata": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": [],
                                "name": "tools",
                                "display_name": "Tools",
                                "advanced": false,
                                "input_types": [
                                    "Tool"
                                ],
                                "dynamic": false,
                                "info": "Tools at agents disposal",
                                "title_case": false,
                                "type": "other"
                            },
                            "allow_code_execution": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "allow_code_execution",
                                "display_name": "Allow Code Execution",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Whether the agent is allowed to execute code.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "allow_delegation": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": true,
                                "name": "allow_delegation",
                                "display_name": "Allow Delegation",
                                "advanced": false,
                                "dynamic": false,
                                "info": "Whether the agent is allowed to delegate tasks to other agents.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "backstory": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "You are polite and helpful. You've always been a beacon of politeness.",
                                "name": "backstory",
                                "display_name": "Backstory",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The backstory of the agent.",
                                "title_case": false,
                                "type": "str"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from crewai import Agent  # type: ignore\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, DictInput, HandleInput, MultilineInput, Output\n\n\nclass CrewAIAgentComponent(Component):\n    display_name = \"CrewAI Agent\"\n    description = \"Represents an agent of CrewAI.\"\n    documentation: str = \"https://docs.crewai.com/how-to/LLM-Connections/\"\n    icon = \"CrewAI\"\n\n    inputs = [\n        MultilineInput(name=\"role\", display_name=\"Role\", info=\"The role of the agent.\"),\n        MultilineInput(name=\"goal\", display_name=\"Goal\", info=\"The objective of the agent.\"),\n        MultilineInput(name=\"backstory\", display_name=\"Backstory\", info=\"The backstory of the agent.\"),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"Tools at agents disposal\",\n            value=[],\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"Language model that will run the agent.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        BoolInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            info=\"Whether the agent should have memory or not\",\n            advanced=True,\n            value=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            advanced=True,\n            value=False,\n        ),\n        BoolInput(\n            name=\"allow_delegation\",\n            display_name=\"Allow Delegation\",\n            info=\"Whether the agent is allowed to delegate tasks to other agents.\",\n            value=True,\n        ),\n        BoolInput(\n            name=\"allow_code_execution\",\n            display_name=\"Allow Code Execution\",\n            info=\"Whether the agent is allowed to execute code.\",\n            value=False,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"kwargs\",\n            display_name=\"kwargs\",\n            info=\"kwargs of agent.\",\n            is_list=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Agent\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Agent:\n        kwargs = self.kwargs if self.kwargs else {}\n        agent = Agent(\n            role=self.role,\n            goal=self.goal,\n            backstory=self.backstory,\n            llm=self.llm,\n            verbose=self.verbose,\n            memory=self.memory,\n            tools=self.tools if self.tools else [],\n            allow_delegation=self.allow_delegation,\n            allow_code_execution=self.allow_code_execution,\n            **kwargs,\n        )\n        self.status = repr(agent)\n        return agent\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "goal": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "You can answer general questions from the User and may call others for help if needed.",
                                "name": "goal",
                                "display_name": "Goal",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The objective of the agent.",
                                "title_case": false,
                                "type": "str"
                            },
                            "kwargs": {
                                "trace_as_input": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": {},
                                "name": "kwargs",
                                "display_name": "kwargs",
                                "advanced": true,
                                "dynamic": false,
                                "info": "kwargs of agent.",
                                "title_case": false,
                                "type": "dict"
                            },
                            "memory": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": true,
                                "name": "memory",
                                "display_name": "Memory",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Whether the agent should have memory or not",
                                "title_case": false,
                                "type": "bool"
                            },
                            "role": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Manager",
                                "name": "role",
                                "display_name": "Role",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The role of the agent.",
                                "title_case": false,
                                "type": "str"
                            },
                            "verbose": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "verbose",
                                "display_name": "Verbose",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "bool"
                            }
                        },
                        "description": "Represents an agent of CrewAI.",
                        "icon": "CrewAI",
                        "base_classes": [
                            "Agent"
                        ],
                        "display_name": "CrewAI Agent",
                        "documentation": "https://docs.crewai.com/how-to/LLM-Connections/",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Agent"
                                ],
                                "selected": "Agent",
                                "name": "output",
                                "display_name": "Agent",
                                "method": "build_output",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "role",
                            "goal",
                            "backstory",
                            "tools",
                            "llm",
                            "memory",
                            "verbose",
                            "allow_delegation",
                            "allow_code_execution",
                            "kwargs"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "CrewAIAgentComponent-Trkfd",
                    "description": "Represents an agent of CrewAI.",
                    "display_name": "CrewAI Agent"
                },
                "selected": false,
                "width": 384,
                "height": 665,
                "positionAbsolute": {
                    "x": -451.69853654304495,
                    "y": 1664.003205846104
                },
                "dragging": false
            },
            {
                "id": "OpenAIModel-0cqIu",
                "type": "genericNode",
                "position": {
                    "x": -1157.0105401589535,
                    "y": 1699.4665001507685
                },
                "data": {
                    "type": "OpenAIModel",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "import operator\nfrom functools import reduce\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    MessageInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        MessageInput(name=\"input_value\", display_name=\"Input\"),\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\", display_name=\"Model Name\", advanced=False, options=MODEL_NAMES, value=MODEL_NAMES[0]\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        BoolInput(name=\"stream\", display_name=\"Stream\", info=STREAM_INFO_TEXT, advanced=True),\n        StrInput(\n            name=\"system_message\",\n            display_name=\"System Message\",\n            info=\"System message to pass to the model.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schea is a list of dictionarie s\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.openai_api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n        model_kwargs[\"seed\"] = seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "input_value",
                                "display_name": "Input",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "json_mode": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "json_mode",
                                "display_name": "JSON Mode",
                                "advanced": true,
                                "dynamic": false,
                                "info": "If True, it will output JSON regardless of passing a schema.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "max_tokens": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "max_tokens",
                                "display_name": "Max Tokens",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                "title_case": false,
                                "type": "int"
                            },
                            "model_kwargs": {
                                "trace_as_input": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": {},
                                "name": "model_kwargs",
                                "display_name": "Model Kwargs",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "dict"
                            },
                            "model_name": {
                                "trace_as_metadata": true,
                                "options": [
                                    "gpt-4o",
                                    "gpt-4-turbo",
                                    "gpt-4-turbo-preview",
                                    "gpt-4",
                                    "gpt-3.5-turbo",
                                    "gpt-3.5-turbo-0125"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "gpt-4o",
                                "name": "model_name",
                                "display_name": "Model Name",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "str"
                            },
                            "openai_api_base": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "openai_api_base",
                                "display_name": "OpenAI API Base",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                "title_case": false,
                                "type": "str"
                            },
                            "openai_api_key": {
                                "load_from_db": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "openai_api_key",
                                "display_name": "OpenAI API Key",
                                "advanced": false,
                                "input_types": [],
                                "dynamic": false,
                                "info": "The OpenAI API Key to use for the OpenAI model.",
                                "title_case": false,
                                "password": true,
                                "type": "str"
                            },
                            "output_schema": {
                                "trace_as_input": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": {},
                                "name": "output_schema",
                                "display_name": "Schema",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.",
                                "title_case": false,
                                "type": "dict"
                            },
                            "seed": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 1,
                                "name": "seed",
                                "display_name": "Seed",
                                "advanced": true,
                                "dynamic": false,
                                "info": "The seed controls the reproducibility of the job.",
                                "title_case": false,
                                "type": "int"
                            },
                            "stream": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "stream",
                                "display_name": "Stream",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Stream the response from the model. Streaming works only in Chat.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "system_message": {
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "system_message",
                                "display_name": "System Message",
                                "advanced": true,
                                "dynamic": false,
                                "info": "System message to pass to the model.",
                                "title_case": false,
                                "type": "str"
                            },
                            "temperature": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": 0.1,
                                "name": "temperature",
                                "display_name": "Temperature",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "float"
                            }
                        },
                        "description": "Generates text using OpenAI LLMs.",
                        "icon": "OpenAI",
                        "base_classes": [
                            "LanguageModel",
                            "Message"
                        ],
                        "display_name": "OpenAI",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "text_output",
                                "display_name": "Text",
                                "method": "text_response",
                                "value": "__UNDEFINED__",
                                "cache": true
                            },
                            {
                                "types": [
                                    "LanguageModel"
                                ],
                                "selected": "LanguageModel",
                                "name": "model_output",
                                "display_name": "Language Model",
                                "method": "build_model",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "max_tokens",
                            "model_kwargs",
                            "json_mode",
                            "output_schema",
                            "model_name",
                            "openai_api_base",
                            "openai_api_key",
                            "temperature",
                            "stream",
                            "system_message",
                            "seed"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "OpenAIModel-0cqIu"
                },
                "selected": false,
                "width": 384,
                "height": 623,
                "positionAbsolute": {
                    "x": -1157.0105401589535,
                    "y": 1699.4665001507685
                },
                "dragging": false
            },
            {
                "id": "Prompt-5o2wP",
                "type": "genericNode",
                "position": {
                    "x": -561.9017558579421,
                    "y": -433.5913161630874
                },
                "data": {
                    "type": "Prompt",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "template": {
                                "trace_as_input": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "User's query:\n{query}\n\nRespond to the user with as much as information as you can about the topic. Delete if needed. If it is just a general query (e.g a greeting) you can respond them directly.",
                                "name": "template",
                                "display_name": "Template",
                                "advanced": false,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "prompt"
                            },
                            "query": {
                                "field_type": "str",
                                "required": false,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "query",
                                "display_name": "query",
                                "advanced": false,
                                "input_types": [
                                    "Message",
                                    "Text"
                                ],
                                "dynamic": false,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false,
                                "type": "str"
                            }
                        },
                        "description": "Create a prompt template with dynamic variables.",
                        "icon": "prompts",
                        "is_input": null,
                        "is_output": null,
                        "is_composition": null,
                        "base_classes": [
                            "Message"
                        ],
                        "name": "",
                        "display_name": "Prompt",
                        "documentation": "",
                        "custom_fields": {
                            "template": [
                                "query"
                            ]
                        },
                        "output_types": [],
                        "full_path": null,
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "prompt",
                                "hidden": null,
                                "display_name": "Prompt Message",
                                "method": "build_prompt",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "template"
                        ],
                        "beta": false,
                        "error": null,
                        "edited": false
                    },
                    "id": "Prompt-5o2wP",
                    "description": "Create a prompt template with dynamic variables.",
                    "display_name": "Prompt"
                },
                "selected": false,
                "width": 384,
                "height": 423,
                "positionAbsolute": {
                    "x": -561.9017558579421,
                    "y": -433.5913161630874
                },
                "dragging": false
            },
            {
                "id": "ChatInput-kHOLm",
                "type": "genericNode",
                "position": {
                    "x": -1142.1418710409707,
                    "y": -372.98153583376074
                },
                "data": {
                    "type": "ChatInput",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "files": {
                                "trace_as_metadata": true,
                                "file_path": "",
                                "fileTypes": [
                                    "txt",
                                    "md",
                                    "mdx",
                                    "csv",
                                    "json",
                                    "yaml",
                                    "yml",
                                    "xml",
                                    "html",
                                    "htm",
                                    "pdf",
                                    "docx",
                                    "py",
                                    "sh",
                                    "sql",
                                    "js",
                                    "ts",
                                    "tsx",
                                    "jpg",
                                    "jpeg",
                                    "png",
                                    "bmp",
                                    "image"
                                ],
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "files",
                                "display_name": "Files",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Files to be sent with the message.",
                                "title_case": false,
                                "type": "file"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[\"Machine\", \"User\"],\n            value=\"User\",\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=\"User\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "input_value": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "What is Langflow?",
                                "name": "input_value",
                                "display_name": "Text",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Message to be passed as input.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender": {
                                "trace_as_metadata": true,
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "User",
                                "name": "sender",
                                "display_name": "Sender Type",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Type of sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "sender_name": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "User",
                                "name": "sender_name",
                                "display_name": "Sender Name",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "title_case": false,
                                "type": "str"
                            },
                            "session_id": {
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "session_id",
                                "display_name": "Session ID",
                                "advanced": true,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "Session ID for the message.",
                                "title_case": false,
                                "type": "str"
                            },
                            "should_store_message": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": true,
                                "name": "should_store_message",
                                "display_name": "Store Messages",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Store the message in the history.",
                                "title_case": false,
                                "type": "bool"
                            }
                        },
                        "description": "Get chat inputs from the Playground.",
                        "icon": "ChatInput",
                        "base_classes": [
                            "Message"
                        ],
                        "display_name": "Chat Input",
                        "documentation": "",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Message"
                                ],
                                "selected": "Message",
                                "name": "message",
                                "display_name": "Message",
                                "method": "message_response",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "input_value",
                            "should_store_message",
                            "sender",
                            "sender_name",
                            "session_id",
                            "files"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "ChatInput-kHOLm"
                },
                "selected": false,
                "width": 384,
                "height": 309,
                "positionAbsolute": {
                    "x": -1142.1418710409707,
                    "y": -372.98153583376074
                },
                "dragging": false
            },
            {
                "id": "SearchAPITool-fmETj",
                "type": "genericNode",
                "position": {
                    "x": -1200.258747181863,
                    "y": 206.70950310719434
                },
                "data": {
                    "type": "SearchAPITool",
                    "node": {
                        "template": {
                            "_type": "CustomComponent",
                            "api_key": {
                                "type": "str",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": false,
                                "fileTypes": [],
                                "file_path": "",
                                "password": true,
                                "name": "api_key",
                                "display_name": "API Key",
                                "advanced": false,
                                "dynamic": false,
                                "info": "The API key to use SearchApi.",
                                "load_from_db": false,
                                "title_case": false,
                                "input_types": [
                                    "Text"
                                ],
                                "value": ""
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from langchain_community.tools.searchapi import SearchAPIRun\nfrom langchain_community.utilities.searchapi import SearchApiAPIWrapper\n\nfrom langflow.custom import CustomComponent\nfrom langflow.field_typing import Tool\n\n\nclass SearchApiToolComponent(CustomComponent):\n    display_name: str = \"SearchApi Tool\"\n    description: str = \"Real-time search engine results API.\"\n    name = \"SearchAPITool\"\n    documentation: str = \"https://www.searchapi.io/docs/google\"\n    field_config = {\n        \"engine\": {\n            \"display_name\": \"Engine\",\n            \"field_type\": \"str\",\n            \"info\": \"The search engine to use.\",\n        },\n        \"api_key\": {\n            \"display_name\": \"API Key\",\n            \"field_type\": \"str\",\n            \"required\": True,\n            \"password\": True,\n            \"info\": \"The API key to use SearchApi.\",\n        },\n    }\n\n    def build(\n        self,\n        engine: str,\n        api_key: str,\n    ) -> Tool:\n        search_api_wrapper = SearchApiAPIWrapper(engine=engine, searchapi_api_key=api_key)\n\n        tool = SearchAPIRun(api_wrapper=search_api_wrapper)\n\n        self.status = tool\n        return tool  # type: ignore\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "engine": {
                                "type": "str",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": false,
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "engine",
                                "display_name": "Engine",
                                "advanced": false,
                                "dynamic": false,
                                "info": "The search engine to use.",
                                "load_from_db": false,
                                "title_case": false,
                                "input_types": [
                                    "Text"
                                ],
                                "value": "google"
                            }
                        },
                        "description": "Real-time search engine results API.",
                        "base_classes": [
                            "BaseTool",
                            "Generic",
                            "object",
                            "Runnable",
                            "RunnableSerializable",
                            "Serializable",
                            "Tool"
                        ],
                        "display_name": "SearchApi Tool",
                        "documentation": "https://www.searchapi.io/docs/google",
                        "custom_fields": {
                            "engine": null,
                            "api_key": null
                        },
                        "output_types": [
                            "Tool"
                        ],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Tool"
                                ],
                                "selected": "Tool",
                                "name": "tool",
                                "hidden": null,
                                "display_name": "Tool",
                                "method": null,
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "engine",
                            "api_key"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "SearchAPITool-fmETj"
                },
                "selected": false,
                "width": 384,
                "height": 403,
                "positionAbsolute": {
                    "x": -1200.258747181863,
                    "y": 206.70950310719434
                },
                "dragging": false
            },
            {
                "id": "CrewAIAgentComponent-V2kfR",
                "type": "genericNode",
                "position": {
                    "x": -397.2627184897183,
                    "y": 892.6280687419107
                },
                "data": {
                    "type": "CrewAIAgentComponent",
                    "node": {
                        "template": {
                            "_type": "Component",
                            "llm": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "",
                                "name": "llm",
                                "display_name": "Language Model",
                                "advanced": false,
                                "input_types": [
                                    "LanguageModel"
                                ],
                                "dynamic": false,
                                "info": "Language model that will run the agent.",
                                "title_case": false,
                                "type": "other"
                            },
                            "tools": {
                                "trace_as_metadata": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": [],
                                "name": "tools",
                                "display_name": "Tools",
                                "advanced": false,
                                "input_types": [
                                    "Tool"
                                ],
                                "dynamic": false,
                                "info": "Tools at agents disposal",
                                "title_case": false,
                                "type": "other"
                            },
                            "allow_code_execution": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "allow_code_execution",
                                "display_name": "Allow Code Execution",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Whether the agent is allowed to execute code.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "allow_delegation": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": true,
                                "name": "allow_delegation",
                                "display_name": "Allow Delegation",
                                "advanced": false,
                                "dynamic": false,
                                "info": "Whether the agent is allowed to delegate tasks to other agents.",
                                "title_case": false,
                                "type": "bool"
                            },
                            "backstory": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "You are a reliable researcher and journalist ",
                                "name": "backstory",
                                "display_name": "Backstory",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The backstory of the agent.",
                                "title_case": false,
                                "type": "str"
                            },
                            "code": {
                                "type": "code",
                                "required": true,
                                "placeholder": "",
                                "list": false,
                                "show": true,
                                "multiline": true,
                                "value": "from crewai import Agent  # type: ignore\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, DictInput, HandleInput, MultilineInput, Output\n\n\nclass CrewAIAgentComponent(Component):\n    display_name = \"CrewAI Agent\"\n    description = \"Represents an agent of CrewAI.\"\n    documentation: str = \"https://docs.crewai.com/how-to/LLM-Connections/\"\n    icon = \"CrewAI\"\n\n    inputs = [\n        MultilineInput(name=\"role\", display_name=\"Role\", info=\"The role of the agent.\"),\n        MultilineInput(name=\"goal\", display_name=\"Goal\", info=\"The objective of the agent.\"),\n        MultilineInput(name=\"backstory\", display_name=\"Backstory\", info=\"The backstory of the agent.\"),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n            info=\"Tools at agents disposal\",\n            value=[],\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"Language model that will run the agent.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        BoolInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            info=\"Whether the agent should have memory or not\",\n            advanced=True,\n            value=True,\n        ),\n        BoolInput(\n            name=\"verbose\",\n            display_name=\"Verbose\",\n            advanced=True,\n            value=False,\n        ),\n        BoolInput(\n            name=\"allow_delegation\",\n            display_name=\"Allow Delegation\",\n            info=\"Whether the agent is allowed to delegate tasks to other agents.\",\n            value=True,\n        ),\n        BoolInput(\n            name=\"allow_code_execution\",\n            display_name=\"Allow Code Execution\",\n            info=\"Whether the agent is allowed to execute code.\",\n            value=False,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"kwargs\",\n            display_name=\"kwargs\",\n            info=\"kwargs of agent.\",\n            is_list=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Agent\", name=\"output\", method=\"build_output\"),\n    ]\n\n    def build_output(self) -> Agent:\n        kwargs = self.kwargs if self.kwargs else {}\n        agent = Agent(\n            role=self.role,\n            goal=self.goal,\n            backstory=self.backstory,\n            llm=self.llm,\n            verbose=self.verbose,\n            memory=self.memory,\n            tools=self.tools if self.tools else [],\n            allow_delegation=self.allow_delegation,\n            allow_code_execution=self.allow_code_execution,\n            **kwargs,\n        )\n        self.status = repr(agent)\n        return agent\n",
                                "fileTypes": [],
                                "file_path": "",
                                "password": false,
                                "name": "code",
                                "advanced": true,
                                "dynamic": true,
                                "info": "",
                                "load_from_db": false,
                                "title_case": false
                            },
                            "goal": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Evaluate the information for misleading or biased data.",
                                "name": "goal",
                                "display_name": "Goal",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The objective of the agent.",
                                "title_case": false,
                                "type": "str"
                            },
                            "kwargs": {
                                "trace_as_input": true,
                                "list": true,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": {},
                                "name": "kwargs",
                                "display_name": "kwargs",
                                "advanced": true,
                                "dynamic": false,
                                "info": "kwargs of agent.",
                                "title_case": false,
                                "type": "dict"
                            },
                            "memory": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": true,
                                "name": "memory",
                                "display_name": "Memory",
                                "advanced": true,
                                "dynamic": false,
                                "info": "Whether the agent should have memory or not",
                                "title_case": false,
                                "type": "bool"
                            },
                            "role": {
                                "trace_as_input": true,
                                "multiline": true,
                                "trace_as_metadata": true,
                                "load_from_db": false,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": "Editor",
                                "name": "role",
                                "display_name": "Role",
                                "advanced": false,
                                "input_types": [
                                    "Message"
                                ],
                                "dynamic": false,
                                "info": "The role of the agent.",
                                "title_case": false,
                                "type": "str"
                            },
                            "verbose": {
                                "trace_as_metadata": true,
                                "list": false,
                                "required": false,
                                "placeholder": "",
                                "show": true,
                                "value": false,
                                "name": "verbose",
                                "display_name": "Verbose",
                                "advanced": true,
                                "dynamic": false,
                                "info": "",
                                "title_case": false,
                                "type": "bool"
                            }
                        },
                        "description": "Represents an agent of CrewAI.",
                        "icon": "CrewAI",
                        "base_classes": [
                            "Agent"
                        ],
                        "display_name": "CrewAI Agent",
                        "documentation": "https://docs.crewai.com/how-to/LLM-Connections/",
                        "custom_fields": {},
                        "output_types": [],
                        "pinned": false,
                        "conditional_paths": [],
                        "frozen": false,
                        "outputs": [
                            {
                                "types": [
                                    "Agent"
                                ],
                                "selected": "Agent",
                                "name": "output",
                                "display_name": "Agent",
                                "method": "build_output",
                                "value": "__UNDEFINED__",
                                "cache": true
                            }
                        ],
                        "field_order": [
                            "role",
                            "goal",
                            "backstory",
                            "tools",
                            "llm",
                            "memory",
                            "verbose",
                            "allow_delegation",
                            "allow_code_execution",
                            "kwargs"
                        ],
                        "beta": false,
                        "edited": false
                    },
                    "id": "CrewAIAgentComponent-V2kfR",
                    "description": "Represents an agent of CrewAI.",
                    "display_name": "CrewAI Agent"
                },
                "selected": false,
                "width": 384,
                "height": 665,
                "positionAbsolute": {
                    "x": -397.2627184897183,
                    "y": 892.6280687419107
                },
                "dragging": false
            }
        ],
        "edges": [
            {
                "source": "HierarchicalCrewComponent-JNKGT",
                "sourceHandle": "{œdataTypeœ:œHierarchicalCrewComponentœ,œidœ:œHierarchicalCrewComponent-JNKGTœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}",
                "target": "ChatOutput-IACYe",
                "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-IACYeœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "ChatOutput-IACYe",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "HierarchicalCrewComponent",
                        "id": "HierarchicalCrewComponent-JNKGT",
                        "name": "output",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-HierarchicalCrewComponent-JNKGT{œdataTypeœ:œHierarchicalCrewComponentœ,œidœ:œHierarchicalCrewComponent-JNKGTœ,œnameœ:œoutputœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-IACYe{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-IACYeœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "selected": false,
                "className": ""
            },
            {
                "source": "HierarchicalTaskComponent-vvJXu",
                "sourceHandle": "{œdataTypeœ:œHierarchicalTaskComponentœ,œidœ:œHierarchicalTaskComponent-vvJXuœ,œnameœ:œtask_outputœ,œoutput_typesœ:[œHierarchicalTaskœ]}",
                "target": "HierarchicalCrewComponent-JNKGT",
                "targetHandle": "{œfieldNameœ:œtasksœ,œidœ:œHierarchicalCrewComponent-JNKGTœ,œinputTypesœ:[œHierarchicalTaskœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "tasks",
                        "id": "HierarchicalCrewComponent-JNKGT",
                        "inputTypes": [
                            "HierarchicalTask"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "HierarchicalTaskComponent",
                        "id": "HierarchicalTaskComponent-vvJXu",
                        "name": "task_output",
                        "output_types": [
                            "HierarchicalTask"
                        ]
                    }
                },
                "id": "reactflow__edge-HierarchicalTaskComponent-vvJXu{œdataTypeœ:œHierarchicalTaskComponentœ,œidœ:œHierarchicalTaskComponent-vvJXuœ,œnameœ:œtask_outputœ,œoutput_typesœ:[œHierarchicalTaskœ]}-HierarchicalCrewComponent-JNKGT{œfieldNameœ:œtasksœ,œidœ:œHierarchicalCrewComponent-JNKGTœ,œinputTypesœ:[œHierarchicalTaskœ],œtypeœ:œotherœ}",
                "selected": false,
                "className": ""
            },
            {
                "source": "CrewAIAgentComponent-XU5MB",
                "sourceHandle": "{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-XU5MBœ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}",
                "target": "HierarchicalCrewComponent-JNKGT",
                "targetHandle": "{œfieldNameœ:œagentsœ,œidœ:œHierarchicalCrewComponent-JNKGTœ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "agents",
                        "id": "HierarchicalCrewComponent-JNKGT",
                        "inputTypes": [
                            "Agent"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "CrewAIAgentComponent",
                        "id": "CrewAIAgentComponent-XU5MB",
                        "name": "output",
                        "output_types": [
                            "Agent"
                        ]
                    }
                },
                "id": "reactflow__edge-CrewAIAgentComponent-XU5MB{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-XU5MBœ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}-HierarchicalCrewComponent-JNKGT{œfieldNameœ:œagentsœ,œidœ:œHierarchicalCrewComponent-JNKGTœ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}",
                "className": "",
                "selected": false
            },
            {
                "source": "OpenAIModel-xoZ41",
                "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-xoZ41œ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
                "target": "CrewAIAgentComponent-XU5MB",
                "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-XU5MBœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "llm",
                        "id": "CrewAIAgentComponent-XU5MB",
                        "inputTypes": [
                            "LanguageModel"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "OpenAIModel",
                        "id": "OpenAIModel-xoZ41",
                        "name": "model_output",
                        "output_types": [
                            "LanguageModel"
                        ]
                    }
                },
                "id": "reactflow__edge-OpenAIModel-xoZ41{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-xoZ41œ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CrewAIAgentComponent-XU5MB{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-XU5MBœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
                "className": "",
                "selected": false
            },
            {
                "source": "CrewAIAgentComponent-Trkfd",
                "sourceHandle": "{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-Trkfdœ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}",
                "target": "HierarchicalCrewComponent-JNKGT",
                "targetHandle": "{œfieldNameœ:œmanager_agentœ,œidœ:œHierarchicalCrewComponent-JNKGTœ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "manager_agent",
                        "id": "HierarchicalCrewComponent-JNKGT",
                        "inputTypes": [
                            "Agent"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "CrewAIAgentComponent",
                        "id": "CrewAIAgentComponent-Trkfd",
                        "name": "output",
                        "output_types": [
                            "Agent"
                        ]
                    }
                },
                "id": "reactflow__edge-CrewAIAgentComponent-Trkfd{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-Trkfdœ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}-HierarchicalCrewComponent-JNKGT{œfieldNameœ:œmanager_agentœ,œidœ:œHierarchicalCrewComponent-JNKGTœ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}",
                "className": "",
                "selected": false
            },
            {
                "source": "OpenAIModel-0cqIu",
                "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-0cqIuœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
                "target": "CrewAIAgentComponent-Trkfd",
                "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-Trkfdœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "llm",
                        "id": "CrewAIAgentComponent-Trkfd",
                        "inputTypes": [
                            "LanguageModel"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "OpenAIModel",
                        "id": "OpenAIModel-0cqIu",
                        "name": "model_output",
                        "output_types": [
                            "LanguageModel"
                        ]
                    }
                },
                "id": "reactflow__edge-OpenAIModel-0cqIu{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-0cqIuœ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CrewAIAgentComponent-Trkfd{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-Trkfdœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
                "className": "",
                "selected": false
            },
            {
                "source": "Prompt-5o2wP",
                "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-5o2wPœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
                "target": "HierarchicalTaskComponent-vvJXu",
                "targetHandle": "{œfieldNameœ:œtask_descriptionœ,œidœ:œHierarchicalTaskComponent-vvJXuœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "task_description",
                        "id": "HierarchicalTaskComponent-vvJXu",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "Prompt",
                        "id": "Prompt-5o2wP",
                        "name": "prompt",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-Prompt-5o2wP{œdataTypeœ:œPromptœ,œidœ:œPrompt-5o2wPœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-HierarchicalTaskComponent-vvJXu{œfieldNameœ:œtask_descriptionœ,œidœ:œHierarchicalTaskComponent-vvJXuœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "ChatInput-kHOLm",
                "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-kHOLmœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
                "target": "Prompt-5o2wP",
                "targetHandle": "{œfieldNameœ:œqueryœ,œidœ:œPrompt-5o2wPœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "query",
                        "id": "Prompt-5o2wP",
                        "inputTypes": [
                            "Message",
                            "Text"
                        ],
                        "type": "str"
                    },
                    "sourceHandle": {
                        "dataType": "ChatInput",
                        "id": "ChatInput-kHOLm",
                        "name": "message",
                        "output_types": [
                            "Message"
                        ]
                    }
                },
                "id": "reactflow__edge-ChatInput-kHOLm{œdataTypeœ:œChatInputœ,œidœ:œChatInput-kHOLmœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-5o2wP{œfieldNameœ:œqueryœ,œidœ:œPrompt-5o2wPœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
                "className": ""
            },
            {
                "source": "SearchAPITool-fmETj",
                "sourceHandle": "{œdataTypeœ:œSearchAPIToolœ,œidœ:œSearchAPITool-fmETjœ,œnameœ:œtoolœ,œoutput_typesœ:[œToolœ]}",
                "target": "CrewAIAgentComponent-XU5MB",
                "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCrewAIAgentComponent-XU5MBœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "tools",
                        "id": "CrewAIAgentComponent-XU5MB",
                        "inputTypes": [
                            "Tool"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "SearchAPITool",
                        "id": "SearchAPITool-fmETj",
                        "name": "tool",
                        "output_types": [
                            "Tool"
                        ]
                    }
                },
                "id": "reactflow__edge-SearchAPITool-fmETj{œdataTypeœ:œSearchAPIToolœ,œidœ:œSearchAPITool-fmETjœ,œnameœ:œtoolœ,œoutput_typesœ:[œToolœ]}-CrewAIAgentComponent-XU5MB{œfieldNameœ:œtoolsœ,œidœ:œCrewAIAgentComponent-XU5MBœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
                "selected": false,
                "className": ""
            },
            {
                "source": "CrewAIAgentComponent-V2kfR",
                "sourceHandle": "{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-V2kfRœ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}",
                "target": "HierarchicalCrewComponent-JNKGT",
                "targetHandle": "{œfieldNameœ:œagentsœ,œidœ:œHierarchicalCrewComponent-JNKGTœ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "agents",
                        "id": "HierarchicalCrewComponent-JNKGT",
                        "inputTypes": [
                            "Agent"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "CrewAIAgentComponent",
                        "id": "CrewAIAgentComponent-V2kfR",
                        "name": "output",
                        "output_types": [
                            "Agent"
                        ]
                    }
                },
                "id": "reactflow__edge-CrewAIAgentComponent-V2kfR{œdataTypeœ:œCrewAIAgentComponentœ,œidœ:œCrewAIAgentComponent-V2kfRœ,œnameœ:œoutputœ,œoutput_typesœ:[œAgentœ]}-HierarchicalCrewComponent-JNKGT{œfieldNameœ:œagentsœ,œidœ:œHierarchicalCrewComponent-JNKGTœ,œinputTypesœ:[œAgentœ],œtypeœ:œotherœ}",
                "className": ""
            },
            {
                "source": "OpenAIModel-xoZ41",
                "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-xoZ41œ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}",
                "target": "CrewAIAgentComponent-V2kfR",
                "targetHandle": "{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-V2kfRœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
                "data": {
                    "targetHandle": {
                        "fieldName": "llm",
                        "id": "CrewAIAgentComponent-V2kfR",
                        "inputTypes": [
                            "LanguageModel"
                        ],
                        "type": "other"
                    },
                    "sourceHandle": {
                        "dataType": "OpenAIModel",
                        "id": "OpenAIModel-xoZ41",
                        "name": "model_output",
                        "output_types": [
                            "LanguageModel"
                        ]
                    }
                },
                "id": "reactflow__edge-OpenAIModel-xoZ41{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-xoZ41œ,œnameœ:œmodel_outputœ,œoutput_typesœ:[œLanguageModelœ]}-CrewAIAgentComponent-V2kfR{œfieldNameœ:œllmœ,œidœ:œCrewAIAgentComponent-V2kfRœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œotherœ}",
                "className": ""
            }
        ],
        "viewport": {
            "x": 689.9423538038659,
            "y": 249.5990980882735,
            "zoom": 0.28087497575792186
        }
    },
    "description": "This Agentic Flow has a Manager and a couple Workers. The manager can answer the user's question straightaway or delegate the task to other agents.",
    "name": "Hierarchical Tasks Agent",
    "last_tested_version": "1.0.9",
    "endpoint_name": null,
    "is_component": false
}