# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ParabolicMorphologyPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkParabolicCloseImageFilterPython
else:
    import _itkParabolicCloseImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkParabolicCloseImageFilterID2ID2_Superclass_New():
    return itkParabolicCloseImageFilterID2ID2_Superclass.New()

class itkParabolicCloseImageFilterID2ID2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkParabolicCloseImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterID2ID2_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterID2ID2_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD2

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD2"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_GetScale(self)

    def SetUseImageSpacing(self, B):
        r"""
        SetUseImageSpacing(self, B)

        Parameters
        ----------
        B: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_SetUseImageSpacing(self, B)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_UseImageSpacingOff(self)

    def SetSafeBorder(self, _arg):
        r"""
        SetSafeBorder(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_SetSafeBorder(self, _arg)

    def GetSafeBorder(self):
        r"""GetSafeBorder(self) -> bool const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_GetSafeBorder(self)

    def SafeBorderOn(self):
        r"""SafeBorderOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_SafeBorderOn(self)

    def SafeBorderOff(self):
        r"""SafeBorderOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_SafeBorderOff(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_GetParabolicAlgorithm(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterID2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterID2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterID2ID2_Superclass

        Create a new object of the class itkParabolicCloseImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterID2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterID2ID2_Superclass in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Superclass_swigregister(itkParabolicCloseImageFilterID2ID2_Superclass)

def itkParabolicCloseImageFilterID3ID3_Superclass_New():
    return itkParabolicCloseImageFilterID3ID3_Superclass.New()

class itkParabolicCloseImageFilterID3ID3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkParabolicCloseImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterID3ID3_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterID3ID3_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD3

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD3"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_GetScale(self)

    def SetUseImageSpacing(self, B):
        r"""
        SetUseImageSpacing(self, B)

        Parameters
        ----------
        B: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_SetUseImageSpacing(self, B)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_UseImageSpacingOff(self)

    def SetSafeBorder(self, _arg):
        r"""
        SetSafeBorder(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_SetSafeBorder(self, _arg)

    def GetSafeBorder(self):
        r"""GetSafeBorder(self) -> bool const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_GetSafeBorder(self)

    def SafeBorderOn(self):
        r"""SafeBorderOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_SafeBorderOn(self)

    def SafeBorderOff(self):
        r"""SafeBorderOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_SafeBorderOff(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_GetParabolicAlgorithm(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterID3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterID3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterID3ID3_Superclass

        Create a new object of the class itkParabolicCloseImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterID3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterID3ID3_Superclass in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Superclass_swigregister(itkParabolicCloseImageFilterID3ID3_Superclass)

def itkParabolicCloseImageFilterID4ID4_Superclass_New():
    return itkParabolicCloseImageFilterID4ID4_Superclass.New()

class itkParabolicCloseImageFilterID4ID4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkParabolicCloseImageFilterID4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterID4ID4_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterID4ID4_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD4

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD4"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_GetScale(self)

    def SetUseImageSpacing(self, B):
        r"""
        SetUseImageSpacing(self, B)

        Parameters
        ----------
        B: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_SetUseImageSpacing(self, B)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_UseImageSpacingOff(self)

    def SetSafeBorder(self, _arg):
        r"""
        SetSafeBorder(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_SetSafeBorder(self, _arg)

    def GetSafeBorder(self):
        r"""GetSafeBorder(self) -> bool const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_GetSafeBorder(self)

    def SafeBorderOn(self):
        r"""SafeBorderOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_SafeBorderOn(self)

    def SafeBorderOff(self):
        r"""SafeBorderOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_SafeBorderOff(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_GetParabolicAlgorithm(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterID4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterID4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterID4ID4_Superclass

        Create a new object of the class itkParabolicCloseImageFilterID4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterID4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterID4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterID4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterID4ID4_Superclass in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Superclass_swigregister(itkParabolicCloseImageFilterID4ID4_Superclass)

def itkParabolicCloseImageFilterIF2IF2_Superclass_New():
    return itkParabolicCloseImageFilterIF2IF2_Superclass.New()

class itkParabolicCloseImageFilterIF2IF2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkParabolicCloseImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIF2IF2_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIF2IF2_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD2

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD2"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_GetScale(self)

    def SetUseImageSpacing(self, B):
        r"""
        SetUseImageSpacing(self, B)

        Parameters
        ----------
        B: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_SetUseImageSpacing(self, B)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_UseImageSpacingOff(self)

    def SetSafeBorder(self, _arg):
        r"""
        SetSafeBorder(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_SetSafeBorder(self, _arg)

    def GetSafeBorder(self):
        r"""GetSafeBorder(self) -> bool const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_GetSafeBorder(self)

    def SafeBorderOn(self):
        r"""SafeBorderOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_SafeBorderOn(self)

    def SafeBorderOff(self):
        r"""SafeBorderOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_SafeBorderOff(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_GetParabolicAlgorithm(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIF2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIF2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIF2IF2_Superclass

        Create a new object of the class itkParabolicCloseImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIF2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIF2IF2_Superclass in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Superclass_swigregister(itkParabolicCloseImageFilterIF2IF2_Superclass)

def itkParabolicCloseImageFilterIF3IF3_Superclass_New():
    return itkParabolicCloseImageFilterIF3IF3_Superclass.New()

class itkParabolicCloseImageFilterIF3IF3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkParabolicCloseImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIF3IF3_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIF3IF3_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD3

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD3"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_GetScale(self)

    def SetUseImageSpacing(self, B):
        r"""
        SetUseImageSpacing(self, B)

        Parameters
        ----------
        B: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_SetUseImageSpacing(self, B)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_UseImageSpacingOff(self)

    def SetSafeBorder(self, _arg):
        r"""
        SetSafeBorder(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_SetSafeBorder(self, _arg)

    def GetSafeBorder(self):
        r"""GetSafeBorder(self) -> bool const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_GetSafeBorder(self)

    def SafeBorderOn(self):
        r"""SafeBorderOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_SafeBorderOn(self)

    def SafeBorderOff(self):
        r"""SafeBorderOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_SafeBorderOff(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_GetParabolicAlgorithm(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIF3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIF3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIF3IF3_Superclass

        Create a new object of the class itkParabolicCloseImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIF3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIF3IF3_Superclass in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Superclass_swigregister(itkParabolicCloseImageFilterIF3IF3_Superclass)

def itkParabolicCloseImageFilterIF4IF4_Superclass_New():
    return itkParabolicCloseImageFilterIF4IF4_Superclass.New()

class itkParabolicCloseImageFilterIF4IF4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkParabolicCloseImageFilterIF4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIF4IF4_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIF4IF4_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD4

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD4"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_GetScale(self)

    def SetUseImageSpacing(self, B):
        r"""
        SetUseImageSpacing(self, B)

        Parameters
        ----------
        B: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_SetUseImageSpacing(self, B)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_UseImageSpacingOff(self)

    def SetSafeBorder(self, _arg):
        r"""
        SetSafeBorder(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_SetSafeBorder(self, _arg)

    def GetSafeBorder(self):
        r"""GetSafeBorder(self) -> bool const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_GetSafeBorder(self)

    def SafeBorderOn(self):
        r"""SafeBorderOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_SafeBorderOn(self)

    def SafeBorderOff(self):
        r"""SafeBorderOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_SafeBorderOff(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_GetParabolicAlgorithm(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIF4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIF4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIF4IF4_Superclass

        Create a new object of the class itkParabolicCloseImageFilterIF4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIF4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIF4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIF4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIF4IF4_Superclass in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Superclass_swigregister(itkParabolicCloseImageFilterIF4IF4_Superclass)

def itkParabolicCloseImageFilterISS2ISS2_Superclass_New():
    return itkParabolicCloseImageFilterISS2ISS2_Superclass.New()

class itkParabolicCloseImageFilterISS2ISS2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkParabolicCloseImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD2

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD2"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_GetScale(self)

    def SetUseImageSpacing(self, B):
        r"""
        SetUseImageSpacing(self, B)

        Parameters
        ----------
        B: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_SetUseImageSpacing(self, B)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_UseImageSpacingOff(self)

    def SetSafeBorder(self, _arg):
        r"""
        SetSafeBorder(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_SetSafeBorder(self, _arg)

    def GetSafeBorder(self):
        r"""GetSafeBorder(self) -> bool const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_GetSafeBorder(self)

    def SafeBorderOn(self):
        r"""SafeBorderOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_SafeBorderOn(self)

    def SafeBorderOff(self):
        r"""SafeBorderOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_SafeBorderOff(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_GetParabolicAlgorithm(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterISS2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterISS2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterISS2ISS2_Superclass

        Create a new object of the class itkParabolicCloseImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterISS2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterISS2ISS2_Superclass in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Superclass_swigregister(itkParabolicCloseImageFilterISS2ISS2_Superclass)

def itkParabolicCloseImageFilterISS3ISS3_Superclass_New():
    return itkParabolicCloseImageFilterISS3ISS3_Superclass.New()

class itkParabolicCloseImageFilterISS3ISS3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkParabolicCloseImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD3

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD3"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_GetScale(self)

    def SetUseImageSpacing(self, B):
        r"""
        SetUseImageSpacing(self, B)

        Parameters
        ----------
        B: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_SetUseImageSpacing(self, B)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_UseImageSpacingOff(self)

    def SetSafeBorder(self, _arg):
        r"""
        SetSafeBorder(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_SetSafeBorder(self, _arg)

    def GetSafeBorder(self):
        r"""GetSafeBorder(self) -> bool const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_GetSafeBorder(self)

    def SafeBorderOn(self):
        r"""SafeBorderOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_SafeBorderOn(self)

    def SafeBorderOff(self):
        r"""SafeBorderOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_SafeBorderOff(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_GetParabolicAlgorithm(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterISS3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterISS3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterISS3ISS3_Superclass

        Create a new object of the class itkParabolicCloseImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterISS3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterISS3ISS3_Superclass in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Superclass_swigregister(itkParabolicCloseImageFilterISS3ISS3_Superclass)

def itkParabolicCloseImageFilterISS4ISS4_Superclass_New():
    return itkParabolicCloseImageFilterISS4ISS4_Superclass.New()

class itkParabolicCloseImageFilterISS4ISS4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkParabolicCloseImageFilterISS4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD4

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD4"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_GetScale(self)

    def SetUseImageSpacing(self, B):
        r"""
        SetUseImageSpacing(self, B)

        Parameters
        ----------
        B: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_SetUseImageSpacing(self, B)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_UseImageSpacingOff(self)

    def SetSafeBorder(self, _arg):
        r"""
        SetSafeBorder(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_SetSafeBorder(self, _arg)

    def GetSafeBorder(self):
        r"""GetSafeBorder(self) -> bool const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_GetSafeBorder(self)

    def SafeBorderOn(self):
        r"""SafeBorderOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_SafeBorderOn(self)

    def SafeBorderOff(self):
        r"""SafeBorderOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_SafeBorderOff(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_GetParabolicAlgorithm(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterISS4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterISS4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterISS4ISS4_Superclass

        Create a new object of the class itkParabolicCloseImageFilterISS4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterISS4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterISS4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterISS4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterISS4ISS4_Superclass in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Superclass_swigregister(itkParabolicCloseImageFilterISS4ISS4_Superclass)

def itkParabolicCloseImageFilterIUC2IUC2_Superclass_New():
    return itkParabolicCloseImageFilterIUC2IUC2_Superclass.New()

class itkParabolicCloseImageFilterIUC2IUC2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkParabolicCloseImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD2

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD2"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_GetScale(self)

    def SetUseImageSpacing(self, B):
        r"""
        SetUseImageSpacing(self, B)

        Parameters
        ----------
        B: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_SetUseImageSpacing(self, B)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_UseImageSpacingOff(self)

    def SetSafeBorder(self, _arg):
        r"""
        SetSafeBorder(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_SetSafeBorder(self, _arg)

    def GetSafeBorder(self):
        r"""GetSafeBorder(self) -> bool const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_GetSafeBorder(self)

    def SafeBorderOn(self):
        r"""SafeBorderOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_SafeBorderOn(self)

    def SafeBorderOff(self):
        r"""SafeBorderOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_SafeBorderOff(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_GetParabolicAlgorithm(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIUC2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIUC2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkParabolicCloseImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIUC2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIUC2IUC2_Superclass in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Superclass_swigregister(itkParabolicCloseImageFilterIUC2IUC2_Superclass)

def itkParabolicCloseImageFilterIUC3IUC3_Superclass_New():
    return itkParabolicCloseImageFilterIUC3IUC3_Superclass.New()

class itkParabolicCloseImageFilterIUC3IUC3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkParabolicCloseImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD3

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD3"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_GetScale(self)

    def SetUseImageSpacing(self, B):
        r"""
        SetUseImageSpacing(self, B)

        Parameters
        ----------
        B: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_SetUseImageSpacing(self, B)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_UseImageSpacingOff(self)

    def SetSafeBorder(self, _arg):
        r"""
        SetSafeBorder(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_SetSafeBorder(self, _arg)

    def GetSafeBorder(self):
        r"""GetSafeBorder(self) -> bool const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_GetSafeBorder(self)

    def SafeBorderOn(self):
        r"""SafeBorderOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_SafeBorderOn(self)

    def SafeBorderOff(self):
        r"""SafeBorderOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_SafeBorderOff(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_GetParabolicAlgorithm(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIUC3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIUC3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkParabolicCloseImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIUC3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIUC3IUC3_Superclass in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Superclass_swigregister(itkParabolicCloseImageFilterIUC3IUC3_Superclass)

def itkParabolicCloseImageFilterIUC4IUC4_Superclass_New():
    return itkParabolicCloseImageFilterIUC4IUC4_Superclass.New()

class itkParabolicCloseImageFilterIUC4IUC4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkParabolicCloseImageFilterIUC4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD4

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD4"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_GetScale(self)

    def SetUseImageSpacing(self, B):
        r"""
        SetUseImageSpacing(self, B)

        Parameters
        ----------
        B: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_SetUseImageSpacing(self, B)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_UseImageSpacingOff(self)

    def SetSafeBorder(self, _arg):
        r"""
        SetSafeBorder(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_SetSafeBorder(self, _arg)

    def GetSafeBorder(self):
        r"""GetSafeBorder(self) -> bool const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_GetSafeBorder(self)

    def SafeBorderOn(self):
        r"""SafeBorderOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_SafeBorderOn(self)

    def SafeBorderOff(self):
        r"""SafeBorderOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_SafeBorderOff(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_GetParabolicAlgorithm(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIUC4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIUC4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIUC4IUC4_Superclass

        Create a new object of the class itkParabolicCloseImageFilterIUC4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIUC4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIUC4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIUC4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIUC4IUC4_Superclass in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Superclass_swigregister(itkParabolicCloseImageFilterIUC4IUC4_Superclass)

def itkParabolicCloseImageFilterIUS2IUS2_Superclass_New():
    return itkParabolicCloseImageFilterIUS2IUS2_Superclass.New()

class itkParabolicCloseImageFilterIUS2IUS2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkParabolicCloseImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD2

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD2"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_GetScale(self)

    def SetUseImageSpacing(self, B):
        r"""
        SetUseImageSpacing(self, B)

        Parameters
        ----------
        B: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_SetUseImageSpacing(self, B)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_UseImageSpacingOff(self)

    def SetSafeBorder(self, _arg):
        r"""
        SetSafeBorder(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_SetSafeBorder(self, _arg)

    def GetSafeBorder(self):
        r"""GetSafeBorder(self) -> bool const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_GetSafeBorder(self)

    def SafeBorderOn(self):
        r"""SafeBorderOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_SafeBorderOn(self)

    def SafeBorderOff(self):
        r"""SafeBorderOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_SafeBorderOff(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_GetParabolicAlgorithm(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIUS2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIUS2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkParabolicCloseImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIUS2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIUS2IUS2_Superclass in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Superclass_swigregister(itkParabolicCloseImageFilterIUS2IUS2_Superclass)

def itkParabolicCloseImageFilterIUS3IUS3_Superclass_New():
    return itkParabolicCloseImageFilterIUS3IUS3_Superclass.New()

class itkParabolicCloseImageFilterIUS3IUS3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkParabolicCloseImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD3

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD3"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_GetScale(self)

    def SetUseImageSpacing(self, B):
        r"""
        SetUseImageSpacing(self, B)

        Parameters
        ----------
        B: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_SetUseImageSpacing(self, B)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_UseImageSpacingOff(self)

    def SetSafeBorder(self, _arg):
        r"""
        SetSafeBorder(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_SetSafeBorder(self, _arg)

    def GetSafeBorder(self):
        r"""GetSafeBorder(self) -> bool const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_GetSafeBorder(self)

    def SafeBorderOn(self):
        r"""SafeBorderOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_SafeBorderOn(self)

    def SafeBorderOff(self):
        r"""SafeBorderOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_SafeBorderOff(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_GetParabolicAlgorithm(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIUS3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIUS3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkParabolicCloseImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIUS3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIUS3IUS3_Superclass in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Superclass_swigregister(itkParabolicCloseImageFilterIUS3IUS3_Superclass)

def itkParabolicCloseImageFilterIUS4IUS4_Superclass_New():
    return itkParabolicCloseImageFilterIUS4IUS4_Superclass.New()

class itkParabolicCloseImageFilterIUS4IUS4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkParabolicCloseImageFilterIUS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD4

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD4"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_GetScale(self)

    def SetUseImageSpacing(self, B):
        r"""
        SetUseImageSpacing(self, B)

        Parameters
        ----------
        B: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_SetUseImageSpacing(self, B)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_UseImageSpacingOff(self)

    def SetSafeBorder(self, _arg):
        r"""
        SetSafeBorder(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_SetSafeBorder(self, _arg)

    def GetSafeBorder(self):
        r"""GetSafeBorder(self) -> bool const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_GetSafeBorder(self)

    def SafeBorderOn(self):
        r"""SafeBorderOn(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_SafeBorderOn(self)

    def SafeBorderOff(self):
        r"""SafeBorderOff(self)"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_SafeBorderOff(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_GetParabolicAlgorithm(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIUS4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIUS4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIUS4IUS4_Superclass

        Create a new object of the class itkParabolicCloseImageFilterIUS4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIUS4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIUS4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIUS4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIUS4IUS4_Superclass in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Superclass_swigregister(itkParabolicCloseImageFilterIUS4IUS4_Superclass)

def itkParabolicCloseImageFilterID2ID2_New():
    return itkParabolicCloseImageFilterID2ID2.New()

class itkParabolicCloseImageFilterID2ID2(itkParabolicCloseImageFilterID2ID2_Superclass):
    r"""Proxy of C++ itkParabolicCloseImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterID2ID2_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterID2ID2_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_Clone(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterID2ID2

        Create a new object of the class itkParabolicCloseImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterID2ID2 in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID2ID2_swigregister(itkParabolicCloseImageFilterID2ID2)

def itkParabolicCloseImageFilterID3ID3_New():
    return itkParabolicCloseImageFilterID3ID3.New()

class itkParabolicCloseImageFilterID3ID3(itkParabolicCloseImageFilterID3ID3_Superclass):
    r"""Proxy of C++ itkParabolicCloseImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterID3ID3_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterID3ID3_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_Clone(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterID3ID3

        Create a new object of the class itkParabolicCloseImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterID3ID3 in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID3ID3_swigregister(itkParabolicCloseImageFilterID3ID3)

def itkParabolicCloseImageFilterID4ID4_New():
    return itkParabolicCloseImageFilterID4ID4.New()

class itkParabolicCloseImageFilterID4ID4(itkParabolicCloseImageFilterID4ID4_Superclass):
    r"""Proxy of C++ itkParabolicCloseImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterID4ID4_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterID4ID4_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_Clone(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterID4ID4

        Create a new object of the class itkParabolicCloseImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterID4ID4 in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterID4ID4_swigregister(itkParabolicCloseImageFilterID4ID4)

def itkParabolicCloseImageFilterIF2IF2_New():
    return itkParabolicCloseImageFilterIF2IF2.New()

class itkParabolicCloseImageFilterIF2IF2(itkParabolicCloseImageFilterIF2IF2_Superclass):
    r"""Proxy of C++ itkParabolicCloseImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIF2IF2_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIF2IF2_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_Clone(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIF2IF2

        Create a new object of the class itkParabolicCloseImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIF2IF2 in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF2IF2_swigregister(itkParabolicCloseImageFilterIF2IF2)

def itkParabolicCloseImageFilterIF3IF3_New():
    return itkParabolicCloseImageFilterIF3IF3.New()

class itkParabolicCloseImageFilterIF3IF3(itkParabolicCloseImageFilterIF3IF3_Superclass):
    r"""Proxy of C++ itkParabolicCloseImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIF3IF3_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIF3IF3_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_Clone(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIF3IF3

        Create a new object of the class itkParabolicCloseImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIF3IF3 in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF3IF3_swigregister(itkParabolicCloseImageFilterIF3IF3)

def itkParabolicCloseImageFilterIF4IF4_New():
    return itkParabolicCloseImageFilterIF4IF4.New()

class itkParabolicCloseImageFilterIF4IF4(itkParabolicCloseImageFilterIF4IF4_Superclass):
    r"""Proxy of C++ itkParabolicCloseImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIF4IF4_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIF4IF4_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_Clone(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIF4IF4

        Create a new object of the class itkParabolicCloseImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIF4IF4 in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIF4IF4_swigregister(itkParabolicCloseImageFilterIF4IF4)

def itkParabolicCloseImageFilterISS2ISS2_New():
    return itkParabolicCloseImageFilterISS2ISS2.New()

class itkParabolicCloseImageFilterISS2ISS2(itkParabolicCloseImageFilterISS2ISS2_Superclass):
    r"""Proxy of C++ itkParabolicCloseImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterISS2ISS2_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterISS2ISS2_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_Clone(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterISS2ISS2

        Create a new object of the class itkParabolicCloseImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterISS2ISS2 in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS2ISS2_swigregister(itkParabolicCloseImageFilterISS2ISS2)

def itkParabolicCloseImageFilterISS3ISS3_New():
    return itkParabolicCloseImageFilterISS3ISS3.New()

class itkParabolicCloseImageFilterISS3ISS3(itkParabolicCloseImageFilterISS3ISS3_Superclass):
    r"""Proxy of C++ itkParabolicCloseImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterISS3ISS3_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterISS3ISS3_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_Clone(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterISS3ISS3

        Create a new object of the class itkParabolicCloseImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterISS3ISS3 in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS3ISS3_swigregister(itkParabolicCloseImageFilterISS3ISS3)

def itkParabolicCloseImageFilterISS4ISS4_New():
    return itkParabolicCloseImageFilterISS4ISS4.New()

class itkParabolicCloseImageFilterISS4ISS4(itkParabolicCloseImageFilterISS4ISS4_Superclass):
    r"""Proxy of C++ itkParabolicCloseImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterISS4ISS4_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterISS4ISS4_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_Clone(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterISS4ISS4

        Create a new object of the class itkParabolicCloseImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterISS4ISS4 in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterISS4ISS4_swigregister(itkParabolicCloseImageFilterISS4ISS4)

def itkParabolicCloseImageFilterIUC2IUC2_New():
    return itkParabolicCloseImageFilterIUC2IUC2.New()

class itkParabolicCloseImageFilterIUC2IUC2(itkParabolicCloseImageFilterIUC2IUC2_Superclass):
    r"""Proxy of C++ itkParabolicCloseImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIUC2IUC2_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIUC2IUC2_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_Clone(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIUC2IUC2

        Create a new object of the class itkParabolicCloseImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIUC2IUC2 in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC2IUC2_swigregister(itkParabolicCloseImageFilterIUC2IUC2)

def itkParabolicCloseImageFilterIUC3IUC3_New():
    return itkParabolicCloseImageFilterIUC3IUC3.New()

class itkParabolicCloseImageFilterIUC3IUC3(itkParabolicCloseImageFilterIUC3IUC3_Superclass):
    r"""Proxy of C++ itkParabolicCloseImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIUC3IUC3_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIUC3IUC3_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_Clone(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIUC3IUC3

        Create a new object of the class itkParabolicCloseImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIUC3IUC3 in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC3IUC3_swigregister(itkParabolicCloseImageFilterIUC3IUC3)

def itkParabolicCloseImageFilterIUC4IUC4_New():
    return itkParabolicCloseImageFilterIUC4IUC4.New()

class itkParabolicCloseImageFilterIUC4IUC4(itkParabolicCloseImageFilterIUC4IUC4_Superclass):
    r"""Proxy of C++ itkParabolicCloseImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIUC4IUC4_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIUC4IUC4_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_Clone(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIUC4IUC4

        Create a new object of the class itkParabolicCloseImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIUC4IUC4 in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUC4IUC4_swigregister(itkParabolicCloseImageFilterIUC4IUC4)

def itkParabolicCloseImageFilterIUS2IUS2_New():
    return itkParabolicCloseImageFilterIUS2IUS2.New()

class itkParabolicCloseImageFilterIUS2IUS2(itkParabolicCloseImageFilterIUS2IUS2_Superclass):
    r"""Proxy of C++ itkParabolicCloseImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIUS2IUS2_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIUS2IUS2_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_Clone(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIUS2IUS2

        Create a new object of the class itkParabolicCloseImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIUS2IUS2 in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS2IUS2_swigregister(itkParabolicCloseImageFilterIUS2IUS2)

def itkParabolicCloseImageFilterIUS3IUS3_New():
    return itkParabolicCloseImageFilterIUS3IUS3.New()

class itkParabolicCloseImageFilterIUS3IUS3(itkParabolicCloseImageFilterIUS3IUS3_Superclass):
    r"""Proxy of C++ itkParabolicCloseImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIUS3IUS3_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIUS3IUS3_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_Clone(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIUS3IUS3

        Create a new object of the class itkParabolicCloseImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIUS3IUS3 in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS3IUS3_swigregister(itkParabolicCloseImageFilterIUS3IUS3)

def itkParabolicCloseImageFilterIUS4IUS4_New():
    return itkParabolicCloseImageFilterIUS4IUS4.New()

class itkParabolicCloseImageFilterIUS4IUS4(itkParabolicCloseImageFilterIUS4IUS4_Superclass):
    r"""Proxy of C++ itkParabolicCloseImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicCloseImageFilterIUS4IUS4_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicCloseImageFilterIUS4IUS4_Pointer"""
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_Clone(self)
    __swig_destroy__ = _itkParabolicCloseImageFilterPython.delete_itkParabolicCloseImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicCloseImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicCloseImageFilterIUS4IUS4

        Create a new object of the class itkParabolicCloseImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicCloseImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicCloseImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicCloseImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicCloseImageFilterIUS4IUS4 in _itkParabolicCloseImageFilterPython:
_itkParabolicCloseImageFilterPython.itkParabolicCloseImageFilterIUS4IUS4_swigregister(itkParabolicCloseImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def parabolic_close_image_filter(*args: itkt.ImageLike,  scale: Union[float, Sequence[float]]=..., use_image_spacing: bool=..., safe_border: bool=..., parabolic_algorithm: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ParabolicCloseImageFilter"""
    import itk

    kwarg_typehints = { 'scale':scale,'use_image_spacing':use_image_spacing,'safe_border':safe_border,'parabolic_algorithm':parabolic_algorithm }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ParabolicCloseImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def parabolic_close_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ParabolicMorphology.ParabolicCloseImageFilter
    parabolic_close_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    parabolic_close_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def parabolic_open_close_safe_border_image_filter(*args: itkt.ImageLike,  scale: Union[float, Sequence[float]]=..., use_image_spacing: bool=..., safe_border: bool=..., parabolic_algorithm: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ParabolicOpenCloseSafeBorderImageFilter"""
    import itk

    kwarg_typehints = { 'scale':scale,'use_image_spacing':use_image_spacing,'safe_border':safe_border,'parabolic_algorithm':parabolic_algorithm }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ParabolicOpenCloseSafeBorderImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def parabolic_open_close_safe_border_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ParabolicMorphology.ParabolicOpenCloseSafeBorderImageFilter
    parabolic_open_close_safe_border_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    parabolic_open_close_safe_border_image_filter.__doc__ = filter_object.__doc__



