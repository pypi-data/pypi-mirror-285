# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ParabolicMorphologyPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMorphologicalSharpeningImageFilterPython
else:
    import _itkMorphologicalSharpeningImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterAPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkMorphologicalSharpeningImageFilterID2ID2_New():
    return itkMorphologicalSharpeningImageFilterID2ID2.New()

class itkMorphologicalSharpeningImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkMorphologicalSharpeningImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalSharpeningImageFilterID2ID2_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalSharpeningImageFilterID2ID2_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID2ID2_Clone(self)

    def SetIterations(self, _arg):
        r"""
        SetIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID2ID2_SetIterations(self, _arg)

    def GetIterations(self):
        r"""GetIterations(self) -> int const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID2ID2_GetIterations(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD2

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID2ID2_SetScale(self, *args)

    def SetUseImageSpacing(self, uis):
        r"""
        SetUseImageSpacing(self, uis)

        Parameters
        ----------
        uis: bool

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID2ID2_SetUseImageSpacing(self, uis)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD2"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID2ID2_GetScale(self)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID2ID2_GetUseImageSpacing(self)
    SameDimension = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID2ID2_SameDimension
    
    Comparable = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID2ID2_Comparable
    
    __swig_destroy__ = _itkMorphologicalSharpeningImageFilterPython.delete_itkMorphologicalSharpeningImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalSharpeningImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalSharpeningImageFilterID2ID2

        Create a new object of the class itkMorphologicalSharpeningImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalSharpeningImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalSharpeningImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalSharpeningImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalSharpeningImageFilterID2ID2 in _itkMorphologicalSharpeningImageFilterPython:
_itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID2ID2_swigregister(itkMorphologicalSharpeningImageFilterID2ID2)

def itkMorphologicalSharpeningImageFilterID3ID3_New():
    return itkMorphologicalSharpeningImageFilterID3ID3.New()

class itkMorphologicalSharpeningImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkMorphologicalSharpeningImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalSharpeningImageFilterID3ID3_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalSharpeningImageFilterID3ID3_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID3ID3_Clone(self)

    def SetIterations(self, _arg):
        r"""
        SetIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID3ID3_SetIterations(self, _arg)

    def GetIterations(self):
        r"""GetIterations(self) -> int const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID3ID3_GetIterations(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD3

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID3ID3_SetScale(self, *args)

    def SetUseImageSpacing(self, uis):
        r"""
        SetUseImageSpacing(self, uis)

        Parameters
        ----------
        uis: bool

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID3ID3_SetUseImageSpacing(self, uis)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD3"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID3ID3_GetScale(self)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID3ID3_GetUseImageSpacing(self)
    SameDimension = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID3ID3_SameDimension
    
    Comparable = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID3ID3_Comparable
    
    __swig_destroy__ = _itkMorphologicalSharpeningImageFilterPython.delete_itkMorphologicalSharpeningImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalSharpeningImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalSharpeningImageFilterID3ID3

        Create a new object of the class itkMorphologicalSharpeningImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalSharpeningImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalSharpeningImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalSharpeningImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalSharpeningImageFilterID3ID3 in _itkMorphologicalSharpeningImageFilterPython:
_itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID3ID3_swigregister(itkMorphologicalSharpeningImageFilterID3ID3)

def itkMorphologicalSharpeningImageFilterID4ID4_New():
    return itkMorphologicalSharpeningImageFilterID4ID4.New()

class itkMorphologicalSharpeningImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkMorphologicalSharpeningImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalSharpeningImageFilterID4ID4_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalSharpeningImageFilterID4ID4_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID4ID4_Clone(self)

    def SetIterations(self, _arg):
        r"""
        SetIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID4ID4_SetIterations(self, _arg)

    def GetIterations(self):
        r"""GetIterations(self) -> int const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID4ID4_GetIterations(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD4

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID4ID4_SetScale(self, *args)

    def SetUseImageSpacing(self, uis):
        r"""
        SetUseImageSpacing(self, uis)

        Parameters
        ----------
        uis: bool

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID4ID4_SetUseImageSpacing(self, uis)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD4"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID4ID4_GetScale(self)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID4ID4_GetUseImageSpacing(self)
    SameDimension = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID4ID4_SameDimension
    
    Comparable = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID4ID4_Comparable
    
    __swig_destroy__ = _itkMorphologicalSharpeningImageFilterPython.delete_itkMorphologicalSharpeningImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalSharpeningImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalSharpeningImageFilterID4ID4

        Create a new object of the class itkMorphologicalSharpeningImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalSharpeningImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalSharpeningImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalSharpeningImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalSharpeningImageFilterID4ID4 in _itkMorphologicalSharpeningImageFilterPython:
_itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterID4ID4_swigregister(itkMorphologicalSharpeningImageFilterID4ID4)

def itkMorphologicalSharpeningImageFilterIF2IF2_New():
    return itkMorphologicalSharpeningImageFilterIF2IF2.New()

class itkMorphologicalSharpeningImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkMorphologicalSharpeningImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalSharpeningImageFilterIF2IF2_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalSharpeningImageFilterIF2IF2_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF2IF2_Clone(self)

    def SetIterations(self, _arg):
        r"""
        SetIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF2IF2_SetIterations(self, _arg)

    def GetIterations(self):
        r"""GetIterations(self) -> int const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF2IF2_GetIterations(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD2

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF2IF2_SetScale(self, *args)

    def SetUseImageSpacing(self, uis):
        r"""
        SetUseImageSpacing(self, uis)

        Parameters
        ----------
        uis: bool

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF2IF2_SetUseImageSpacing(self, uis)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD2"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF2IF2_GetScale(self)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF2IF2_GetUseImageSpacing(self)
    SameDimension = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF2IF2_SameDimension
    
    Comparable = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF2IF2_Comparable
    
    __swig_destroy__ = _itkMorphologicalSharpeningImageFilterPython.delete_itkMorphologicalSharpeningImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalSharpeningImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalSharpeningImageFilterIF2IF2

        Create a new object of the class itkMorphologicalSharpeningImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalSharpeningImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalSharpeningImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalSharpeningImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalSharpeningImageFilterIF2IF2 in _itkMorphologicalSharpeningImageFilterPython:
_itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF2IF2_swigregister(itkMorphologicalSharpeningImageFilterIF2IF2)

def itkMorphologicalSharpeningImageFilterIF3IF3_New():
    return itkMorphologicalSharpeningImageFilterIF3IF3.New()

class itkMorphologicalSharpeningImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkMorphologicalSharpeningImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalSharpeningImageFilterIF3IF3_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalSharpeningImageFilterIF3IF3_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF3IF3_Clone(self)

    def SetIterations(self, _arg):
        r"""
        SetIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF3IF3_SetIterations(self, _arg)

    def GetIterations(self):
        r"""GetIterations(self) -> int const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF3IF3_GetIterations(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD3

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF3IF3_SetScale(self, *args)

    def SetUseImageSpacing(self, uis):
        r"""
        SetUseImageSpacing(self, uis)

        Parameters
        ----------
        uis: bool

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF3IF3_SetUseImageSpacing(self, uis)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD3"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF3IF3_GetScale(self)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF3IF3_GetUseImageSpacing(self)
    SameDimension = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF3IF3_SameDimension
    
    Comparable = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF3IF3_Comparable
    
    __swig_destroy__ = _itkMorphologicalSharpeningImageFilterPython.delete_itkMorphologicalSharpeningImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalSharpeningImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalSharpeningImageFilterIF3IF3

        Create a new object of the class itkMorphologicalSharpeningImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalSharpeningImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalSharpeningImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalSharpeningImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalSharpeningImageFilterIF3IF3 in _itkMorphologicalSharpeningImageFilterPython:
_itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF3IF3_swigregister(itkMorphologicalSharpeningImageFilterIF3IF3)

def itkMorphologicalSharpeningImageFilterIF4IF4_New():
    return itkMorphologicalSharpeningImageFilterIF4IF4.New()

class itkMorphologicalSharpeningImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkMorphologicalSharpeningImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalSharpeningImageFilterIF4IF4_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalSharpeningImageFilterIF4IF4_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF4IF4_Clone(self)

    def SetIterations(self, _arg):
        r"""
        SetIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF4IF4_SetIterations(self, _arg)

    def GetIterations(self):
        r"""GetIterations(self) -> int const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF4IF4_GetIterations(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD4

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF4IF4_SetScale(self, *args)

    def SetUseImageSpacing(self, uis):
        r"""
        SetUseImageSpacing(self, uis)

        Parameters
        ----------
        uis: bool

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF4IF4_SetUseImageSpacing(self, uis)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD4"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF4IF4_GetScale(self)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF4IF4_GetUseImageSpacing(self)
    SameDimension = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF4IF4_SameDimension
    
    Comparable = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF4IF4_Comparable
    
    __swig_destroy__ = _itkMorphologicalSharpeningImageFilterPython.delete_itkMorphologicalSharpeningImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalSharpeningImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalSharpeningImageFilterIF4IF4

        Create a new object of the class itkMorphologicalSharpeningImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalSharpeningImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalSharpeningImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalSharpeningImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalSharpeningImageFilterIF4IF4 in _itkMorphologicalSharpeningImageFilterPython:
_itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIF4IF4_swigregister(itkMorphologicalSharpeningImageFilterIF4IF4)

def itkMorphologicalSharpeningImageFilterISS2ISS2_New():
    return itkMorphologicalSharpeningImageFilterISS2ISS2.New()

class itkMorphologicalSharpeningImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkMorphologicalSharpeningImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalSharpeningImageFilterISS2ISS2_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalSharpeningImageFilterISS2ISS2_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS2ISS2_Clone(self)

    def SetIterations(self, _arg):
        r"""
        SetIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS2ISS2_SetIterations(self, _arg)

    def GetIterations(self):
        r"""GetIterations(self) -> int const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS2ISS2_GetIterations(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD2

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS2ISS2_SetScale(self, *args)

    def SetUseImageSpacing(self, uis):
        r"""
        SetUseImageSpacing(self, uis)

        Parameters
        ----------
        uis: bool

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS2ISS2_SetUseImageSpacing(self, uis)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD2"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS2ISS2_GetScale(self)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS2ISS2_GetUseImageSpacing(self)
    SameDimension = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS2ISS2_SameDimension
    
    Comparable = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS2ISS2_Comparable
    
    __swig_destroy__ = _itkMorphologicalSharpeningImageFilterPython.delete_itkMorphologicalSharpeningImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalSharpeningImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalSharpeningImageFilterISS2ISS2

        Create a new object of the class itkMorphologicalSharpeningImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalSharpeningImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalSharpeningImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalSharpeningImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalSharpeningImageFilterISS2ISS2 in _itkMorphologicalSharpeningImageFilterPython:
_itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS2ISS2_swigregister(itkMorphologicalSharpeningImageFilterISS2ISS2)

def itkMorphologicalSharpeningImageFilterISS3ISS3_New():
    return itkMorphologicalSharpeningImageFilterISS3ISS3.New()

class itkMorphologicalSharpeningImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkMorphologicalSharpeningImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalSharpeningImageFilterISS3ISS3_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalSharpeningImageFilterISS3ISS3_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS3ISS3_Clone(self)

    def SetIterations(self, _arg):
        r"""
        SetIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS3ISS3_SetIterations(self, _arg)

    def GetIterations(self):
        r"""GetIterations(self) -> int const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS3ISS3_GetIterations(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD3

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS3ISS3_SetScale(self, *args)

    def SetUseImageSpacing(self, uis):
        r"""
        SetUseImageSpacing(self, uis)

        Parameters
        ----------
        uis: bool

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS3ISS3_SetUseImageSpacing(self, uis)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD3"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS3ISS3_GetScale(self)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS3ISS3_GetUseImageSpacing(self)
    SameDimension = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS3ISS3_SameDimension
    
    Comparable = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS3ISS3_Comparable
    
    __swig_destroy__ = _itkMorphologicalSharpeningImageFilterPython.delete_itkMorphologicalSharpeningImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalSharpeningImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalSharpeningImageFilterISS3ISS3

        Create a new object of the class itkMorphologicalSharpeningImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalSharpeningImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalSharpeningImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalSharpeningImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalSharpeningImageFilterISS3ISS3 in _itkMorphologicalSharpeningImageFilterPython:
_itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS3ISS3_swigregister(itkMorphologicalSharpeningImageFilterISS3ISS3)

def itkMorphologicalSharpeningImageFilterISS4ISS4_New():
    return itkMorphologicalSharpeningImageFilterISS4ISS4.New()

class itkMorphologicalSharpeningImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkMorphologicalSharpeningImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalSharpeningImageFilterISS4ISS4_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalSharpeningImageFilterISS4ISS4_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS4ISS4_Clone(self)

    def SetIterations(self, _arg):
        r"""
        SetIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS4ISS4_SetIterations(self, _arg)

    def GetIterations(self):
        r"""GetIterations(self) -> int const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS4ISS4_GetIterations(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD4

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS4ISS4_SetScale(self, *args)

    def SetUseImageSpacing(self, uis):
        r"""
        SetUseImageSpacing(self, uis)

        Parameters
        ----------
        uis: bool

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS4ISS4_SetUseImageSpacing(self, uis)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD4"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS4ISS4_GetScale(self)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS4ISS4_GetUseImageSpacing(self)
    SameDimension = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS4ISS4_SameDimension
    
    Comparable = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS4ISS4_Comparable
    
    __swig_destroy__ = _itkMorphologicalSharpeningImageFilterPython.delete_itkMorphologicalSharpeningImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalSharpeningImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalSharpeningImageFilterISS4ISS4

        Create a new object of the class itkMorphologicalSharpeningImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalSharpeningImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalSharpeningImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalSharpeningImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalSharpeningImageFilterISS4ISS4 in _itkMorphologicalSharpeningImageFilterPython:
_itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterISS4ISS4_swigregister(itkMorphologicalSharpeningImageFilterISS4ISS4)

def itkMorphologicalSharpeningImageFilterIUC2IUC2_New():
    return itkMorphologicalSharpeningImageFilterIUC2IUC2.New()

class itkMorphologicalSharpeningImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkMorphologicalSharpeningImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalSharpeningImageFilterIUC2IUC2_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalSharpeningImageFilterIUC2IUC2_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC2IUC2_Clone(self)

    def SetIterations(self, _arg):
        r"""
        SetIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC2IUC2_SetIterations(self, _arg)

    def GetIterations(self):
        r"""GetIterations(self) -> int const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC2IUC2_GetIterations(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD2

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC2IUC2_SetScale(self, *args)

    def SetUseImageSpacing(self, uis):
        r"""
        SetUseImageSpacing(self, uis)

        Parameters
        ----------
        uis: bool

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC2IUC2_SetUseImageSpacing(self, uis)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD2"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC2IUC2_GetScale(self)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC2IUC2_GetUseImageSpacing(self)
    SameDimension = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC2IUC2_SameDimension
    
    Comparable = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC2IUC2_Comparable
    
    __swig_destroy__ = _itkMorphologicalSharpeningImageFilterPython.delete_itkMorphologicalSharpeningImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalSharpeningImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalSharpeningImageFilterIUC2IUC2

        Create a new object of the class itkMorphologicalSharpeningImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalSharpeningImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalSharpeningImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalSharpeningImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalSharpeningImageFilterIUC2IUC2 in _itkMorphologicalSharpeningImageFilterPython:
_itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC2IUC2_swigregister(itkMorphologicalSharpeningImageFilterIUC2IUC2)

def itkMorphologicalSharpeningImageFilterIUC3IUC3_New():
    return itkMorphologicalSharpeningImageFilterIUC3IUC3.New()

class itkMorphologicalSharpeningImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkMorphologicalSharpeningImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalSharpeningImageFilterIUC3IUC3_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalSharpeningImageFilterIUC3IUC3_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC3IUC3_Clone(self)

    def SetIterations(self, _arg):
        r"""
        SetIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC3IUC3_SetIterations(self, _arg)

    def GetIterations(self):
        r"""GetIterations(self) -> int const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC3IUC3_GetIterations(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD3

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC3IUC3_SetScale(self, *args)

    def SetUseImageSpacing(self, uis):
        r"""
        SetUseImageSpacing(self, uis)

        Parameters
        ----------
        uis: bool

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC3IUC3_SetUseImageSpacing(self, uis)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD3"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC3IUC3_GetScale(self)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC3IUC3_GetUseImageSpacing(self)
    SameDimension = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC3IUC3_SameDimension
    
    Comparable = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC3IUC3_Comparable
    
    __swig_destroy__ = _itkMorphologicalSharpeningImageFilterPython.delete_itkMorphologicalSharpeningImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalSharpeningImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalSharpeningImageFilterIUC3IUC3

        Create a new object of the class itkMorphologicalSharpeningImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalSharpeningImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalSharpeningImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalSharpeningImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalSharpeningImageFilterIUC3IUC3 in _itkMorphologicalSharpeningImageFilterPython:
_itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC3IUC3_swigregister(itkMorphologicalSharpeningImageFilterIUC3IUC3)

def itkMorphologicalSharpeningImageFilterIUC4IUC4_New():
    return itkMorphologicalSharpeningImageFilterIUC4IUC4.New()

class itkMorphologicalSharpeningImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkMorphologicalSharpeningImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalSharpeningImageFilterIUC4IUC4_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalSharpeningImageFilterIUC4IUC4_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC4IUC4_Clone(self)

    def SetIterations(self, _arg):
        r"""
        SetIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC4IUC4_SetIterations(self, _arg)

    def GetIterations(self):
        r"""GetIterations(self) -> int const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC4IUC4_GetIterations(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD4

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC4IUC4_SetScale(self, *args)

    def SetUseImageSpacing(self, uis):
        r"""
        SetUseImageSpacing(self, uis)

        Parameters
        ----------
        uis: bool

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC4IUC4_SetUseImageSpacing(self, uis)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD4"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC4IUC4_GetScale(self)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC4IUC4_GetUseImageSpacing(self)
    SameDimension = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC4IUC4_SameDimension
    
    Comparable = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC4IUC4_Comparable
    
    __swig_destroy__ = _itkMorphologicalSharpeningImageFilterPython.delete_itkMorphologicalSharpeningImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalSharpeningImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalSharpeningImageFilterIUC4IUC4

        Create a new object of the class itkMorphologicalSharpeningImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalSharpeningImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalSharpeningImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalSharpeningImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalSharpeningImageFilterIUC4IUC4 in _itkMorphologicalSharpeningImageFilterPython:
_itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUC4IUC4_swigregister(itkMorphologicalSharpeningImageFilterIUC4IUC4)

def itkMorphologicalSharpeningImageFilterIUS2IUS2_New():
    return itkMorphologicalSharpeningImageFilterIUS2IUS2.New()

class itkMorphologicalSharpeningImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkMorphologicalSharpeningImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalSharpeningImageFilterIUS2IUS2_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalSharpeningImageFilterIUS2IUS2_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS2IUS2_Clone(self)

    def SetIterations(self, _arg):
        r"""
        SetIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS2IUS2_SetIterations(self, _arg)

    def GetIterations(self):
        r"""GetIterations(self) -> int const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS2IUS2_GetIterations(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD2

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS2IUS2_SetScale(self, *args)

    def SetUseImageSpacing(self, uis):
        r"""
        SetUseImageSpacing(self, uis)

        Parameters
        ----------
        uis: bool

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS2IUS2_SetUseImageSpacing(self, uis)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD2"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS2IUS2_GetScale(self)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS2IUS2_GetUseImageSpacing(self)
    SameDimension = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS2IUS2_SameDimension
    
    Comparable = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS2IUS2_Comparable
    
    __swig_destroy__ = _itkMorphologicalSharpeningImageFilterPython.delete_itkMorphologicalSharpeningImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalSharpeningImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalSharpeningImageFilterIUS2IUS2

        Create a new object of the class itkMorphologicalSharpeningImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalSharpeningImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalSharpeningImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalSharpeningImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalSharpeningImageFilterIUS2IUS2 in _itkMorphologicalSharpeningImageFilterPython:
_itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS2IUS2_swigregister(itkMorphologicalSharpeningImageFilterIUS2IUS2)

def itkMorphologicalSharpeningImageFilterIUS3IUS3_New():
    return itkMorphologicalSharpeningImageFilterIUS3IUS3.New()

class itkMorphologicalSharpeningImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkMorphologicalSharpeningImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalSharpeningImageFilterIUS3IUS3_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalSharpeningImageFilterIUS3IUS3_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS3IUS3_Clone(self)

    def SetIterations(self, _arg):
        r"""
        SetIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS3IUS3_SetIterations(self, _arg)

    def GetIterations(self):
        r"""GetIterations(self) -> int const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS3IUS3_GetIterations(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD3

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS3IUS3_SetScale(self, *args)

    def SetUseImageSpacing(self, uis):
        r"""
        SetUseImageSpacing(self, uis)

        Parameters
        ----------
        uis: bool

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS3IUS3_SetUseImageSpacing(self, uis)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD3"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS3IUS3_GetScale(self)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS3IUS3_GetUseImageSpacing(self)
    SameDimension = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS3IUS3_SameDimension
    
    Comparable = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS3IUS3_Comparable
    
    __swig_destroy__ = _itkMorphologicalSharpeningImageFilterPython.delete_itkMorphologicalSharpeningImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalSharpeningImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalSharpeningImageFilterIUS3IUS3

        Create a new object of the class itkMorphologicalSharpeningImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalSharpeningImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalSharpeningImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalSharpeningImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalSharpeningImageFilterIUS3IUS3 in _itkMorphologicalSharpeningImageFilterPython:
_itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS3IUS3_swigregister(itkMorphologicalSharpeningImageFilterIUS3IUS3)

def itkMorphologicalSharpeningImageFilterIUS4IUS4_New():
    return itkMorphologicalSharpeningImageFilterIUS4IUS4.New()

class itkMorphologicalSharpeningImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkMorphologicalSharpeningImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkMorphologicalSharpeningImageFilterIUS4IUS4_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkMorphologicalSharpeningImageFilterIUS4IUS4_Pointer"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS4IUS4_Clone(self)

    def SetIterations(self, _arg):
        r"""
        SetIterations(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS4IUS4_SetIterations(self, _arg)

    def GetIterations(self):
        r"""GetIterations(self) -> int const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS4IUS4_GetIterations(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, scale)

        Parameters
        ----------
        scale: itkFixedArrayD4

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS4IUS4_SetScale(self, *args)

    def SetUseImageSpacing(self, uis):
        r"""
        SetUseImageSpacing(self, uis)

        Parameters
        ----------
        uis: bool

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS4IUS4_SetUseImageSpacing(self, uis)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD4"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS4IUS4_GetScale(self)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS4IUS4_GetUseImageSpacing(self)
    SameDimension = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS4IUS4_SameDimension
    
    Comparable = _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS4IUS4_Comparable
    
    __swig_destroy__ = _itkMorphologicalSharpeningImageFilterPython.delete_itkMorphologicalSharpeningImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkMorphologicalSharpeningImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkMorphologicalSharpeningImageFilterIUS4IUS4

        Create a new object of the class itkMorphologicalSharpeningImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalSharpeningImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalSharpeningImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalSharpeningImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalSharpeningImageFilterIUS4IUS4 in _itkMorphologicalSharpeningImageFilterPython:
_itkMorphologicalSharpeningImageFilterPython.itkMorphologicalSharpeningImageFilterIUS4IUS4_swigregister(itkMorphologicalSharpeningImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def morphological_sharpening_image_filter(*args: itkt.ImageLike,  iterations: int=..., scale: Union[Sequence[float], float]=..., use_image_spacing: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for MorphologicalSharpeningImageFilter"""
    import itk

    kwarg_typehints = { 'iterations':iterations,'scale':scale,'use_image_spacing':use_image_spacing }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.MorphologicalSharpeningImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def morphological_sharpening_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ParabolicMorphology.MorphologicalSharpeningImageFilter
    morphological_sharpening_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    morphological_sharpening_image_filter.__doc__ = filter_object.__doc__



