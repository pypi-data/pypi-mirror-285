# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ParabolicMorphologyPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkParabolicDilateImageFilterPython
else:
    import _itkParabolicDilateImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterCommonPython

def itkParabolicDilateImageFilterID2ID2_Superclass_New():
    return itkParabolicDilateImageFilterID2ID2_Superclass.New()

class itkParabolicDilateImageFilterID2ID2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkParabolicDilateImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterID2ID2_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterID2ID2_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD2"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass_GetScale(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass_GetParabolicAlgorithm(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass_UseImageSpacingOff(self)
    SameDimension = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass_SameDimension
    
    Comparable = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass_Comparable
    
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterID2ID2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterID2ID2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterID2ID2_Superclass

        Create a new object of the class itkParabolicDilateImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterID2ID2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterID2ID2_Superclass in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Superclass_swigregister(itkParabolicDilateImageFilterID2ID2_Superclass)

def itkParabolicDilateImageFilterID3ID3_Superclass_New():
    return itkParabolicDilateImageFilterID3ID3_Superclass.New()

class itkParabolicDilateImageFilterID3ID3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkParabolicDilateImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterID3ID3_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterID3ID3_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD3"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass_GetScale(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass_GetParabolicAlgorithm(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass_UseImageSpacingOff(self)
    SameDimension = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass_SameDimension
    
    Comparable = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass_Comparable
    
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterID3ID3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterID3ID3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterID3ID3_Superclass

        Create a new object of the class itkParabolicDilateImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterID3ID3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterID3ID3_Superclass in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Superclass_swigregister(itkParabolicDilateImageFilterID3ID3_Superclass)

def itkParabolicDilateImageFilterID4ID4_Superclass_New():
    return itkParabolicDilateImageFilterID4ID4_Superclass.New()

class itkParabolicDilateImageFilterID4ID4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkParabolicDilateImageFilterID4ID4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterID4ID4_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterID4ID4_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD4"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass_GetScale(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass_GetParabolicAlgorithm(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass_UseImageSpacingOff(self)
    SameDimension = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass_SameDimension
    
    Comparable = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass_Comparable
    
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterID4ID4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterID4ID4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterID4ID4_Superclass

        Create a new object of the class itkParabolicDilateImageFilterID4ID4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterID4ID4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterID4ID4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterID4ID4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterID4ID4_Superclass in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Superclass_swigregister(itkParabolicDilateImageFilterID4ID4_Superclass)

def itkParabolicDilateImageFilterIF2IF2_Superclass_New():
    return itkParabolicDilateImageFilterIF2IF2_Superclass.New()

class itkParabolicDilateImageFilterIF2IF2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkParabolicDilateImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIF2IF2_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIF2IF2_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD2"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass_GetScale(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass_GetParabolicAlgorithm(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass_UseImageSpacingOff(self)
    SameDimension = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass_SameDimension
    
    Comparable = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass_Comparable
    
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIF2IF2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIF2IF2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIF2IF2_Superclass

        Create a new object of the class itkParabolicDilateImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIF2IF2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIF2IF2_Superclass in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Superclass_swigregister(itkParabolicDilateImageFilterIF2IF2_Superclass)

def itkParabolicDilateImageFilterIF3IF3_Superclass_New():
    return itkParabolicDilateImageFilterIF3IF3_Superclass.New()

class itkParabolicDilateImageFilterIF3IF3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkParabolicDilateImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIF3IF3_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIF3IF3_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD3"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass_GetScale(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass_GetParabolicAlgorithm(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass_UseImageSpacingOff(self)
    SameDimension = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass_SameDimension
    
    Comparable = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass_Comparable
    
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIF3IF3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIF3IF3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIF3IF3_Superclass

        Create a new object of the class itkParabolicDilateImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIF3IF3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIF3IF3_Superclass in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Superclass_swigregister(itkParabolicDilateImageFilterIF3IF3_Superclass)

def itkParabolicDilateImageFilterIF4IF4_Superclass_New():
    return itkParabolicDilateImageFilterIF4IF4_Superclass.New()

class itkParabolicDilateImageFilterIF4IF4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkParabolicDilateImageFilterIF4IF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIF4IF4_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIF4IF4_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD4"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass_GetScale(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass_GetParabolicAlgorithm(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass_UseImageSpacingOff(self)
    SameDimension = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass_SameDimension
    
    Comparable = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass_Comparable
    
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIF4IF4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIF4IF4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIF4IF4_Superclass

        Create a new object of the class itkParabolicDilateImageFilterIF4IF4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIF4IF4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIF4IF4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIF4IF4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIF4IF4_Superclass in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Superclass_swigregister(itkParabolicDilateImageFilterIF4IF4_Superclass)

def itkParabolicDilateImageFilterISS2ISS2_Superclass_New():
    return itkParabolicDilateImageFilterISS2ISS2_Superclass.New()

class itkParabolicDilateImageFilterISS2ISS2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkParabolicDilateImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterISS2ISS2_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD2"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass_GetScale(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass_GetParabolicAlgorithm(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass_UseImageSpacingOff(self)
    SameDimension = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass_SameDimension
    
    Comparable = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass_Comparable
    
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterISS2ISS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterISS2ISS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterISS2ISS2_Superclass

        Create a new object of the class itkParabolicDilateImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterISS2ISS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterISS2ISS2_Superclass in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Superclass_swigregister(itkParabolicDilateImageFilterISS2ISS2_Superclass)

def itkParabolicDilateImageFilterISS3ISS3_Superclass_New():
    return itkParabolicDilateImageFilterISS3ISS3_Superclass.New()

class itkParabolicDilateImageFilterISS3ISS3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkParabolicDilateImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterISS3ISS3_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD3"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass_GetScale(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass_GetParabolicAlgorithm(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass_UseImageSpacingOff(self)
    SameDimension = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass_SameDimension
    
    Comparable = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass_Comparable
    
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterISS3ISS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterISS3ISS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterISS3ISS3_Superclass

        Create a new object of the class itkParabolicDilateImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterISS3ISS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterISS3ISS3_Superclass in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Superclass_swigregister(itkParabolicDilateImageFilterISS3ISS3_Superclass)

def itkParabolicDilateImageFilterISS4ISS4_Superclass_New():
    return itkParabolicDilateImageFilterISS4ISS4_Superclass.New()

class itkParabolicDilateImageFilterISS4ISS4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""Proxy of C++ itkParabolicDilateImageFilterISS4ISS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterISS4ISS4_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD4"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass_GetScale(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass_GetParabolicAlgorithm(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass_UseImageSpacingOff(self)
    SameDimension = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass_SameDimension
    
    Comparable = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass_Comparable
    
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterISS4ISS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterISS4ISS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterISS4ISS4_Superclass

        Create a new object of the class itkParabolicDilateImageFilterISS4ISS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterISS4ISS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterISS4ISS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterISS4ISS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterISS4ISS4_Superclass in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Superclass_swigregister(itkParabolicDilateImageFilterISS4ISS4_Superclass)

def itkParabolicDilateImageFilterIUC2IUC2_Superclass_New():
    return itkParabolicDilateImageFilterIUC2IUC2_Superclass.New()

class itkParabolicDilateImageFilterIUC2IUC2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkParabolicDilateImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIUC2IUC2_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD2"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass_GetScale(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass_GetParabolicAlgorithm(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass_UseImageSpacingOff(self)
    SameDimension = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass_SameDimension
    
    Comparable = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass_Comparable
    
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIUC2IUC2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIUC2IUC2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkParabolicDilateImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIUC2IUC2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIUC2IUC2_Superclass in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Superclass_swigregister(itkParabolicDilateImageFilterIUC2IUC2_Superclass)

def itkParabolicDilateImageFilterIUC3IUC3_Superclass_New():
    return itkParabolicDilateImageFilterIUC3IUC3_Superclass.New()

class itkParabolicDilateImageFilterIUC3IUC3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkParabolicDilateImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIUC3IUC3_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD3"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass_GetScale(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass_GetParabolicAlgorithm(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass_UseImageSpacingOff(self)
    SameDimension = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass_SameDimension
    
    Comparable = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass_Comparable
    
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIUC3IUC3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIUC3IUC3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkParabolicDilateImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIUC3IUC3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIUC3IUC3_Superclass in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Superclass_swigregister(itkParabolicDilateImageFilterIUC3IUC3_Superclass)

def itkParabolicDilateImageFilterIUC4IUC4_Superclass_New():
    return itkParabolicDilateImageFilterIUC4IUC4_Superclass.New()

class itkParabolicDilateImageFilterIUC4IUC4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""Proxy of C++ itkParabolicDilateImageFilterIUC4IUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIUC4IUC4_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD4"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass_GetScale(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass_GetParabolicAlgorithm(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass_UseImageSpacingOff(self)
    SameDimension = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass_SameDimension
    
    Comparable = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass_Comparable
    
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIUC4IUC4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIUC4IUC4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIUC4IUC4_Superclass

        Create a new object of the class itkParabolicDilateImageFilterIUC4IUC4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIUC4IUC4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIUC4IUC4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIUC4IUC4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIUC4IUC4_Superclass in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Superclass_swigregister(itkParabolicDilateImageFilterIUC4IUC4_Superclass)

def itkParabolicDilateImageFilterIUS2IUS2_Superclass_New():
    return itkParabolicDilateImageFilterIUS2IUS2_Superclass.New()

class itkParabolicDilateImageFilterIUS2IUS2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkParabolicDilateImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIUS2IUS2_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD2

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD2"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass_GetScale(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass_GetParabolicAlgorithm(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass_UseImageSpacingOff(self)
    SameDimension = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass_SameDimension
    
    Comparable = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass_Comparable
    
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIUS2IUS2_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIUS2IUS2_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkParabolicDilateImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIUS2IUS2_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIUS2IUS2_Superclass in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Superclass_swigregister(itkParabolicDilateImageFilterIUS2IUS2_Superclass)

def itkParabolicDilateImageFilterIUS3IUS3_Superclass_New():
    return itkParabolicDilateImageFilterIUS3IUS3_Superclass.New()

class itkParabolicDilateImageFilterIUS3IUS3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkParabolicDilateImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIUS3IUS3_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD3

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD3"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass_GetScale(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass_GetParabolicAlgorithm(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass_UseImageSpacingOff(self)
    SameDimension = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass_SameDimension
    
    Comparable = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass_Comparable
    
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIUS3IUS3_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIUS3IUS3_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkParabolicDilateImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIUS3IUS3_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIUS3IUS3_Superclass in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Superclass_swigregister(itkParabolicDilateImageFilterIUS3IUS3_Superclass)

def itkParabolicDilateImageFilterIUS4IUS4_Superclass_New():
    return itkParabolicDilateImageFilterIUS4IUS4_Superclass.New()

class itkParabolicDilateImageFilterIUS4IUS4_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""Proxy of C++ itkParabolicDilateImageFilterIUS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIUS4IUS4_Superclass_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass_Clone(self)

    def SetScale(self, *args):
        r"""
        SetScale(self, scale)

        Parameters
        ----------
        scale: double

        SetScale(self, _arg)

        Parameters
        ----------
        _arg: itkFixedArrayD4

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass_SetScale(self, *args)

    def GetScale(self):
        r"""GetScale(self) -> itkFixedArrayD4"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass_GetScale(self)
    ParabolicAlgorithm_NOCHOICE = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass_ParabolicAlgorithm_NOCHOICE
    
    ParabolicAlgorithm_CONTACTPOINT = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass_ParabolicAlgorithm_CONTACTPOINT
    
    ParabolicAlgorithm_INTERSECTION = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass_ParabolicAlgorithm_INTERSECTION
    

    def SetParabolicAlgorithm(self, _arg):
        r"""
        SetParabolicAlgorithm(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass_SetParabolicAlgorithm(self, _arg)

    def GetParabolicAlgorithm(self):
        r"""GetParabolicAlgorithm(self) -> int const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass_GetParabolicAlgorithm(self)

    def SetUseImageSpacing(self, _arg):
        r"""
        SetUseImageSpacing(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass_SetUseImageSpacing(self, _arg)

    def GetUseImageSpacing(self):
        r"""GetUseImageSpacing(self) -> bool const &"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass_GetUseImageSpacing(self)

    def UseImageSpacingOn(self):
        r"""UseImageSpacingOn(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass_UseImageSpacingOn(self)

    def UseImageSpacingOff(self):
        r"""UseImageSpacingOff(self)"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass_UseImageSpacingOff(self)
    SameDimension = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass_SameDimension
    
    Comparable = _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass_Comparable
    
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIUS4IUS4_Superclass

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIUS4IUS4_Superclass

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIUS4IUS4_Superclass

        Create a new object of the class itkParabolicDilateImageFilterIUS4IUS4_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIUS4IUS4_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIUS4IUS4_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIUS4IUS4_Superclass.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIUS4IUS4_Superclass in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Superclass_swigregister(itkParabolicDilateImageFilterIUS4IUS4_Superclass)

def itkParabolicDilateImageFilterID2ID2_New():
    return itkParabolicDilateImageFilterID2ID2.New()

class itkParabolicDilateImageFilterID2ID2(itkParabolicDilateImageFilterID2ID2_Superclass):
    r"""Proxy of C++ itkParabolicDilateImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterID2ID2_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterID2ID2_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_Clone(self)
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterID2ID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterID2ID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterID2ID2

        Create a new object of the class itkParabolicDilateImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterID2ID2 in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID2ID2_swigregister(itkParabolicDilateImageFilterID2ID2)

def itkParabolicDilateImageFilterID3ID3_New():
    return itkParabolicDilateImageFilterID3ID3.New()

class itkParabolicDilateImageFilterID3ID3(itkParabolicDilateImageFilterID3ID3_Superclass):
    r"""Proxy of C++ itkParabolicDilateImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterID3ID3_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterID3ID3_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_Clone(self)
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterID3ID3

        Create a new object of the class itkParabolicDilateImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterID3ID3 in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID3ID3_swigregister(itkParabolicDilateImageFilterID3ID3)

def itkParabolicDilateImageFilterID4ID4_New():
    return itkParabolicDilateImageFilterID4ID4.New()

class itkParabolicDilateImageFilterID4ID4(itkParabolicDilateImageFilterID4ID4_Superclass):
    r"""Proxy of C++ itkParabolicDilateImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterID4ID4_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterID4ID4_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_Clone(self)
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterID4ID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterID4ID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterID4ID4

        Create a new object of the class itkParabolicDilateImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterID4ID4 in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterID4ID4_swigregister(itkParabolicDilateImageFilterID4ID4)

def itkParabolicDilateImageFilterIF2IF2_New():
    return itkParabolicDilateImageFilterIF2IF2.New()

class itkParabolicDilateImageFilterIF2IF2(itkParabolicDilateImageFilterIF2IF2_Superclass):
    r"""Proxy of C++ itkParabolicDilateImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIF2IF2_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIF2IF2_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_Clone(self)
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIF2IF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIF2IF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIF2IF2

        Create a new object of the class itkParabolicDilateImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIF2IF2 in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF2IF2_swigregister(itkParabolicDilateImageFilterIF2IF2)

def itkParabolicDilateImageFilterIF3IF3_New():
    return itkParabolicDilateImageFilterIF3IF3.New()

class itkParabolicDilateImageFilterIF3IF3(itkParabolicDilateImageFilterIF3IF3_Superclass):
    r"""Proxy of C++ itkParabolicDilateImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIF3IF3_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIF3IF3_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_Clone(self)
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIF3IF3

        Create a new object of the class itkParabolicDilateImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIF3IF3 in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF3IF3_swigregister(itkParabolicDilateImageFilterIF3IF3)

def itkParabolicDilateImageFilterIF4IF4_New():
    return itkParabolicDilateImageFilterIF4IF4.New()

class itkParabolicDilateImageFilterIF4IF4(itkParabolicDilateImageFilterIF4IF4_Superclass):
    r"""Proxy of C++ itkParabolicDilateImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIF4IF4_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIF4IF4_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_Clone(self)
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIF4IF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIF4IF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIF4IF4

        Create a new object of the class itkParabolicDilateImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIF4IF4 in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIF4IF4_swigregister(itkParabolicDilateImageFilterIF4IF4)

def itkParabolicDilateImageFilterISS2ISS2_New():
    return itkParabolicDilateImageFilterISS2ISS2.New()

class itkParabolicDilateImageFilterISS2ISS2(itkParabolicDilateImageFilterISS2ISS2_Superclass):
    r"""Proxy of C++ itkParabolicDilateImageFilterISS2ISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterISS2ISS2_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterISS2ISS2_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_Clone(self)
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterISS2ISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterISS2ISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterISS2ISS2

        Create a new object of the class itkParabolicDilateImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterISS2ISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterISS2ISS2 in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS2ISS2_swigregister(itkParabolicDilateImageFilterISS2ISS2)

def itkParabolicDilateImageFilterISS3ISS3_New():
    return itkParabolicDilateImageFilterISS3ISS3.New()

class itkParabolicDilateImageFilterISS3ISS3(itkParabolicDilateImageFilterISS3ISS3_Superclass):
    r"""Proxy of C++ itkParabolicDilateImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterISS3ISS3_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterISS3ISS3_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_Clone(self)
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterISS3ISS3

        Create a new object of the class itkParabolicDilateImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterISS3ISS3 in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS3ISS3_swigregister(itkParabolicDilateImageFilterISS3ISS3)

def itkParabolicDilateImageFilterISS4ISS4_New():
    return itkParabolicDilateImageFilterISS4ISS4.New()

class itkParabolicDilateImageFilterISS4ISS4(itkParabolicDilateImageFilterISS4ISS4_Superclass):
    r"""Proxy of C++ itkParabolicDilateImageFilterISS4ISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterISS4ISS4_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterISS4ISS4_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_Clone(self)
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterISS4ISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterISS4ISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterISS4ISS4

        Create a new object of the class itkParabolicDilateImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterISS4ISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterISS4ISS4 in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterISS4ISS4_swigregister(itkParabolicDilateImageFilterISS4ISS4)

def itkParabolicDilateImageFilterIUC2IUC2_New():
    return itkParabolicDilateImageFilterIUC2IUC2.New()

class itkParabolicDilateImageFilterIUC2IUC2(itkParabolicDilateImageFilterIUC2IUC2_Superclass):
    r"""Proxy of C++ itkParabolicDilateImageFilterIUC2IUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIUC2IUC2_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIUC2IUC2_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_Clone(self)
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIUC2IUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIUC2IUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIUC2IUC2

        Create a new object of the class itkParabolicDilateImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIUC2IUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIUC2IUC2 in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC2IUC2_swigregister(itkParabolicDilateImageFilterIUC2IUC2)

def itkParabolicDilateImageFilterIUC3IUC3_New():
    return itkParabolicDilateImageFilterIUC3IUC3.New()

class itkParabolicDilateImageFilterIUC3IUC3(itkParabolicDilateImageFilterIUC3IUC3_Superclass):
    r"""Proxy of C++ itkParabolicDilateImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIUC3IUC3_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIUC3IUC3_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_Clone(self)
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIUC3IUC3

        Create a new object of the class itkParabolicDilateImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIUC3IUC3 in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC3IUC3_swigregister(itkParabolicDilateImageFilterIUC3IUC3)

def itkParabolicDilateImageFilterIUC4IUC4_New():
    return itkParabolicDilateImageFilterIUC4IUC4.New()

class itkParabolicDilateImageFilterIUC4IUC4(itkParabolicDilateImageFilterIUC4IUC4_Superclass):
    r"""Proxy of C++ itkParabolicDilateImageFilterIUC4IUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIUC4IUC4_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIUC4IUC4_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_Clone(self)
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIUC4IUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIUC4IUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIUC4IUC4

        Create a new object of the class itkParabolicDilateImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIUC4IUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIUC4IUC4 in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUC4IUC4_swigregister(itkParabolicDilateImageFilterIUC4IUC4)

def itkParabolicDilateImageFilterIUS2IUS2_New():
    return itkParabolicDilateImageFilterIUS2IUS2.New()

class itkParabolicDilateImageFilterIUS2IUS2(itkParabolicDilateImageFilterIUS2IUS2_Superclass):
    r"""Proxy of C++ itkParabolicDilateImageFilterIUS2IUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIUS2IUS2_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIUS2IUS2_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_Clone(self)
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIUS2IUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIUS2IUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIUS2IUS2

        Create a new object of the class itkParabolicDilateImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIUS2IUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIUS2IUS2 in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS2IUS2_swigregister(itkParabolicDilateImageFilterIUS2IUS2)

def itkParabolicDilateImageFilterIUS3IUS3_New():
    return itkParabolicDilateImageFilterIUS3IUS3.New()

class itkParabolicDilateImageFilterIUS3IUS3(itkParabolicDilateImageFilterIUS3IUS3_Superclass):
    r"""Proxy of C++ itkParabolicDilateImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIUS3IUS3_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIUS3IUS3_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_Clone(self)
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIUS3IUS3

        Create a new object of the class itkParabolicDilateImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIUS3IUS3 in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS3IUS3_swigregister(itkParabolicDilateImageFilterIUS3IUS3)

def itkParabolicDilateImageFilterIUS4IUS4_New():
    return itkParabolicDilateImageFilterIUS4IUS4.New()

class itkParabolicDilateImageFilterIUS4IUS4(itkParabolicDilateImageFilterIUS4IUS4_Superclass):
    r"""Proxy of C++ itkParabolicDilateImageFilterIUS4IUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkParabolicDilateImageFilterIUS4IUS4_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkParabolicDilateImageFilterIUS4IUS4_Pointer"""
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_Clone(self)
    __swig_destroy__ = _itkParabolicDilateImageFilterPython.delete_itkParabolicDilateImageFilterIUS4IUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkParabolicDilateImageFilterIUS4IUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> itkParabolicDilateImageFilterIUS4IUS4

        Create a new object of the class itkParabolicDilateImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkParabolicDilateImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkParabolicDilateImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkParabolicDilateImageFilterIUS4IUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkParabolicDilateImageFilterIUS4IUS4 in _itkParabolicDilateImageFilterPython:
_itkParabolicDilateImageFilterPython.itkParabolicDilateImageFilterIUS4IUS4_swigregister(itkParabolicDilateImageFilterIUS4IUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def parabolic_dilate_image_filter(*args: itkt.ImageLike,  scale: Union[float, Sequence[float]]=..., parabolic_algorithm: int=..., use_image_spacing: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ParabolicDilateImageFilter"""
    import itk

    kwarg_typehints = { 'scale':scale,'parabolic_algorithm':parabolic_algorithm,'use_image_spacing':use_image_spacing }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ParabolicDilateImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def parabolic_dilate_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ParabolicMorphology.ParabolicDilateImageFilter
    parabolic_dilate_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    parabolic_dilate_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def parabolic_erode_dilate_image_filter(*args: itkt.ImageLike,  scale: Union[float, Sequence[float]]=..., parabolic_algorithm: int=..., use_image_spacing: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ParabolicErodeDilateImageFilter"""
    import itk

    kwarg_typehints = { 'scale':scale,'parabolic_algorithm':parabolic_algorithm,'use_image_spacing':use_image_spacing }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ParabolicErodeDilateImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def parabolic_erode_dilate_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ParabolicMorphology.ParabolicErodeDilateImageFilter
    parabolic_erode_dilate_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    parabolic_erode_dilate_image_filter.__doc__ = filter_object.__doc__



