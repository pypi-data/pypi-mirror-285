function p(s){s.charAt(0)==="_"&&(s=s.slice(1));let e=s.split("_");for(let o=1;o<e.length;o++)e[o]=e[o].charAt(0).toUpperCase()+e[o].slice(1);return e.join("")}function h(s){let e={};for(let o in s)e[p(o)]=s[o];return e}var c=class{locked=!1;unlock(){this.locked=!1}lock(){this.locked=!0}};import u from"https://esm.sh/aladin-lite@3.4.4-beta";var l=u;var m=class{constructor(e){this.aladin=e}handleChangeFoV(e){this.aladin.setFoV(e.fov)}handleGotoRaDec(e){this.aladin.gotoRaDec(e.ra,e.dec)}handleAddCatalogFromURL(e){let o=h(e.options||{});this.aladin.addCatalog(l.catalogFromURL(e.votable_URL,o))}handleAddMOCFromURL(e){let o=h(e.options||{});this.aladin.addMOC(l.MOCFromURL(e.moc_URL,o))}handleAddMOCFromDict(e){let o=h(e.options||{});this.aladin.addMOC(l.MOCFromJSON(e.moc_dict,o))}handleAddOverlay(e){let o=e.regions_infos,n=h(e.graphic_options||{});n.color||(n.color="red");let i=l.graphicOverlay(n);this.aladin.addOverlay(i);for(let t of o){let a=t.infos;switch(t.region_type){case"stcs":i.addFootprints(l.footprintsFromSTCS(a.stcs,t.options));break;case"circle":i.add(l.circle(a.ra,a.dec,a.radius,t.options));break;case"ellipse":i.add(l.ellipse(a.ra,a.dec,a.a,a.b,a.theta,t.options));break;case"line":t.options.lineWidth=t.options.lineWidth||3,i.add(l.vector(a.ra1,a.dec1,a.ra2,a.dec2,t.options));break;case"polygon":i.add(l.polygon(a.vertices,t.options));break}}}handleChangeColormap(e){this.aladin.getBaseImageLayer().setColormap(e.colormap)}handleGetJPGThumbnail(){this.aladin.exportAsPNG()}handleTriggerRectangularSelection(){this.aladin.select()}handleAddTable(e,o){let n=h(e.options||{}),i=o[0].buffer,t=new TextDecoder("utf-8"),a=new Blob([t.decode(i)]),r=URL.createObjectURL(a);l.catalogFromURL(r,Object.assign(n,{onClick:"showTable"}),d=>{this.aladin.addCatalog(d)},!1),URL.revokeObjectURL(r)}};var g=class{constructor(e,o,n){this.aladin=e,this.aladinDiv=o,this.model=n,this.messageHandler=new m(e)}subscribeAll(){let e=new c,o=new c;this.aladin.on("positionChanged",t=>{if(o.locked){o.unlock();return}e.lock();let a=[t.ra,t.dec];this.model.set("_target",`${a[0]} ${a[1]}`),this.model.save_changes()}),this.model.on("change:_target",()=>{if(e.locked){e.unlock();return}o.lock();let t=this.model.get("_target"),[a,r]=t.split(" ");this.aladin.gotoRaDec(a,r)});let n=new c,i=new c;this.aladin.on("zoomChanged",t=>{if(i.locked){i.unlock();return}n.lock(),this.model.set("_fov",parseFloat(t.toFixed(5))),this.model.save_changes()}),this.model.on("change:_fov",()=>{if(n.locked){n.unlock();return}i.lock();let t=this.model.get("_fov");this.aladin.setFoV(t)}),this.model.on("change:height",()=>{let t=this.model.get("height");this.aladinDiv.style.height=`${t}px`}),this.aladin.on("objectHovered",t=>{t.data!==void 0&&this.model.send({event_type:"object_hovered",content:{ra:t.ra,dec:t.dec}})}),this.aladin.on("objectClicked",t=>{if(t){let a={ra:t.ra,dec:t.dec};t.data!==void 0&&(a.data=t.data),this.model.set("clicked_object",a),this.model.send({event_type:"object_clicked",content:a}),this.model.save_changes()}}),this.aladin.on("click",t=>{this.model.send({event_type:"click",content:t})}),this.aladin.on("select",t=>{let a=[];t.forEach(r=>{r.forEach(d=>{a.push({ra:d.ra,dec:d.dec,data:d.data,x:d.x,y:d.y})})}),this.model.send({event_type:"select",content:a})}),this.model.on("change:coo_frame",()=>{this.aladin.setFrame(this.model.get("coo_frame"))}),this.model.on("change:survey",()=>{this.aladin.setImageSurvey(this.model.get("survey"))}),this.model.on("change:overlay_survey",()=>{this.aladin.setOverlayImageLayer(this.model.get("overlay_survey"))}),this.model.on("change:overlay_survey_opacity",()=>{this.aladin.getOverlayImageLayer().setAlpha(this.model.get("overlay_survey_opacity"))}),this.eventHandlers={change_fov:this.messageHandler.handleChangeFoV,goto_ra_dec:this.messageHandler.handleGotoRaDec,add_catalog_from_URL:this.messageHandler.handleAddCatalogFromURL,add_MOC_from_URL:this.messageHandler.handleAddMOCFromURL,add_MOC_from_dict:this.messageHandler.handleAddMOCFromDict,add_overlay:this.messageHandler.handleAddOverlay,change_colormap:this.messageHandler.handleChangeColormap,get_JPG_thumbnail:this.messageHandler.handleGetJPGThumbnail,trigger_rectangular_selection:this.messageHandler.handleTriggerRectangularSelection,add_table:this.messageHandler.handleAddTable},this.model.on("msg:custom",(t,a)=>{let r=t.event_name,d=this.eventHandlers[r];if(d)d.call(this,t,a);else throw new Error(`Unknown event name: ${r}`)})}unsubscribeAll(){this.model.off("change:_target"),this.model.off("change:_fov"),this.model.off("change:height"),this.model.off("change:coo_frame"),this.model.off("change:survey"),this.model.off("change:overlay_survey"),this.model.off("change:overlay_survey_opacity"),this.model.off("change:trigger_event"),this.model.off("msg:custom")}};var f=0;function v(s,e){let o={};s.get("init_options").forEach(a=>{o[p(a)]=s.get(a)});let n=document.createElement("div");n.classList.add("aladin-widget"),n.style.height=`${o.height}px`,n.id=`aladin-lite-div-${f}`;let i=new l.aladin(n,o);f+=1;let t=o.target.split(" ");return i.gotoRaDec(t[0],t[1]),e.appendChild(n),{aladin:i,aladinDiv:n}}async function _({model:s}){await l.init}function y({model:s,el:e}){let{aladin:o,aladinDiv:n}=v(s,e),i=new g(o,n,s);return i.subscribeAll(),()=>{i.unsubscribeAll()}}var G={initialize:_,render:y};export{G as default};
//# sourceMappingURL=data:application/json;base64,
