import json
import os.path
from urllib.parse import urlparse

import click
import httpx

from auth.BearerAuth import BearerAuth
from xml_report.xml_processor import process_xml_files


def config(ctx: click.Context, domain: str) -> None:
    click.secho(f"Configuring Domain: {domain}", fg="yellow")

    url = urlparse(domain)
    netloc = ".".join(("api", url.netloc))
    url = urlparse(url.scheme + "://" + netloc + "/api/v1")
    ctx.obj.update({"api_url": url.geturl()})

    click.secho(f"API URL obtained", fg="green")


def authenticate(ctx: click.Context, username: str, password: str) -> None:
    click.secho(f"Authenticating: {username}", fg="yellow")
    auth = httpx.BasicAuth(username, password)
    api_url = ctx.obj["api_url"]

    response = httpx.post(f"{api_url}/auth/login", auth=auth)
    if response.status_code != 200:
        raise click.ClickException("Authentication failed")

    ctx.obj.update({"auth": response.json()})
    ctx.obj.update({"organization_id": response.json()["organization_id"][0]})
    click.secho(f"User: {username} authenticated", fg="green")


def get_predicted_link(ctx: click.Context, traceability_id: int) -> dict:
    click.secho(f"Getting links", fg="yellow")
    api_url = ctx.obj["api_url"]
    organization_id = ctx.obj["organization_id"]
    auth = BearerAuth(ctx.obj["auth"]["access_token"])

    # url = f"{api_url}/{organization_id}/traceability/{traceability_id}/prediction"
    url = f"{api_url}/link/resource"
    data = {
        "resource_types": [
            "RepositoryFileBlockOfCodeSelection", "TestCase"
        ]
    }
    response = httpx.get(url, auth=auth)
    if response.status_code != 200:
        raise click.ClickException("Failed to get link")

    click.secho(f"Links obtained", fg="green")
    return response.json()


@click.command("add-mapping-info-to-junit-xml")
@click.argument("traceability_id")
@click.option("--link-mapping", help="Link mapping file")
@click.argument("xml_input")
@click.argument("xml_output")
@click.pass_context
def process_xml(
    ctx: click.Context,
    traceability_id: int | None = None,
    link_mapping: str | None = None,
    xml_input: str | None = None,
    xml_output: str | None = None,
) -> None:
    """
    Parsing the Test Results from the XML files generated by the execution of the test suite
    :param ctx:
    :param traceability_id:
    :param link_mapping: Location of the link mapping file in JSON format
    :param xml_input:
    :param xml_output:
    :return:
    """
    json_data_from_file: str | None = None

    if link_mapping and not os.path.exists(os.path.dirname(link_mapping)) and not os.path.exists(link_mapping):
        raise click.ClickException("Link Mapping input folder or file does not exist")

    if link_mapping:
        with open(link_mapping) as f:
            json_data_from_file = json.load(f)

    if not os.path.exists(xml_input):
        raise click.ClickException("Test Result Input folder or file does not exist")

    if not json_data_from_file:
        from xml_report.link_prediction_example import json_data
        # json_data = get_predicted_link(
        #     ctx=ctx,
        #     traceability_id=traceability_id,
        # )
    else:
        json_data = json_data_from_file

    process_xml_files(xml_input, json_data, xml_output)
