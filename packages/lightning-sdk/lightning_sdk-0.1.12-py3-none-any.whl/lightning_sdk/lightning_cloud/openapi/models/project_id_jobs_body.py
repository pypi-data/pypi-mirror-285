# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class ProjectIdJobsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloudspace_id': 'str',
        'cluster_id': 'str',
        'command': 'str',
        'endpoint': 'V1Endpoint',
        'entrypoint': 'str',
        'env': 'list[V1EnvVar]',
        'image': 'str',
        'instance_name': 'str',
        'name': 'str',
        'restart_policy': 'str',
        'run_id': 'str',
        'skip_data_connections_setup': 'bool',
        'skip_filesystem_setup': 'bool',
        'spot': 'bool'
    }

    attribute_map = {
        'cloudspace_id': 'cloudspaceId',
        'cluster_id': 'clusterId',
        'command': 'command',
        'endpoint': 'endpoint',
        'entrypoint': 'entrypoint',
        'env': 'env',
        'image': 'image',
        'instance_name': 'instanceName',
        'name': 'name',
        'restart_policy': 'restartPolicy',
        'run_id': 'runId',
        'skip_data_connections_setup': 'skipDataConnectionsSetup',
        'skip_filesystem_setup': 'skipFilesystemSetup',
        'spot': 'spot'
    }

    def __init__(self, cloudspace_id: 'str' =None, cluster_id: 'str' =None, command: 'str' =None, endpoint: 'V1Endpoint' =None, entrypoint: 'str' =None, env: 'list[V1EnvVar]' =None, image: 'str' =None, instance_name: 'str' =None, name: 'str' =None, restart_policy: 'str' =None, run_id: 'str' =None, skip_data_connections_setup: 'bool' =None, skip_filesystem_setup: 'bool' =None, spot: 'bool' =None):  # noqa: E501
        """ProjectIdJobsBody - a model defined in Swagger"""  # noqa: E501
        self._cloudspace_id = None
        self._cluster_id = None
        self._command = None
        self._endpoint = None
        self._entrypoint = None
        self._env = None
        self._image = None
        self._instance_name = None
        self._name = None
        self._restart_policy = None
        self._run_id = None
        self._skip_data_connections_setup = None
        self._skip_filesystem_setup = None
        self._spot = None
        self.discriminator = None
        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if command is not None:
            self.command = command
        if endpoint is not None:
            self.endpoint = endpoint
        if entrypoint is not None:
            self.entrypoint = entrypoint
        if env is not None:
            self.env = env
        if image is not None:
            self.image = image
        if instance_name is not None:
            self.instance_name = instance_name
        if name is not None:
            self.name = name
        if restart_policy is not None:
            self.restart_policy = restart_policy
        if run_id is not None:
            self.run_id = run_id
        if skip_data_connections_setup is not None:
            self.skip_data_connections_setup = skip_data_connections_setup
        if skip_filesystem_setup is not None:
            self.skip_filesystem_setup = skip_filesystem_setup
        if spot is not None:
            self.spot = spot

    @property
    def cloudspace_id(self) -> 'str':
        """Gets the cloudspace_id of this ProjectIdJobsBody.  # noqa: E501


        :return: The cloudspace_id of this ProjectIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id: 'str'):
        """Sets the cloudspace_id of this ProjectIdJobsBody.


        :param cloudspace_id: The cloudspace_id of this ProjectIdJobsBody.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this ProjectIdJobsBody.  # noqa: E501


        :return: The cluster_id of this ProjectIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this ProjectIdJobsBody.


        :param cluster_id: The cluster_id of this ProjectIdJobsBody.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def command(self) -> 'str':
        """Gets the command of this ProjectIdJobsBody.  # noqa: E501


        :return: The command of this ProjectIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command: 'str'):
        """Sets the command of this ProjectIdJobsBody.


        :param command: The command of this ProjectIdJobsBody.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def endpoint(self) -> 'V1Endpoint':
        """Gets the endpoint of this ProjectIdJobsBody.  # noqa: E501


        :return: The endpoint of this ProjectIdJobsBody.  # noqa: E501
        :rtype: V1Endpoint
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint: 'V1Endpoint'):
        """Sets the endpoint of this ProjectIdJobsBody.


        :param endpoint: The endpoint of this ProjectIdJobsBody.  # noqa: E501
        :type: V1Endpoint
        """

        self._endpoint = endpoint

    @property
    def entrypoint(self) -> 'str':
        """Gets the entrypoint of this ProjectIdJobsBody.  # noqa: E501


        :return: The entrypoint of this ProjectIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint: 'str'):
        """Sets the entrypoint of this ProjectIdJobsBody.


        :param entrypoint: The entrypoint of this ProjectIdJobsBody.  # noqa: E501
        :type: str
        """

        self._entrypoint = entrypoint

    @property
    def env(self) -> 'list[V1EnvVar]':
        """Gets the env of this ProjectIdJobsBody.  # noqa: E501


        :return: The env of this ProjectIdJobsBody.  # noqa: E501
        :rtype: list[V1EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env: 'list[V1EnvVar]'):
        """Sets the env of this ProjectIdJobsBody.


        :param env: The env of this ProjectIdJobsBody.  # noqa: E501
        :type: list[V1EnvVar]
        """

        self._env = env

    @property
    def image(self) -> 'str':
        """Gets the image of this ProjectIdJobsBody.  # noqa: E501


        :return: The image of this ProjectIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: 'str'):
        """Sets the image of this ProjectIdJobsBody.


        :param image: The image of this ProjectIdJobsBody.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def instance_name(self) -> 'str':
        """Gets the instance_name of this ProjectIdJobsBody.  # noqa: E501


        :return: The instance_name of this ProjectIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name: 'str'):
        """Sets the instance_name of this ProjectIdJobsBody.


        :param instance_name: The instance_name of this ProjectIdJobsBody.  # noqa: E501
        :type: str
        """

        self._instance_name = instance_name

    @property
    def name(self) -> 'str':
        """Gets the name of this ProjectIdJobsBody.  # noqa: E501


        :return: The name of this ProjectIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this ProjectIdJobsBody.


        :param name: The name of this ProjectIdJobsBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def restart_policy(self) -> 'str':
        """Gets the restart_policy of this ProjectIdJobsBody.  # noqa: E501


        :return: The restart_policy of this ProjectIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._restart_policy

    @restart_policy.setter
    def restart_policy(self, restart_policy: 'str'):
        """Sets the restart_policy of this ProjectIdJobsBody.


        :param restart_policy: The restart_policy of this ProjectIdJobsBody.  # noqa: E501
        :type: str
        """

        self._restart_policy = restart_policy

    @property
    def run_id(self) -> 'str':
        """Gets the run_id of this ProjectIdJobsBody.  # noqa: E501


        :return: The run_id of this ProjectIdJobsBody.  # noqa: E501
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id: 'str'):
        """Sets the run_id of this ProjectIdJobsBody.


        :param run_id: The run_id of this ProjectIdJobsBody.  # noqa: E501
        :type: str
        """

        self._run_id = run_id

    @property
    def skip_data_connections_setup(self) -> 'bool':
        """Gets the skip_data_connections_setup of this ProjectIdJobsBody.  # noqa: E501


        :return: The skip_data_connections_setup of this ProjectIdJobsBody.  # noqa: E501
        :rtype: bool
        """
        return self._skip_data_connections_setup

    @skip_data_connections_setup.setter
    def skip_data_connections_setup(self, skip_data_connections_setup: 'bool'):
        """Sets the skip_data_connections_setup of this ProjectIdJobsBody.


        :param skip_data_connections_setup: The skip_data_connections_setup of this ProjectIdJobsBody.  # noqa: E501
        :type: bool
        """

        self._skip_data_connections_setup = skip_data_connections_setup

    @property
    def skip_filesystem_setup(self) -> 'bool':
        """Gets the skip_filesystem_setup of this ProjectIdJobsBody.  # noqa: E501


        :return: The skip_filesystem_setup of this ProjectIdJobsBody.  # noqa: E501
        :rtype: bool
        """
        return self._skip_filesystem_setup

    @skip_filesystem_setup.setter
    def skip_filesystem_setup(self, skip_filesystem_setup: 'bool'):
        """Sets the skip_filesystem_setup of this ProjectIdJobsBody.


        :param skip_filesystem_setup: The skip_filesystem_setup of this ProjectIdJobsBody.  # noqa: E501
        :type: bool
        """

        self._skip_filesystem_setup = skip_filesystem_setup

    @property
    def spot(self) -> 'bool':
        """Gets the spot of this ProjectIdJobsBody.  # noqa: E501


        :return: The spot of this ProjectIdJobsBody.  # noqa: E501
        :rtype: bool
        """
        return self._spot

    @spot.setter
    def spot(self, spot: 'bool'):
        """Sets the spot of this ProjectIdJobsBody.


        :param spot: The spot of this ProjectIdJobsBody.  # noqa: E501
        :type: bool
        """

        self._spot = spot

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectIdJobsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'ProjectIdJobsBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectIdJobsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'ProjectIdJobsBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
