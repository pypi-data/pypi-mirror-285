import io
import boto3
from pathlib import Path
from botocore.exceptions import ClientError
from . import aws_helper

AWS_REGION='us-east-1'
s3 = boto3.resource('s3')
def getInfoBykey(bucket, key):
    """获取s3文件对象的信息（用于调试）

    Args:
        bucket (_type_): _description_
        key (_type_): _description_
    """
    s3Res = aws_helper.getS3Resource() 
    obj = s3Res.Object(bucket, key)
    bytes = obj.get()['Body'].read()
    
def uploadFile(bucket, key, bytes):
    """写入文件"""
    with io.BytesIO() as f:
        f.write(bytes)
        f.seek(0)
        s3_client = boto3.client("s3", region_name=AWS_REGION)
        s3_client.upload_fileobj(f,bucket,key)
        
def downloadToLocal(bucket, key, saveFileToPath):
    """下载文件到本地"""
    s3_resource = boto3.resource("s3", region_name=AWS_REGION)
    s3_object = s3_resource.Object(bucket, key)
    Path(saveFileToPath).parent.mkdir(exist_ok=True)
    s3_object.download_file(saveFileToPath)
    
def copy_to_other_bucket(src, des, key):
    try:
        copy_source = {
            'Bucket': src,
            'Key': key
        }
        bucket = s3.Bucket(des)
        bucket.copy(copy_source, key)
    except Exception as e:
        print(e)
    
def delete(bucket, key):    
    s3_client = boto3.client("s3", region_name=AWS_REGION)    
    s3_client.delete_object(Bucket=bucket, Key=key)
    
# To check whether root bucket exists or not
def bucket_exists(bucket_name):
   try:
      session = boto3.session.Session()
      # User can pass customized access key, secret_key and token as well
      s3_client = session.client('s3')
      s3_client.head_bucket(Bucket=bucket_name)
      print("Bucket exists.", bucket_name)
      exists = True
   except ClientError as error:
      error_code = int(error.response['Error']['Code'])
      if error_code == 403:
         print("Private Bucket. Forbidden Access! ", bucket_name)
      elif error_code == 404:
         print("Bucket Does Not Exist!", bucket_name)
      exists = False
   return exists