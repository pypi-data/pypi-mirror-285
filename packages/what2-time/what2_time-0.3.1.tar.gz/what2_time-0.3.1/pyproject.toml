[tool.poetry]
name = "what2-time"
version = "0.3.1"
description = "Reusable timing code that handles unit conversion, pretty printing time, total of repeat and re-entrant timers."
authors = ["Marc Edwards <marc@mlwhat.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/alwaysmpe/what2_time"
repository = "https://github.com/alwaysmpe/what2_time"
packages = [
    {include = "what2_time", from = "src"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
]

[tool.poetry.dependencies]
python = "^3.12"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
pytest-order = "^1.2.1"
pytest-gitignore = "^1.3"
ruff = "^0.3.4"
pylama = "^8.4.1"
setuptools = "^70.2.0"
basedpyright = "^1.12.6"
toml = "^0.10.2"
darglint2 = "^1.8.2"
what2 = "*"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = """\
--doctest-modules \
--doctest-ignore-import-errors \
--ignore=tasks.py \
--tb=short \
"""

[tool.pyright]

reportImplicitOverride = true
typeCheckingMode  = "strict"
exclude = [
    "**/.ipynb_checkpoints/*",
    "**/.venv/",
    "./tasks.py",
    "./exp.py",
]
ignore =  [
    "**/.ipynb_checkpoints/*",
    "**/.venv/",
    "./tasks.py",
    "./exp.py",
]

[tool.ruff]

line-length = 160
indent-width = 4
target-version = "py312"
exclude = [
    "**/.ipynb_checkpoints/*",
    "**/.venv/",
    "tasks.py",
    "/exp.py",
]

[tool.ruff.format]

quote-style = "single"
indent-style = "space"
line-ending = "lf"

[tool.ruff.lint]

preview = true
select = [
    "ALL",
    # aren't selected by all due to conflicts
    "D213",
    "D215",
    "D404",
    "D405",
    "D406",
    "D407",
    "D408",
    "D408",
    "D409",
    "D410",
    "D411",
    "D417",
]

ignore = [
    "FIX002",
    "TCH001",
    "TCH002",
    "TCH003",
    "TD003",
    "S101",
    "CPY001",
    "D105",
    "D107",
    "D200",
    "D203",
    "D205",
    "D212",
    "E261",
    "TD002",
    "TRY002",
    "TRY003",
    "FIX001",
    "FIX003",
    "FIX004",
    "RET503",
    "RET504",
    "PD901",
    "SIM108",
    "PLW1641", # implement eq without hash - what if it's mutable?
]

[tool.ruff.lint.per-file-ignores]

"tests/*" = [
    "D",
    "ANN",
    "PLR2004",
    "S404",
    "S603",
    "T201",
    "FBT003",
]

[tool.ruff.lint.flake8-quotes]

avoid-escape = false
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]

ban-relative-imports = "all"

[tool.ruff.lint.isort]

force-sort-within-sections = true
forced-separate = ["what2*", "tests", "pytest", "_pytest"]

[tool.ruff.lint.pydocstyle]

convention = "pep257"

[tool.pylama]

ignore = "E261,C901"

skip = """\
*.ipynb_checkpoints/*,\
"""

max_line_length = 160

format = "pylint"
