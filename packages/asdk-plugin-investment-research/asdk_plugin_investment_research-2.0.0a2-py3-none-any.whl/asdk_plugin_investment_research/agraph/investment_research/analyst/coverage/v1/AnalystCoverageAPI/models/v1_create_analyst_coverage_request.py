# coding: utf-8

"""
    Investment Analyst Coverage

    The Analyst Coverage API enables users to assign, transfer, or remove analyst coverage assignments for one or more entities. It also support discovery of coverage for an analyst or entity today or in the past.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from asdk_plugin_investment_research.agraph.investment_research.analyst.coverage.v1.AnalystCoverageAPI.models.v1_analyst_coverage import V1AnalystCoverage

class V1CreateAnalystCoverageRequest(BaseModel):
    """
    The request message for AnalystCoverageAPI.CreateAnalystCoverage.
    """
    analyst_coverage: Optional[V1AnalystCoverage] = Field(None, alias="analystCoverage")
    __properties = ["analystCoverage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1CreateAnalystCoverageRequest:
        """Create an instance of V1CreateAnalystCoverageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of analyst_coverage
        if self.analyst_coverage:
            _dict['analystCoverage'] = self.analyst_coverage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1CreateAnalystCoverageRequest:
        """Create an instance of V1CreateAnalystCoverageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1CreateAnalystCoverageRequest.parse_obj(obj)

        _obj = V1CreateAnalystCoverageRequest.parse_obj({
            "analyst_coverage": V1AnalystCoverage.from_dict(obj.get("analystCoverage")) if obj.get("analystCoverage") is not None else None
        })
        return _obj

