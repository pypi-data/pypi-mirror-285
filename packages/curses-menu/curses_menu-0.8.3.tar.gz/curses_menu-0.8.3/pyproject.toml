[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "curses-menu"
version = "0.8.3"
description = "A simple console menu system using curses"
authors = ["Paul Barrett <pmbarrett314@gmail.com>"]
license = "MIT"
repository = "http://github.com/pmbarrett314/curses-menu"
packages = [{ include = "cursesmenu" }]
readme = "README.rst"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Environment :: Console :: Curses",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
include = ["*.rst", "*.md", "*.txt", "tox.ini", "docs/Makefile", "test/**/*.py", "docs/**/*.rst", "docs/**/*.py"]
exclude = ["docs/_build"]

[tool.ruff]
line-length = 88
extend-exclude = ["examples/*", "stubs/*"]
# Don't be pedantic about types and documentation in tests. Assume tests can access private members
# conftest.py has some nested withs for clarity, don't complain about that.
target-version = "py38"
fix = true

[tool.ruff.lint]
select = ["ALL"]
extend-ignore = ["D", "PD", "TD", "S101", "ANN101", "ANN102", "UP015", "RET505", "PLR2004", "PLR0913", "PLR0915", "PLC1901", "S602", "S605", "S607", "FIX002", 'COM812', 'COM819', 'E501', 'ISC001', 'Q000', 'Q001', 'Q002', 'Q003', 'W191']
# DTZ (flake8-datetimez): shouldn't matter
# ERA (eradicate) currently passes byt if it becomes an issue I might disable it

# D (pydocstyle): not ready to commit to this yet
# PD (pandas-vet): not using pandas
# TD (flake8-todos): currently don't really care to have exactly formatted todos

# S101 (assert used): ignored because we use assert for type narrowing and tests
# ANN101 (no self annotation): ignored because self annotations feel redundant
# ANN102 (no cls annotation): ignored because cls annotations also feel redundant
# U015 (redundant open mode): I like open("foo.txt", "r")
# RET505 (superfluous else return) I disagree with this, I think the explicit else adds clarity.
# Similar hooks not disabled currently because they don't apply.
# PLR2004 interesting ideas about magic constants, but a little too aggressive
# PLR0913 and PLR0915 are a little too opinionated for my tastes
# PLC1901 (prefer comparing strings using falsiness) disabled because I prefer the explcit comparison
# S60X (possible security issues with subrpocess) these need more investigation.
# FIX002 (flake8-fix me to do comments): TO DO comments are okay
# 'COM812', 'COM819', 'E501', 'ISC001', 'Q000', 'Q001', 'Q002', 'Q003', 'W191' ignored by ruff format reccomendation
per-file-ignores = { "test/*" = ["ANN", "D", "SLF001"], "test/conftest.py" = ["SIM117"], "docs/*" = ["INP001"] }
fixable = ["I"]


[tool.coverage.report]
exclude_lines = [
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "pragma: no cover all",
    "@overload",
]


[tool.coverage.run]
source = ['test', 'cursesmenu']
omit = ["cursesmenu/old_curses_menu.py"]
branch = true
data_file = ".cov/.coverage"
plugins = ["coverage_conditional_plugin"]

[tool.coverage.lcov]
output = ".cov/coverage.lcov"

[tool.coverage.coverage_conditional_plugin.rules]
no-cover-nonwindows = "not sys.platform.startswith('win')"
no-cover-windows = "sys.platform.startswith('win')"
py-gte-39 = "sys_version_info >= (3, 9)"
py-lt-39 = "sys_version_info < (3, 9)"


[tool.pytest.ini_options]
required_plugins = ["pytest-cov"]
addopts = ["-Werror", "-vv", "--cov", "--cov-append", "--cov-report=term-missing", "--cov-report=xml:.cov/coverage.xml", "--cov-fail-under=100", "--no-cov-on-fail"]

[tool.pydocstyle]
add_ignore = "D105"
match = "(?!__init__.py|^(docs/|test/|examples/|setup.py|conftest.py))"

[tool.mypy]
exclude = "^(scratch/|examples/)"
warn_unused_configs = true
warn_redundant_casts = true

[[tool.mypy.overrides]]
module = "cursesmenu"
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_unused_ignores = true
warn_return_any = true
no_implicit_reexport = true
strict_equality = true
strict_concatenate = true


[tool.poetry.dependencies]
python = "^3.8"
windows-curses = { version = "^2.3.2", platform = "win32" }
Deprecated = "^1.2.13"

[tool.poetry.group.docs]

[tool.poetry.group.docs.dependencies]
Sphinx = { version = "^7.0.0", python = ">=3.9,<4.0" }
sphinx-rtd-theme = "^2.0.0"
sphinx-autodoc-typehints = "^2.0.0"

[tool.poetry.group.test]

[tool.poetry.group.test.dependencies]
pytest = "^8.0.0"
tox = "^4.0.0"
tox-uv = "^1.0.1"
coverage = { version = "^7.0.0", extras = ["toml"] }
pyte = "^0.8.1"
pexpect = "^4.8.0"
types-Deprecated = "^1.2.9"
pytest-cov = "^5.0.0"
coverage-conditional-plugin = "^0.9.0"

[tool.poetry.group.type]

[tool.poetry.group.type.dependencies]
types-Deprecated = "^1.2.9"
mypy = "<1.11.0"
pytest = "^8.0.0"
