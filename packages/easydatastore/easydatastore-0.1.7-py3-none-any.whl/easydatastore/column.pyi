import typing
from .table import Table as Table
from _typeshed import Incomplete
from collections.abc import Callable as Callable, Mapping
from easydatamodel._typing import UnassignedType as UnassignedType
from easydatamodel.field import FieldInfo

CLASS_VAR_PATTERN: Incomplete

def Column(default: typing.Any = ..., default_factory: Callable[[], typing.Any] | UnassignedType = ..., type: typing.Any = ..., init: bool | None = None, choices: list[typing.Any] | None = None, repr: bool = True, compare: bool = True, metadata: Mapping[typing.Any, typing.Any] | None = None, primary_key: bool = False, unique: bool = False, index: bool = False) -> typing.Any: ...

class ColumnInfo(FieldInfo):
    def __init__(self, *, default: typing.Any = ..., default_factory: Callable[[], typing.Any] | UnassignedType = ..., type: typing.Any = ..., const: bool = False, init: bool | None = None, primary_key: bool = False, unique: bool = False, index: bool = False, choices: list[typing.Any] | None = None, repr: bool = True, compare: bool = True, metadata: Mapping[typing.Any, typing.Any] | None = None, name: str | UnassignedType[str] = ...) -> None: ...
    @property
    def primary_key(self) -> bool: ...
    @property
    def unique(self) -> bool: ...
    @property
    def index(self) -> bool: ...
    @property
    def owner(self) -> type['Table'] | None: ...
    def __set__(self, instance: Table, value: typing.Any) -> None: ...
    def copy(self) -> ColumnInfo: ...
