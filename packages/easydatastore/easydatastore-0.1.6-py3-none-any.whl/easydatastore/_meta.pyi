from .exceptions import DuplicateUniqueFieldValueError as DuplicateUniqueFieldValueError, ModelNotFoundError as ModelNotFoundError, NoPrimaryKeyError as NoPrimaryKeyError
from .table import Table as Table
from _typeshed import Incomplete
from easydatamodel._meta import ModelMeta
from easydatastore.column import ColumnInfo as ColumnInfo
from typing import Any, Callable, Generic, Sequence, TypeVar

T = TypeVar('T', bound='Table')

class TableMeta(ModelMeta):
    def __new__(mcs, class_name: str, bases: tuple[type, ...], namespace: dict[str, Any]) -> type['Table']: ...
    @property
    def columns(cls) -> list[ColumnInfo]: ...
    @property
    def pk(cls) -> ColumnInfo | None: ...

class TableCache(Generic[T]):
    model: type[T]
    all: list[T]
    def __init__(self, model: type[T]) -> None: ...
    def add_model(self, obj: T) -> None: ...
    def update_model(self, obj: T, field: ColumnInfo, value: Any) -> None: ...
    def delete(self, instance_or_instances: T | Sequence[T]) -> None: ...
    def get(self, pk_value: Any, error_if_not_found: bool) -> T | None: ...
    def filter(self, filter_func: Callable[[T], bool] | None = None, *, error_if_not_found: bool = False, **kwargs: Any) -> list[T]: ...

class UniqueFieldCache(dict[str, dict[Any, T]]):
    model: Incomplete
    def __init__(self, model: type[T]) -> None: ...
    def add_model(self, obj: T) -> None: ...
    def update_model(self, obj: T, field: ColumnInfo, value: Any) -> None: ...
    def find(self, column_name: str, value: str) -> T | None: ...

class IndexFieldCache(dict[str, dict[str, list[T]]]):
    model: Incomplete
    def __init__(self, model: type[T]) -> None: ...
    def add_model(self, obj: T) -> None: ...
    def update_model(self, obj: T, field: ColumnInfo, value: Any) -> None: ...
    def filter(self, **kwargs: Any) -> list[T]: ...
