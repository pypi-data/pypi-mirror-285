# coding: utf-8

"""
    Data Repository API

    <details><summary>This document defines the REST API for the Terra Data Repository.</summary> <p> **Status: design in progress** There are a few top-level endpoints (besides some used by swagger):  * / - generated by swagger: swagger API page that provides this documentation and a live UI for submitting REST requests  * /status - provides the operational status of the service  * /configuration - provides the basic configuration and information about the service  * /api - is the authenticated and authorized Data Repository API  * /ga4gh/drs/v1 - is a transcription of the Data Repository Service API  The API endpoints are organized by interface. Each interface is separately versioned. <p> **Notes on Naming** <p> All of the reference items are suffixed with \\\"Model\\\". Those names are used as the class names in the generated Java code. It is helpful to distinguish these model classes from other related classes, like the DAO classes and the operation classes. </details>   # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from data_repo_client.configuration import Configuration


class SnapshotBuilderSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'domain_options': 'list[SnapshotBuilderDomainOption]',
        'program_data_options': 'list[SnapshotBuilderProgramDataOption]',
        'feature_value_groups': 'list[SnapshotBuilderFeatureValueGroup]',
        'dataset_concept_sets': 'list[SnapshotBuilderDatasetConceptSet]'
    }

    attribute_map = {
        'domain_options': 'domainOptions',
        'program_data_options': 'programDataOptions',
        'feature_value_groups': 'featureValueGroups',
        'dataset_concept_sets': 'datasetConceptSets'
    }

    def __init__(self, domain_options=None, program_data_options=None, feature_value_groups=None, dataset_concept_sets=None, local_vars_configuration=None):  # noqa: E501
        """SnapshotBuilderSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._domain_options = None
        self._program_data_options = None
        self._feature_value_groups = None
        self._dataset_concept_sets = None
        self.discriminator = None

        self.domain_options = domain_options
        self.program_data_options = program_data_options
        self.feature_value_groups = feature_value_groups
        self.dataset_concept_sets = dataset_concept_sets

    @property
    def domain_options(self):
        """Gets the domain_options of this SnapshotBuilderSettings.  # noqa: E501


        :return: The domain_options of this SnapshotBuilderSettings.  # noqa: E501
        :rtype: list[SnapshotBuilderDomainOption]
        """
        return self._domain_options

    @domain_options.setter
    def domain_options(self, domain_options):
        """Sets the domain_options of this SnapshotBuilderSettings.


        :param domain_options: The domain_options of this SnapshotBuilderSettings.  # noqa: E501
        :type: list[SnapshotBuilderDomainOption]
        """
        if self.local_vars_configuration.client_side_validation and domain_options is None:  # noqa: E501
            raise ValueError("Invalid value for `domain_options`, must not be `None`")  # noqa: E501

        self._domain_options = domain_options

    @property
    def program_data_options(self):
        """Gets the program_data_options of this SnapshotBuilderSettings.  # noqa: E501


        :return: The program_data_options of this SnapshotBuilderSettings.  # noqa: E501
        :rtype: list[SnapshotBuilderProgramDataOption]
        """
        return self._program_data_options

    @program_data_options.setter
    def program_data_options(self, program_data_options):
        """Sets the program_data_options of this SnapshotBuilderSettings.


        :param program_data_options: The program_data_options of this SnapshotBuilderSettings.  # noqa: E501
        :type: list[SnapshotBuilderProgramDataOption]
        """
        if self.local_vars_configuration.client_side_validation and program_data_options is None:  # noqa: E501
            raise ValueError("Invalid value for `program_data_options`, must not be `None`")  # noqa: E501

        self._program_data_options = program_data_options

    @property
    def feature_value_groups(self):
        """Gets the feature_value_groups of this SnapshotBuilderSettings.  # noqa: E501


        :return: The feature_value_groups of this SnapshotBuilderSettings.  # noqa: E501
        :rtype: list[SnapshotBuilderFeatureValueGroup]
        """
        return self._feature_value_groups

    @feature_value_groups.setter
    def feature_value_groups(self, feature_value_groups):
        """Sets the feature_value_groups of this SnapshotBuilderSettings.


        :param feature_value_groups: The feature_value_groups of this SnapshotBuilderSettings.  # noqa: E501
        :type: list[SnapshotBuilderFeatureValueGroup]
        """
        if self.local_vars_configuration.client_side_validation and feature_value_groups is None:  # noqa: E501
            raise ValueError("Invalid value for `feature_value_groups`, must not be `None`")  # noqa: E501

        self._feature_value_groups = feature_value_groups

    @property
    def dataset_concept_sets(self):
        """Gets the dataset_concept_sets of this SnapshotBuilderSettings.  # noqa: E501


        :return: The dataset_concept_sets of this SnapshotBuilderSettings.  # noqa: E501
        :rtype: list[SnapshotBuilderDatasetConceptSet]
        """
        return self._dataset_concept_sets

    @dataset_concept_sets.setter
    def dataset_concept_sets(self, dataset_concept_sets):
        """Sets the dataset_concept_sets of this SnapshotBuilderSettings.


        :param dataset_concept_sets: The dataset_concept_sets of this SnapshotBuilderSettings.  # noqa: E501
        :type: list[SnapshotBuilderDatasetConceptSet]
        """
        if self.local_vars_configuration.client_side_validation and dataset_concept_sets is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_concept_sets`, must not be `None`")  # noqa: E501

        self._dataset_concept_sets = dataset_concept_sets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotBuilderSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SnapshotBuilderSettings):
            return True

        return self.to_dict() != other.to_dict()
