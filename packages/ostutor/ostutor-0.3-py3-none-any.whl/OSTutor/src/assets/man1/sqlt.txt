
SQLT(1p)              User Contributed Perl Documentation             SQLT(1p)

NAME
       sqlt - convert SQL schema using SQL::Translator

SYNOPSIS
       For help:

         sqlt -h|--help

       For a list of all parsers and producers:

         sqlt -l|--list

       To translate a schema:

         sqlt -f|--from|--parser MySQL
              -t|--to|--producer Oracle
              [options]
              file [file2 ...]

         General Options:

           -d|--debug         Print debug info
           -v|--validate      Validate the schema
           --version          Show the version of SQL::Translator
           --trace            Print parser trace info
           --show-warnings    Print warnings to STDERR

         General Parser Options:

           --skip             Comma-separated list of tables to skip (only implemented in some parsers)
           --ignore_opts      Comma-separated list of table options to ignore

         DBI Parser Options:

           --dsn              DSN for connecting to database
                              (see also --use-same-auth below)
           --db-user          Database user
           --db-password      Database password

         xSV Parser Options:

           --fs               The field separator
           --rs               The record separator
           --no-trim          Don't trim whitespace on fields
           --no-scan          Don't scan fields for data types and sizes

         MySQL Parser Options:

           --mysql-parser-version  Target MySQL parser version for dealing with
                                     /*! comments; default = 30000

         MySQL Producer Options:

           --mysql-version  MySQL server version

         General Producer Options

           --producer-db-user   Database user for producer
           --producer-db-pass   Database password for producer
           --producer-dsn       DSN for producer
           --use-same-auth      Use these DSN, user, password for producer output

         DB Producer Options:

           --add-drop-table   Add 'DROP TABLE' statements before creates
           --quote-table-names  Quote all table names in statements
           --quote-field-names  Qjuote all field names in statements
           --no-comments      Don't include comments in SQL output

         PostgreSQL Producer Options:

           --postgres-version   PostgreSQL server version

         Diagram Producer Options:

           --imap-file        Filename to put image map data
           --imap-url         URL to use for image map

         Dumper Producer Options:

           --skip             Comma-separated list of tables to skip
           --skiplike         Regex for tables to skip
           --add-truncate     Add "TRUNCATE TABLE" statements for each table

         HTML/POD Producer Options:

           --pretty           Use CGI::Pretty for the output
           --title            Title of schema

         TTSchema Producer Options:

           --template             The path to the template
           --tt-var var=value     Pass extra variables to the template
           --tt-conf option=value Pass extra config options to Template

         XML-SQLFairy Producer Options:

           --add-prefix       Use an explicit namespace prefix of 'sqlf:'
           --prefix=<p>       Use the namespace prefix given as argument.
           --no-newlines      Write the XML as a single line.
           --indent=<n>       Use <n> characters of whitespace to indent the XML.

         ClassDBI Producer Options:

           --package          Base package name for Class::DBI modules.

DESCRIPTION
       This script is part of the SQL Fairy project.  It will try to convert
       any source file for which it has a grammar into any format for which it
       has a producer.

       If using "show-warnings," be sure to redirect STDERR to a separate
       file.  In bash, you could do this:

           $ sql_translator.pl -f MySQL -t PostgreSQL --show-warnings \
              file.sql 1>out 2>err

       You can specify a parser or producer located in any module that Perl
       knows about, allowing you to easily substitute your own.

AUTHOR
       Ken Youens-Clark <kclark@cpan.org>, darren chamberlain
       <darren@cpan.org>.

SEE ALSO
       SQL::Translator, <http://sqlfairy.sourceforge.net>.

perl v5.30.0                      2019-11-14                          SQLT(1p)