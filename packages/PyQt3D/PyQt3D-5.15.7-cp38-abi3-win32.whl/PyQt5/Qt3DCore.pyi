# The PEP 484 type hints stub file for the Qt3DCore module.
#
# Generated by SIP 6.8.6
#
# Copyright (c) 2024 Riverbank Computing Limited <info@riverbankcomputing.com>
# 
# This file is part of PyQt3D.
# 
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
# 
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
# 
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


import typing

import PyQt5.sip

from PyQt5 import QtCore
from PyQt5 import QtGui

# Support for QDate, QDateTime and QTime.
import datetime

# Convenient type aliases.
PYQT_SIGNAL = typing.Union[QtCore.pyqtSignal, QtCore.pyqtBoundSignal]
PYQT_SLOT = typing.Union[typing.Callable[..., Any], QtCore.pyqtBoundSignal]

# Convenient aliases for complicated OpenGL types.
PYQT_OPENGL_ARRAY = typing.Union[typing.Sequence[int], typing.Sequence[float],
        PyQt5.sip.Buffer, None]
PYQT_OPENGL_BOUND_ARRAY = typing.Union[typing.Sequence[int],
        typing.Sequence[float], PyQt5.sip.Buffer, int, None]


class ChangeFlag(int):
    NodeCreated = ... # type: ChangeFlag
    NodeDeleted = ... # type: ChangeFlag
    PropertyUpdated = ... # type: ChangeFlag
    PropertyValueAdded = ... # type: ChangeFlag
    PropertyValueRemoved = ... # type: ChangeFlag
    ComponentAdded = ... # type: ChangeFlag
    ComponentRemoved = ... # type: ChangeFlag
    CommandRequested = ... # type: ChangeFlag
    CallbackTriggered = ... # type: ChangeFlag
    AllChanges = ... # type: ChangeFlag


class QAbstractAspect(QtCore.QObject):

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def unregisterBackendType(self, a0: QtCore.QMetaObject) -> None: ...
    @typing.overload
    def registerBackendType(self, a0: QtCore.QMetaObject, functor: 'QBackendNodeMapper') -> None: ...
    @typing.overload
    def registerBackendType(self, obj: QtCore.QMetaObject, functor: 'QBackendNodeMapper', supportsSyncing: bool) -> None: ...
    def rootEntityId(self) -> 'QNodeId': ...


class QAspectEngine(QtCore.QObject):

    class RunMode(int):
        Manual = ... # type: QAspectEngine.RunMode
        Automatic = ... # type: QAspectEngine.RunMode

    def __init__(self, parent: typing.Optional[QtCore.QObject] = ...) -> None: ...

    def processFrame(self) -> None: ...
    def runMode(self) -> 'QAspectEngine.RunMode': ...
    def setRunMode(self, mode: 'QAspectEngine.RunMode') -> None: ...
    def executeCommand(self, command: typing.Optional[str]) -> typing.Any: ...
    def aspects(self) -> typing.List['QAbstractAspect']: ...
    @typing.overload
    def unregisterAspect(self, aspect: typing.Optional['QAbstractAspect']) -> None: ...
    @typing.overload
    def unregisterAspect(self, name: typing.Optional[str]) -> None: ...
    @typing.overload
    def registerAspect(self, aspect: typing.Optional['QAbstractAspect']) -> None: ...
    @typing.overload
    def registerAspect(self, name: typing.Optional[str]) -> None: ...
    def rootEntity(self) -> 'QEntity': ...
    def setRootEntity(self, root: 'QEntity') -> None: ...


class QNode(QtCore.QObject):

    class PropertyTrackingMode(int):
        TrackFinalValues = ... # type: QNode.PropertyTrackingMode
        DontTrackValues = ... # type: QNode.PropertyTrackingMode
        TrackAllValues = ... # type: QNode.PropertyTrackingMode

    def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

    def sendReply(self, command: 'QNodeCommand') -> None: ...
    def sendCommand(self, name: typing.Optional[str], data: typing.Any = ..., replyTo: int = ...) -> int: ...
    defaultPropertyTrackingModeChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setDefaultPropertyTrackingMode(self, mode: 'QNode.PropertyTrackingMode') -> None: ...
    def clearPropertyTrackings(self) -> None: ...
    def clearPropertyTracking(self, propertyName: typing.Optional[str]) -> None: ...
    def propertyTracking(self, propertyName: typing.Optional[str]) -> 'QNode.PropertyTrackingMode': ...
    def setPropertyTracking(self, propertyName: typing.Optional[str], trackMode: 'QNode.PropertyTrackingMode') -> None: ...
    def defaultPropertyTrackingMode(self) -> 'QNode.PropertyTrackingMode': ...
    def sceneChangeEvent(self, change: 'QSceneChange') -> None: ...
    def notifyObservers(self, change: 'QSceneChange') -> None: ...
    nodeDestroyed: typing.ClassVar[QtCore.pyqtSignal]
    enabledChanged: typing.ClassVar[QtCore.pyqtSignal]
    parentChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setEnabled(self, isEnabled: bool) -> None: ...
    def setParent(self, parent: typing.Optional['QNode']) -> None: ...
    def isEnabled(self) -> bool: ...
    def childNodes(self) -> typing.List['QNode']: ...
    def blockNotifications(self, block: bool) -> bool: ...
    def notificationsBlocked(self) -> bool: ...
    def parentNode(self) -> typing.Optional['QNode']: ...
    def id(self) -> 'QNodeId': ...


class QAbstractSkeleton('QNode'):

    def sceneChangeEvent(self, change: 'QSceneChange') -> None: ...
    jointCountChanged: typing.ClassVar[QtCore.pyqtSignal]
    def jointCount(self) -> int: ...


class QComponent('QNode'):

    def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

    removedFromEntity: typing.ClassVar[QtCore.pyqtSignal]
    addedToEntity: typing.ClassVar[QtCore.pyqtSignal]
    shareableChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setShareable(self, isShareable: bool) -> None: ...
    def entities(self) -> typing.List['QEntity']: ...
    def isShareable(self) -> bool: ...


class QArmature('QComponent'):

    def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

    skeletonChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setSkeleton(self, skeleton: typing.Optional['QAbstractSkeleton']) -> None: ...
    def skeleton(self) -> typing.Optional['QAbstractSkeleton']: ...


class QBackendNodeMapper(PyQt5.sipsimplewrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'QBackendNodeMapper') -> None: ...

    def destroy(self, id: 'QNodeId') -> None: ...
    def get(self, id: 'QNodeId') -> typing.Optional['QBackendNode']: ...
    def create(self, change: 'QNodeCreatedChangeBase') -> typing.Optional['QBackendNode']: ...


class QBackendNode(PyQt5.sipsimplewrapper):

    class Mode(int):
        ReadOnly = ... # type: QBackendNode.Mode
        ReadWrite = ... # type: QBackendNode.Mode

    def __init__(self, mode: 'QBackendNode.Mode' = ...) -> None: ...

    def sendReply(self, command: 'QNodeCommand') -> None: ...
    def sendCommand(self, name: typing.Optional[str], data: typing.Any, replyTo: int = ...) -> int: ...
    def sceneChangeEvent(self, e: 'QSceneChange') -> None: ...
    def notifyObservers(self, e: 'QSceneChange') -> None: ...
    def mode(self) -> 'QBackendNode.Mode': ...
    def isEnabled(self) -> bool: ...
    def setEnabled(self, enabled: bool) -> None: ...
    def peerId(self) -> 'QNodeId': ...


class QSceneChange(PyQt5.sipsimplewrapper):

    class DeliveryFlag(int):
        BackendNodes = ... # type: QSceneChange.DeliveryFlag
        Nodes = ... # type: QSceneChange.DeliveryFlag
        DeliverToAll = ... # type: QSceneChange.DeliveryFlag

    class DeliveryFlags(PyQt5.sipsimplewrapper):

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, f: typing.Union['QSceneChange.DeliveryFlags', 'QSceneChange.DeliveryFlag']) -> None: ...

        def __hash__(self) -> int: ...
        def __bool__(self) -> int: ...
        def __ne__(self, other: object): ...
        def __eq__(self, other: object): ...
        def __ixor__(self, f: typing.Union['QSceneChange.DeliveryFlags', 'QSceneChange.DeliveryFlag']) -> 'QSceneChange.DeliveryFlags': ...
        def __xor__(self, f: typing.Union['QSceneChange.DeliveryFlags', 'QSceneChange.DeliveryFlag']) -> 'QSceneChange.DeliveryFlags': ...
        def __ior__(self, f: typing.Union['QSceneChange.DeliveryFlags', 'QSceneChange.DeliveryFlag']) -> 'QSceneChange.DeliveryFlags': ...
        def __or__(self, f: typing.Union['QSceneChange.DeliveryFlags', 'QSceneChange.DeliveryFlag']) -> 'QSceneChange.DeliveryFlags': ...
        def __iand__(self, f: typing.Union['QSceneChange.DeliveryFlags', 'QSceneChange.DeliveryFlag']) -> 'QSceneChange.DeliveryFlags': ...
        def __and__(self, f: typing.Union['QSceneChange.DeliveryFlags', 'QSceneChange.DeliveryFlag']) -> 'QSceneChange.DeliveryFlags': ...
        def __invert__(self) -> 'QSceneChange.DeliveryFlags': ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...

    def __init__(self, type: 'ChangeFlag', subjectId: 'QNodeId') -> None: ...

    def subjectId(self) -> 'QNodeId': ...
    def deliveryFlags(self) -> 'QSceneChange.DeliveryFlags': ...
    def setDeliveryFlags(self, flags: typing.Union['QSceneChange.DeliveryFlags', 'QSceneChange.DeliveryFlag']) -> None: ...
    def type(self) -> 'ChangeFlag': ...


class QComponentAddedChange('QSceneChange'):

    @typing.overload
    def __init__(self, entity: typing.Optional['QEntity'], component: typing.Optional['QComponent']) -> None: ...
    @typing.overload
    def __init__(self, component: typing.Optional['QComponent'], entity: typing.Optional['QEntity']) -> None: ...

    def componentMetaObject(self) -> typing.Optional[QtCore.QMetaObject]: ...
    def componentId(self) -> 'QNodeId': ...
    def entityId(self) -> 'QNodeId': ...


class QComponentRemovedChange('QSceneChange'):

    @typing.overload
    def __init__(self, entity: typing.Optional['QEntity'], component: typing.Optional['QComponent']) -> None: ...
    @typing.overload
    def __init__(self, component: typing.Optional['QComponent'], entity: typing.Optional['QEntity']) -> None: ...

    def componentMetaObject(self) -> typing.Optional[QtCore.QMetaObject]: ...
    def componentId(self) -> 'QNodeId': ...
    def entityId(self) -> 'QNodeId': ...


class QPropertyUpdatedChangeBase('QSceneChange'):

    def __init__(self, subjectId: 'QNodeId') -> None: ...


class QDynamicPropertyUpdatedChange('QPropertyUpdatedChangeBase'):

    def __init__(self, subjectId: 'QNodeId') -> None: ...

    def setValue(self, value: typing.Any) -> None: ...
    def value(self) -> typing.Any: ...
    def setPropertyName(self, name: typing.Union[QtCore.QByteArray, bytes, bytearray]) -> None: ...
    def propertyName(self) -> QtCore.QByteArray: ...


class QEntity('QNode'):

    def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

    def parentEntity(self) -> typing.Optional['QEntity']: ...
    def removeComponent(self, comp: typing.Optional['QComponent']) -> None: ...
    def addComponent(self, comp: typing.Optional['QComponent']) -> None: ...
    def components(self) -> typing.List['QComponent']: ...


class QJoint('QNode'):

    def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

    nameChanged: typing.ClassVar[QtCore.pyqtSignal]
    rotationZChanged: typing.ClassVar[QtCore.pyqtSignal]
    rotationYChanged: typing.ClassVar[QtCore.pyqtSignal]
    rotationXChanged: typing.ClassVar[QtCore.pyqtSignal]
    inverseBindMatrixChanged: typing.ClassVar[QtCore.pyqtSignal]
    translationChanged: typing.ClassVar[QtCore.pyqtSignal]
    rotationChanged: typing.ClassVar[QtCore.pyqtSignal]
    scaleChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setToIdentity(self) -> None: ...
    def setName(self, name: typing.Optional[str]) -> None: ...
    def setRotationZ(self, rotationZ: float) -> None: ...
    def setRotationY(self, rotationY: float) -> None: ...
    def setRotationX(self, rotationX: float) -> None: ...
    def setInverseBindMatrix(self, inverseBindMatrix: QtGui.QMatrix4x4) -> None: ...
    def setTranslation(self, translation: QtGui.QVector3D) -> None: ...
    def setRotation(self, rotation: QtGui.QQuaternion) -> None: ...
    def setScale(self, scale: QtGui.QVector3D) -> None: ...
    def childJoints(self) -> typing.List['QJoint']: ...
    def removeChildJoint(self, joint: typing.Optional['QJoint']) -> None: ...
    def addChildJoint(self, joint: typing.Optional['QJoint']) -> None: ...
    def name(self) -> str: ...
    def rotationZ(self) -> float: ...
    def rotationY(self) -> float: ...
    def rotationX(self) -> float: ...
    def inverseBindMatrix(self) -> QtGui.QMatrix4x4: ...
    def translation(self) -> QtGui.QVector3D: ...
    def rotation(self) -> QtGui.QQuaternion: ...
    def scale(self) -> QtGui.QVector3D: ...


class QNodeIdTypePair(PyQt5.sipsimplewrapper):

    id = ... # type: 'QNodeId'
    type = ... # type: QtCore.QMetaObject

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, _id: 'QNodeId', _type: typing.Optional[QtCore.QMetaObject]) -> None: ...
    @typing.overload
    def __init__(self, a0: 'QNodeIdTypePair') -> None: ...


class QNodeCommand('QSceneChange'):

    def __init__(self, id: 'QNodeId') -> None: ...

    def setReplyToCommandId(self, id: int) -> None: ...
    def inReplyTo(self) -> int: ...
    def setData(self, data: typing.Any) -> None: ...
    def data(self) -> typing.Any: ...
    def setName(self, name: typing.Optional[str]) -> None: ...
    def name(self) -> str: ...
    def commandId(self) -> int: ...


class QNodeCreatedChangeBase('QSceneChange'):

    def __init__(self, node: typing.Optional['QNode']) -> None: ...

    def isNodeEnabled(self) -> bool: ...
    def metaObject(self) -> typing.Optional[QtCore.QMetaObject]: ...
    def parentId(self) -> 'QNodeId': ...


class QNodeDestroyedChange('QSceneChange'):

    def __init__(self, node: typing.Optional['QNode'], subtreeIdsAndTypes: typing.Iterable['QNodeIdTypePair']) -> None: ...

    def subtreeIdsAndTypes(self) -> typing.List['QNodeIdTypePair']: ...


class QNodeId(PyQt5.sipsimplewrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: 'QNodeId') -> None: ...

    def __ge__(self, other: 'QNodeId') -> bool: ...
    def __le__(self, other: 'QNodeId') -> bool: ...
    def __hash__(self) -> int: ...
    def __int__(self) -> bool: ...
    def id(self) -> int: ...
    def __gt__(self, other: 'QNodeId') -> bool: ...
    def __lt__(self, other: 'QNodeId') -> bool: ...
    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def isNull(self) -> bool: ...
    @staticmethod
    def createId() -> 'QNodeId': ...


class QPropertyValueAddedChangeBase('QSceneChange'):

    def __init__(self, subjectId: 'QNodeId') -> None: ...


class QStaticPropertyValueAddedChangeBase('QPropertyValueAddedChangeBase'):

    def __init__(self, subjectId: 'QNodeId') -> None: ...

    def setPropertyName(self, name: typing.Optional[str]) -> None: ...
    def propertyName(self) -> typing.Optional[str]: ...


class QPropertyNodeAddedChange('QStaticPropertyValueAddedChangeBase'):

    def __init__(self, subjectId: 'QNodeId', node: typing.Optional['QNode']) -> None: ...

    def metaObject(self) -> typing.Optional[QtCore.QMetaObject]: ...
    def addedNodeId(self) -> 'QNodeId': ...


class QPropertyValueRemovedChangeBase('QSceneChange'):

    def __init__(self, subjectId: 'QNodeId') -> None: ...


class QStaticPropertyValueRemovedChangeBase('QPropertyValueRemovedChangeBase'):

    def __init__(self, subjectId: 'QNodeId') -> None: ...

    def setPropertyName(self, name: typing.Optional[str]) -> None: ...
    def propertyName(self) -> typing.Optional[str]: ...


class QPropertyNodeRemovedChange('QStaticPropertyValueRemovedChangeBase'):

    def __init__(self, subjectId: 'QNodeId', node: typing.Optional['QNode']) -> None: ...

    def metaObject(self) -> typing.Optional[QtCore.QMetaObject]: ...
    def removedNodeId(self) -> 'QNodeId': ...


class QStaticPropertyUpdatedChangeBase('QPropertyUpdatedChangeBase'):

    def __init__(self, subjectId: 'QNodeId') -> None: ...

    def setPropertyName(self, name: typing.Optional[str]) -> None: ...
    def propertyName(self) -> typing.Optional[str]: ...


class QPropertyUpdatedChange('QStaticPropertyUpdatedChangeBase'):

    def __init__(self, subjectId: 'QNodeId') -> None: ...

    def setValue(self, value: typing.Any) -> None: ...
    def value(self) -> typing.Any: ...


class QPropertyValueAddedChange('QStaticPropertyValueAddedChangeBase'):

    def __init__(self, subjectId: 'QNodeId') -> None: ...

    def addedValue(self) -> typing.Any: ...
    def setAddedValue(self, value: typing.Any) -> None: ...


class QPropertyValueRemovedChange('QStaticPropertyValueRemovedChangeBase'):

    def __init__(self, subjectId: 'QNodeId') -> None: ...

    def removedValue(self) -> typing.Any: ...
    def setRemovedValue(self, value: typing.Any) -> None: ...


class ChangeFlags(PyQt5.sipsimplewrapper):

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, f: typing.Union['ChangeFlags', 'ChangeFlag']) -> None: ...

    def __hash__(self) -> int: ...
    def __bool__(self) -> int: ...
    def __ne__(self, other: object): ...
    def __eq__(self, other: object): ...
    def __ixor__(self, f: typing.Union['ChangeFlags', 'ChangeFlag']) -> 'ChangeFlags': ...
    def __xor__(self, f: typing.Union['ChangeFlags', 'ChangeFlag']) -> 'ChangeFlags': ...
    def __ior__(self, f: typing.Union['ChangeFlags', 'ChangeFlag']) -> 'ChangeFlags': ...
    def __or__(self, f: typing.Union['ChangeFlags', 'ChangeFlag']) -> 'ChangeFlags': ...
    def __iand__(self, f: typing.Union['ChangeFlags', 'ChangeFlag']) -> 'ChangeFlags': ...
    def __and__(self, f: typing.Union['ChangeFlags', 'ChangeFlag']) -> 'ChangeFlags': ...
    def __invert__(self) -> 'ChangeFlags': ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...


class QSkeleton('QAbstractSkeleton'):

    def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

    rootJointChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setRootJoint(self, rootJoint: typing.Optional['QJoint']) -> None: ...
    def rootJoint(self) -> typing.Optional['QJoint']: ...


class QSkeletonLoader('QAbstractSkeleton'):

    class Status(int):
        NotReady = ... # type: QSkeletonLoader.Status
        Ready = ... # type: QSkeletonLoader.Status
        Error = ... # type: QSkeletonLoader.Status

    @typing.overload
    def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...
    @typing.overload
    def __init__(self, source: QtCore.QUrl, parent: typing.Optional['QNode'] = ...) -> None: ...

    def sceneChangeEvent(self, change: 'QSceneChange') -> None: ...
    rootJointChanged: typing.ClassVar[QtCore.pyqtSignal]
    createJointsEnabledChanged: typing.ClassVar[QtCore.pyqtSignal]
    statusChanged: typing.ClassVar[QtCore.pyqtSignal]
    sourceChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setCreateJointsEnabled(self, enabled: bool) -> None: ...
    def setSource(self, source: QtCore.QUrl) -> None: ...
    def rootJoint(self) -> typing.Optional['QJoint']: ...
    def isCreateJointsEnabled(self) -> bool: ...
    def status(self) -> 'QSkeletonLoader.Status': ...
    def source(self) -> QtCore.QUrl: ...


class QTransform('QComponent'):

    def __init__(self, parent: typing.Optional['QNode'] = ...) -> None: ...

    def sceneChangeEvent(self, change: 'QSceneChange') -> None: ...
    worldMatrixChanged: typing.ClassVar[QtCore.pyqtSignal]
    def worldMatrix(self) -> QtGui.QMatrix4x4: ...
    rotationZChanged: typing.ClassVar[QtCore.pyqtSignal]
    rotationYChanged: typing.ClassVar[QtCore.pyqtSignal]
    rotationXChanged: typing.ClassVar[QtCore.pyqtSignal]
    matrixChanged: typing.ClassVar[QtCore.pyqtSignal]
    translationChanged: typing.ClassVar[QtCore.pyqtSignal]
    rotationChanged: typing.ClassVar[QtCore.pyqtSignal]
    scale3DChanged: typing.ClassVar[QtCore.pyqtSignal]
    scaleChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setRotationZ(self, rotationZ: float) -> None: ...
    def setRotationY(self, rotationY: float) -> None: ...
    def setRotationX(self, rotationX: float) -> None: ...
    def setMatrix(self, matrix: QtGui.QMatrix4x4) -> None: ...
    def setTranslation(self, translation: QtGui.QVector3D) -> None: ...
    def setRotation(self, rotation: QtGui.QQuaternion) -> None: ...
    def setScale3D(self, scale: QtGui.QVector3D) -> None: ...
    def setScale(self, scale: float) -> None: ...
    def rotationZ(self) -> float: ...
    def rotationY(self) -> float: ...
    def rotationX(self) -> float: ...
    def matrix(self) -> QtGui.QMatrix4x4: ...
    @staticmethod
    def rotateFromAxes(xAxis: QtGui.QVector3D, yAxis: QtGui.QVector3D, zAxis: QtGui.QVector3D) -> QtGui.QMatrix4x4: ...
    @staticmethod
    def rotateAround(point: QtGui.QVector3D, angle: float, axis: QtGui.QVector3D) -> QtGui.QMatrix4x4: ...
    @typing.overload
    @staticmethod
    def fromEulerAngles(eulerAngles: QtGui.QVector3D) -> QtGui.QQuaternion: ...
    @typing.overload
    @staticmethod
    def fromEulerAngles(pitch: float, yaw: float, roll: float) -> QtGui.QQuaternion: ...
    @typing.overload
    @staticmethod
    def fromAxesAndAngles(axis1: QtGui.QVector3D, angle1: float, axis2: QtGui.QVector3D, angle2: float) -> QtGui.QQuaternion: ...
    @typing.overload
    @staticmethod
    def fromAxesAndAngles(axis1: QtGui.QVector3D, angle1: float, axis2: QtGui.QVector3D, angle2: float, axis3: QtGui.QVector3D, angle3: float) -> QtGui.QQuaternion: ...
    @typing.overload
    @staticmethod
    def fromAxisAndAngle(axis: QtGui.QVector3D, angle: float) -> QtGui.QQuaternion: ...
    @typing.overload
    @staticmethod
    def fromAxisAndAngle(x: float, y: float, z: float, angle: float) -> QtGui.QQuaternion: ...
    @staticmethod
    def fromAxes(xAxis: QtGui.QVector3D, yAxis: QtGui.QVector3D, zAxis: QtGui.QVector3D) -> QtGui.QQuaternion: ...
    def translation(self) -> QtGui.QVector3D: ...
    def rotation(self) -> QtGui.QQuaternion: ...
    def scale3D(self) -> QtGui.QVector3D: ...
    def scale(self) -> float: ...


def qIdForNode(node: typing.Optional['QNode']) -> 'QNodeId': ...
