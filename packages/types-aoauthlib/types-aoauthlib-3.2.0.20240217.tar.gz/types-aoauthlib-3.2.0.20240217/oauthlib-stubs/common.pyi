from . import get_debug as get_debug
from _typeshed import Incomplete

UNICODE_ASCII_CHARACTER_SET: str
CLIENT_ID_CHARACTER_SET: str
SANITIZE_PATTERN: Incomplete
INVALID_HEX_PATTERN: Incomplete
always_safe: str
log: Incomplete

def quote(s, safe: bytes = b'/'): ...
def unquote(s): ...
def urlencode(params): ...
def encode_params_utf8(params): ...
def decode_params_utf8(params): ...

urlencoded: Incomplete

def urldecode(query): ...
def extract_params(raw): ...
def generate_nonce(): ...
def generate_timestamp(): ...
def generate_token(length: int = 30, chars=...): ...
def generate_signed_token(private_pem, request): ...
def verify_signed_token(public_pem, token): ...
def generate_client_id(length: int = 30, chars=...): ...
def add_params_to_qs(query, params): ...
def add_params_to_uri(uri, params, fragment: bool = False): ...
def safe_string_equals(a, b): ...
def to_unicode(data, encoding: str = 'UTF-8'): ...

class CaseInsensitiveDict(dict):
    proxy: Incomplete
    def __init__(self, data) -> None: ...
    def __contains__(self, k) -> bool: ...
    def __delitem__(self, k) -> None: ...
    def __getitem__(self, k): ...
    def get(self, k, default: Incomplete | None = None): ...
    def __setitem__(self, k, v) -> None: ...
    def update(self, *args, **kwargs) -> None: ...

class Request:
    uri: Incomplete
    http_method: Incomplete
    headers: Incomplete
    body: Incomplete
    decoded_body: Incomplete
    oauth_params: Incomplete
    validator_log: Incomplete
    def __init__(self, uri, http_method: str = 'GET', body: Incomplete | None = None, headers: Incomplete | None = None, encoding: str = 'utf-8') -> None: ...
    def __getattr__(self, name): ...
    @property
    def uri_query(self): ...
    @property
    def uri_query_params(self): ...
    @property
    def duplicate_params(self): ...
