from .. import grant_types as grant_types, utils as utils
from .authorization import AuthorizationEndpoint as AuthorizationEndpoint
from .base import BaseEndpoint as BaseEndpoint, catch_errors_and_unavailability as catch_errors_and_unavailability
from .introspect import IntrospectEndpoint as IntrospectEndpoint
from .revocation import RevocationEndpoint as RevocationEndpoint
from .token import TokenEndpoint as TokenEndpoint
from _typeshed import Incomplete

log: Incomplete

class MetadataEndpoint(BaseEndpoint):
    raise_errors: Incomplete
    endpoints: Incomplete
    initial_claims: Incomplete
    claims: Incomplete
    def __init__(self, endpoints, claims={}, raise_errors: bool = True) -> None: ...
    async def create_metadata_response(self, uri, http_method: str = 'GET', body: Incomplete | None = None, headers: Incomplete | None = None): ...
    def validate_metadata(self, array, key, is_required: bool = False, is_list: bool = False, is_url: bool = False, is_issuer: bool = False) -> None: ...
    def validate_metadata_token(self, claims, endpoint) -> None: ...
    def validate_metadata_authorization(self, claims, endpoint): ...
    def validate_metadata_revocation(self, claims, endpoint) -> None: ...
    def validate_metadata_introspection(self, claims, endpoint) -> None: ...
    def validate_metadata_server(self): ...
