from ..request_validator import RequestValidator as RequestValidator
from ..utils import is_secure_transport as is_secure_transport
from _typeshed import Incomplete
from oauthlib.common import add_params_to_uri as add_params_to_uri
from oauthlib.oauth2.rfc6749 import errors as errors, utils as utils
from oauthlib.uri_validate import is_absolute_uri as is_absolute_uri

log: Incomplete

class ValidatorsContainer:
    pre_auth: Incomplete
    post_auth: Incomplete
    pre_token: Incomplete
    post_token: Incomplete
    def __init__(self, post_auth, post_token, pre_auth, pre_token) -> None: ...
    @property
    def all_pre(self): ...
    @property
    def all_post(self): ...

class GrantTypeBase:
    error_uri: Incomplete
    request_validator: Incomplete
    default_response_mode: str
    refresh_token: bool
    response_types: Incomplete
    def __init__(self, request_validator: Incomplete | None = None, **kwargs) -> None: ...
    def register_response_type(self, response_type) -> None: ...
    def register_code_modifier(self, modifier) -> None: ...
    def register_token_modifier(self, modifier) -> None: ...
    async def create_authorization_response(self, request, token_handler) -> None: ...
    async def create_token_response(self, request, token_handler) -> None: ...
    async def add_token(self, token, token_handler, request): ...
    async def validate_grant_type(self, request) -> None: ...
    async def validate_scopes(self, request) -> None: ...
    def prepare_authorization_response(self, request, token, headers, body, status): ...
