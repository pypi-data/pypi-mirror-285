import random
import os
from azure.identity import AzureCliCredential
from azure.mgmt.resource import ResourceManagementClient
from azure.mgmt.web import WebSiteManagementClient
from msrest.universal_http import requests

import requests

token="",

headers={"Authorization",f"Bearer {token}"}

def deploy1():
    # Acquire a credential object using CLI-based authentication.
    credential = AzureCliCredential()
    # Retrieve subscription ID from environment variable
    subscription_id = os.environ["AZURE_SUBSCRIPTION_ID"]
    # Constants we need in multiple places: the resource group name and the region
    # in which we provision resources. You can change these values however you want.
    RESOURCE_GROUP_NAME = 'rgdemo-111'
    LOCATION = "southeastasia"
    WEB_APP_NAME = "mywebapp111"
    SERVICE_PLAN_NAME = 'PythonAzureExample-WebApp-plan'

    # Step 1: Provision the resource group.
    resource_client = ResourceManagementClient(credential, subscription_id)

    rg_result = resource_client.resource_groups.create_or_update(RESOURCE_GROUP_NAME,
                                                                 {"location": LOCATION})

    print(f"成功创建或者更新资源组： {rg_result.name}")

    # For details on the previous code, see Example: Provision a resource group
    # at https://docs.microsoft.com/azure/developer/python/azure-sdk-example-resource-group

    # Step 2: Provision the App Service plan, which defines the underlying VM for the web app.

    # Names for the App Service plan and App Service. We use a random number with the
    # latter to create a reasonably unique name. If you've already provisioned a
    # web app and need to re-run the script, set the WEB_APP_NAME environment
    # variable to that name instead.

    WEB_APP_NAME = os.environ.get(
        "WEB_APP_NAME", f"PythonAzureExample-WebApp-{random.randint(1,100000):05}")

    # Obtain the client object
    print("获取 client object")
    app_service_client = WebSiteManagementClient(credential, subscription_id)

    print(app_service_client)

    r = requests.put(f"https://management.azure.com/subscriptions/{subscription_id}/resourceGroups/{RESOURCE_GROUP_NAME}/providers/Microsoft.Web/serverfarms/{SERVICE_PLAN_NAME}?api-version=2019-08-01",
                 data={
                     "location": LOCATION,
                     "reserved": True,
                     "sku": {"name": "F1"}
                 },
                 headers=headers
                 )

    print(r)

    # Provision the plan; Linux is the default
    # poller = app_service_client.app_service_plans.begin_create_or_update(RESOURCE_GROUP_NAME,
    #     SERVICE_PLAN_NAME,
    #     {
    #         "location": LOCATION,
    #         "reserved": True,
    #         "sku" : {"name" : "F1"}
    #     }
    # )

    plan_result = poller.result()

    print(f"Provisioned App Service plan {plan_result.name}")

    # Step 3: With the plan in place, provision the web app itself, which is the process that can host
    # whatever code we want to deploy to it.

    poller = app_service_client.web_apps.begin_create_or_update(RESOURCE_GROUP_NAME,
                                                                WEB_APP_NAME,
                                                                {
                                                                    "location": LOCATION,
                                                                    "server_farm_id": plan_result.id,
                                                                    "site_config": {
                                                                        "linux_fx_version": "python|3.8"
                                                                    }
                                                                }
                                                                )

    web_app_result = poller.result()

    print(
        f"Provisioned web app {web_app_result.name} at {web_app_result.default_host_name}")

    # Step 4: deploy code from a GitHub repository. For Python code, App Service on Linux runs
    # the code inside a container that makes certain assumptions about the structure of the code.
    # For more information, see How to configure Python apps,
    # https://docs.microsoft.com/azure/app-service/containers/how-to-configure-python.
    #
    # The create_or_update_source_control method doesn't provision a web app. It only sets the
    # source control configuration for the app. In this case we're simply pointing to
    # a GitHub repository.
    #
    # You can call this method again to change the repo.

    REPO_URL = os.environ["REPO_URL"]

    poller = app_service_client.web_apps.begin_create_or_update_source_control(RESOURCE_GROUP_NAME,
                                                                               WEB_APP_NAME,
                                                                               {
                                                                                   "location": "GitHub",
                                                                                   "repo_url": REPO_URL,
                                                                                   "branch": "master"
                                                                               }
                                                                               )
    sc_result = poller.result()
    print(
        f"Set source control on web app to {sc_result.branch} branch of {sc_result.repo_url}")
