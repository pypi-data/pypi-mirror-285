# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_animus_client')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_animus_client')
    _animus_client = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_animus_client', [dirname(__file__)])
        except ImportError:
            import _animus_client
            return _animus_client
        try:
            _mod = imp.load_module('_animus_client', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _animus_client = swig_import_helper()
    del swig_import_helper
else:
    import _animus_client
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def cdata(ptr: 'void *', nelements: 'size_t'=1) -> "SWIGCDATA":
    return _animus_client.cdata(ptr, nelements)
cdata = _animus_client.cdata

def memmove(data: 'void *', indata: 'void const *') -> "void":
    return _animus_client.memmove(data, indata)
memmove = _animus_client.memmove
class _GoString_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _GoString_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _GoString_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _animus_client._GoString__p_set
    __swig_getmethods__["p"] = _animus_client._GoString__p_get
    if _newclass:
        p = _swig_property(_animus_client._GoString__p_get, _animus_client._GoString__p_set)
    __swig_setmethods__["n"] = _animus_client._GoString__n_set
    __swig_getmethods__["n"] = _animus_client._GoString__n_get
    if _newclass:
        n = _swig_property(_animus_client._GoString__n_get, _animus_client._GoString__n_set)

    def __init__(self):
        this = _animus_client.new__GoString_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _animus_client.delete__GoString_
    __del__ = lambda self: None
_GoString__swigregister = _animus_client._GoString__swigregister
_GoString__swigregister(_GoString_)

class ProtoMessageC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProtoMessageC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProtoMessageC, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _animus_client.ProtoMessageC_len_set
    __swig_getmethods__["len"] = _animus_client.ProtoMessageC_len_get
    if _newclass:
        len = _swig_property(_animus_client.ProtoMessageC_len_get, _animus_client.ProtoMessageC_len_set)
    __swig_setmethods__["data"] = _animus_client.ProtoMessageC_data_set
    __swig_getmethods__["data"] = _animus_client.ProtoMessageC_data_get
    if _newclass:
        data = _swig_property(_animus_client.ProtoMessageC_data_get, _animus_client.ProtoMessageC_data_set)

    def __init__(self):
        this = _animus_client.new_ProtoMessageC()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _animus_client.delete_ProtoMessageC
    __del__ = lambda self: None
ProtoMessageC_swigregister = _animus_client.ProtoMessageC_swigregister
ProtoMessageC_swigregister(ProtoMessageC)

class GoInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoInterface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t"] = _animus_client.GoInterface_t_set
    __swig_getmethods__["t"] = _animus_client.GoInterface_t_get
    if _newclass:
        t = _swig_property(_animus_client.GoInterface_t_get, _animus_client.GoInterface_t_set)
    __swig_setmethods__["v"] = _animus_client.GoInterface_v_set
    __swig_getmethods__["v"] = _animus_client.GoInterface_v_get
    if _newclass:
        v = _swig_property(_animus_client.GoInterface_v_get, _animus_client.GoInterface_v_set)

    def __init__(self):
        this = _animus_client.new_GoInterface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _animus_client.delete_GoInterface
    __del__ = lambda self: None
GoInterface_swigregister = _animus_client.GoInterface_swigregister
GoInterface_swigregister(GoInterface)

class GoSlice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoSlice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoSlice, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _animus_client.GoSlice_data_set
    __swig_getmethods__["data"] = _animus_client.GoSlice_data_get
    if _newclass:
        data = _swig_property(_animus_client.GoSlice_data_get, _animus_client.GoSlice_data_set)
    __swig_setmethods__["len"] = _animus_client.GoSlice_len_set
    __swig_getmethods__["len"] = _animus_client.GoSlice_len_get
    if _newclass:
        len = _swig_property(_animus_client.GoSlice_len_get, _animus_client.GoSlice_len_set)
    __swig_setmethods__["cap"] = _animus_client.GoSlice_cap_set
    __swig_getmethods__["cap"] = _animus_client.GoSlice_cap_get
    if _newclass:
        cap = _swig_property(_animus_client.GoSlice_cap_get, _animus_client.GoSlice_cap_set)

    def __init__(self):
        this = _animus_client.new_GoSlice()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _animus_client.delete_GoSlice
    __del__ = lambda self: None
GoSlice_swigregister = _animus_client.GoSlice_swigregister
GoSlice_swigregister(GoSlice)


def VersionGo() -> "char *":
    return _animus_client.VersionGo()
VersionGo = _animus_client.VersionGo

def SetupGo(setupClientProto: 'ProtoMessageC') -> "ProtoMessageC":
    return _animus_client.SetupGo(setupClientProto)
SetupGo = _animus_client.SetupGo

def LoginUserGo(loginProto: 'ProtoMessageC') -> "ProtoMessageC":
    return _animus_client.LoginUserGo(loginProto)
LoginUserGo = _animus_client.LoginUserGo

def GetRobotsGo(getRobotsProto: 'ProtoMessageC') -> "ProtoMessageC":
    return _animus_client.GetRobotsGo(getRobotsProto)
GetRobotsGo = _animus_client.GetRobotsGo

def ConnectGo(chosenRobotProto: 'ProtoMessageC') -> "ProtoMessageC":
    return _animus_client.ConnectGo(chosenRobotProto)
ConnectGo = _animus_client.ConnectGo

def OpenModalityGo(robotIDC: 'char *', modalityProto: 'ProtoMessageC') -> "ProtoMessageC":
    return _animus_client.OpenModalityGo(robotIDC, modalityProto)
OpenModalityGo = _animus_client.OpenModalityGo

def SetModalityGo(robotIDC: 'char *', modalityNameC: 'char *', modalityDataTypeC: 'int', dataSampleC: 'ProtoMessageC') -> "ProtoMessageC":
    return _animus_client.SetModalityGo(robotIDC, modalityNameC, modalityDataTypeC, dataSampleC)
SetModalityGo = _animus_client.SetModalityGo

def GetModalityGo(robotIDC: 'char *', modalityNameC: 'char *', blockingC: 'int') -> "ProtoMessageC":
    return _animus_client.GetModalityGo(robotIDC, modalityNameC, blockingC)
GetModalityGo = _animus_client.GetModalityGo

def UpdateTextureGo(robotIDC: 'char *', imageID: 'int', dataPtr: 'unsigned char *', size: 'int', colorOrder: 'int') -> "ProtoMessageC":
    return _animus_client.UpdateTextureGo(robotIDC, imageID, dataPtr, size, colorOrder)
UpdateTextureGo = _animus_client.UpdateTextureGo

def CloseModalityGo(robotIDC: 'char *', modalityNameC: 'char *') -> "ProtoMessageC":
    return _animus_client.CloseModalityGo(robotIDC, modalityNameC)
CloseModalityGo = _animus_client.CloseModalityGo

def DisconnectGo(robotIDC: 'char *') -> "ProtoMessageC":
    return _animus_client.DisconnectGo(robotIDC)
DisconnectGo = _animus_client.DisconnectGo

def CloseClientInterfaceGo() -> "void":
    return _animus_client.CloseClientInterfaceGo()
CloseClientInterfaceGo = _animus_client.CloseClientInterfaceGo

def Setup(p0: 'char *', p1: 'int') -> "SWIGCDATA":
    return _animus_client.Setup(p0, p1)
Setup = _animus_client.Setup

def LoginUser(p0: 'char *', p1: 'int') -> "SWIGCDATA":
    return _animus_client.LoginUser(p0, p1)
LoginUser = _animus_client.LoginUser

def GetRobots(p0: 'char *', p1: 'int') -> "SWIGCDATA":
    return _animus_client.GetRobots(p0, p1)
GetRobots = _animus_client.GetRobots

def Connect(p0: 'char *', p1: 'int') -> "SWIGCDATA":
    return _animus_client.Connect(p0, p1)
Connect = _animus_client.Connect

def OpenModality(p0: 'char *', p1: 'char *', p2: 'int') -> "SWIGCDATA":
    return _animus_client.OpenModality(p0, p1, p2)
OpenModality = _animus_client.OpenModality

def SetModality(p0: 'char *', p1: 'char *', p2: 'int', p3: 'char *', p4: 'int') -> "SWIGCDATA":
    return _animus_client.SetModality(p0, p1, p2, p3, p4)
SetModality = _animus_client.SetModality

def UpdateTexture(p0: 'char *', p1: 'int', p2: 'char *', p3: 'int', p4: 'int') -> "SWIGCDATA":
    return _animus_client.UpdateTexture(p0, p1, p2, p3, p4)
UpdateTexture = _animus_client.UpdateTexture

def GetModality(p0: 'char *', p1: 'char *', p2: 'int') -> "SWIGCDATA":
    return _animus_client.GetModality(p0, p1, p2)
GetModality = _animus_client.GetModality

def CloseModality(p0: 'char *', p1: 'char *') -> "SWIGCDATA":
    return _animus_client.CloseModality(p0, p1)
CloseModality = _animus_client.CloseModality

def Disconnect(p0: 'char *') -> "SWIGCDATA":
    return _animus_client.Disconnect(p0)
Disconnect = _animus_client.Disconnect
# This file is compatible with both classic and new-style classes.


