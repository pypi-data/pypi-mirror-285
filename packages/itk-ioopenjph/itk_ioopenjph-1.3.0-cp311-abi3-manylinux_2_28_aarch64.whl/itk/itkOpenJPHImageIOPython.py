# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _IOOpenJPHPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkOpenJPHImageIOPython
else:
    import _itkOpenJPHImageIOPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKIOImageBaseBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkArrayPython

def itkOpenJPHImageIO_New():
    return itkOpenJPHImageIO.New()

class itkOpenJPHImageIO(itk.ITKIOImageBaseBasePython.itkImageIOBase):
    r"""Proxy of C++ itkOpenJPHImageIO class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOpenJPHImageIO_Pointer"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkOpenJPHImageIO_Pointer"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_Clone(self)

    @staticmethod
    def GetOpenJPHVersion():
        r"""GetOpenJPHVersion() -> std::string"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_GetOpenJPHVersion()

    @staticmethod
    def GetSIMDLevel():
        r"""GetSIMDLevel() -> int"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_GetSIMDLevel()

    def GetDecompositionLevel(self):
        r"""GetDecompositionLevel(self) -> int"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_GetDecompositionLevel(self)

    def SetDecompositionLevel(self, _arg):
        r"""
        SetDecompositionLevel(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_SetDecompositionLevel(self, _arg)

    def GetDecompositions(self):
        r"""GetDecompositions(self) -> unsigned long"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_GetDecompositions(self)

    def SetDecompositions(self, _arg):
        r"""
        SetDecompositions(self, _arg)

        Parameters
        ----------
        _arg: unsigned long

        """
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_SetDecompositions(self, _arg)

    def GetNotReversible(self):
        r"""GetNotReversible(self) -> bool"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_GetNotReversible(self)

    def SetNotReversible(self, _arg):
        r"""
        SetNotReversible(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_SetNotReversible(self, _arg)

    def NotReversibleOn(self):
        r"""NotReversibleOn(self)"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_NotReversibleOn(self)

    def NotReversibleOff(self):
        r"""NotReversibleOff(self)"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_NotReversibleOff(self)

    def GetQuantizationStep(self):
        r"""GetQuantizationStep(self) -> float"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_GetQuantizationStep(self)

    def SetQuantizationStep(self, _arg):
        r"""
        SetQuantizationStep(self, _arg)

        Parameters
        ----------
        _arg: float

        """
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_SetQuantizationStep(self, _arg)

    def GetProgressionOrder(self):
        r"""GetProgressionOrder(self) -> int"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_GetProgressionOrder(self)

    def SetProgressionOrder(self, _arg):
        r"""
        SetProgressionOrder(self, _arg)

        Parameters
        ----------
        _arg: int

        """
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_SetProgressionOrder(self, _arg)

    def GetTileSize(self):
        r"""GetTileSize(self) -> itkArrayUI"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_GetTileSize(self)

    def SetTileSize(self, _arg):
        r"""
        SetTileSize(self, _arg)

        Parameters
        ----------
        _arg: itkArrayUI

        """
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_SetTileSize(self, _arg)

    def GetTileOffset(self):
        r"""GetTileOffset(self) -> itkArrayUI"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_GetTileOffset(self)

    def SetTileOffset(self, _arg):
        r"""
        SetTileOffset(self, _arg)

        Parameters
        ----------
        _arg: itkArrayUI

        """
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_SetTileOffset(self, _arg)

    def GetBlockDimensions(self):
        r"""GetBlockDimensions(self) -> itkArrayUI"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_GetBlockDimensions(self)

    def SetBlockDimensions(self, _arg):
        r"""
        SetBlockDimensions(self, _arg)

        Parameters
        ----------
        _arg: itkArrayUI

        """
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_SetBlockDimensions(self, _arg)

    def GetUseColorTransform(self):
        r"""GetUseColorTransform(self) -> bool"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_GetUseColorTransform(self)

    def SetUseColorTransform(self, _arg):
        r"""
        SetUseColorTransform(self, _arg)

        Parameters
        ----------
        _arg: bool

        """
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_SetUseColorTransform(self, _arg)

    def UseColorTransformOn(self):
        r"""UseColorTransformOn(self)"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_UseColorTransformOn(self)

    def UseColorTransformOff(self):
        r"""UseColorTransformOff(self)"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_UseColorTransformOff(self)
    __swig_destroy__ = _itkOpenJPHImageIOPython.delete_itkOpenJPHImageIO

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOpenJPHImageIO

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIO_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOpenJPHImageIO

        Create a new object of the class itkOpenJPHImageIO and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOpenJPHImageIO.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOpenJPHImageIO.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOpenJPHImageIO.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOpenJPHImageIO in _itkOpenJPHImageIOPython:
_itkOpenJPHImageIOPython.itkOpenJPHImageIO_swigregister(itkOpenJPHImageIO)

def itkOpenJPHImageIOFactory_New():
    return itkOpenJPHImageIOFactory.New()

class itkOpenJPHImageIOFactory(itk.ITKCommonBasePython.itkObjectFactoryBase):
    r"""Proxy of C++ itkOpenJPHImageIOFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkOpenJPHImageIOFactory_Pointer"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIOFactory___New_orig__()

    @staticmethod
    def RegisterOneFactory():
        r"""RegisterOneFactory()"""
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIOFactory_RegisterOneFactory()
    __swig_destroy__ = _itkOpenJPHImageIOPython.delete_itkOpenJPHImageIOFactory

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkOpenJPHImageIOFactory

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkOpenJPHImageIOPython.itkOpenJPHImageIOFactory_cast(obj)

    def New(*args, **kargs):
        """New() -> itkOpenJPHImageIOFactory

        Create a new object of the class itkOpenJPHImageIOFactory and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkOpenJPHImageIOFactory.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkOpenJPHImageIOFactory.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkOpenJPHImageIOFactory.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkOpenJPHImageIOFactory in _itkOpenJPHImageIOPython:
_itkOpenJPHImageIOPython.itkOpenJPHImageIOFactory_swigregister(itkOpenJPHImageIOFactory)

