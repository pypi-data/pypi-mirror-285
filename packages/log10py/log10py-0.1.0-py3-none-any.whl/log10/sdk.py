"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .completions import Completions
from .feedback import Feedback
from .feedbacktasks import FeedbackTasks
from .sdkconfiguration import SDKConfiguration
from .sessions import Sessions
from .utils.retries import RetryConfig
from log10 import utils
from log10._hooks import SDKHooks
from log10.models import components, internal
from typing import Callable, Dict, Optional, Union

class Log10:
    r"""Log10 Feedback API Spec: Log10 Feedback API Spec"""
    completions: Completions
    r"""Completions"""
    sessions: Sessions
    r"""Sessions"""
    feedback: Feedback
    r"""Feedback"""
    feedback_tasks: FeedbackTasks
    r"""FeedbackTasks"""

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 log10_token: Union[Optional[str], Callable[[], Optional[str]]] = None,
                 x_log10_organization: str = None,
                 server_idx: Optional[int] = None,
                 server_url: Optional[str] = None,
                 url_params: Optional[Dict[str, str]] = None,
                 client: Optional[requests_http.Session] = None,
                 retry_config: Optional[RetryConfig] = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.

        :param log10_token: The log10_token required for authentication
        :type log10_token: Union[Optional[str], Callable[[], Optional[str]]]
        :param x_log10_organization: Configures the x_log10_organization parameter for all supported operations
        :type x_log10_organization: str
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: Dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session
        :param retry_config: The utils.RetryConfig to use globally
        :type retry_config: RetryConfig
        """
        if client is None:
            client = requests_http.Session()

        if callable(log10_token):
            def security():
                return components.Security(log10_token = log10_token())
        else:
            security = components.Security(log10_token = log10_token)

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)
    
        _globals = internal.Globals(
            x_log10_organization=x_log10_organization,
        )

        self.sdk_configuration = SDKConfiguration(
            client,
            _globals,
            security,
            server_url,
            server_idx,
            retry_config=retry_config
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(current_server_url, self.sdk_configuration.client)
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__['_hooks'] = hooks

        self._init_sdks()


    def _init_sdks(self):
        self.completions = Completions(self.sdk_configuration)
        self.sessions = Sessions(self.sdk_configuration)
        self.feedback = Feedback(self.sdk_configuration)
        self.feedback_tasks = FeedbackTasks(self.sdk_configuration)
