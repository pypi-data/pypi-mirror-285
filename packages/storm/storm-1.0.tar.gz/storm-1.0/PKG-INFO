Metadata-Version: 2.1
Name: storm
Version: 1.0
Summary: Storm is an object-relational mapper (ORM) for Python developed at Canonical.
Home-page: https://storm.canonical.com
Download-URL: https://launchpad.net/storm/+download
Author: Gustavo Niemeyer
Author-email: gustavo@niemeyer.net
Maintainer: Storm Developers
Maintainer-email: storm@lists.canonical.com
License: LGPL
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Database
Classifier: Topic :: Database :: Front-Ends
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.6
Description-Content-Type: text/x-rst
License-File: LICENSE
Requires-Dist: packaging>=14.1
Provides-Extra: doc
Requires-Dist: fixtures; extra == "doc"
Requires-Dist: sphinx; extra == "doc"
Requires-Dist: sphinx-epytext; extra == "doc"
Provides-Extra: test
Requires-Dist: fixtures>=1.3.0; extra == "test"
Requires-Dist: mysqlclient; extra == "test"
Requires-Dist: pgbouncer>=0.0.7; extra == "test"
Requires-Dist: postgresfixture; extra == "test"
Requires-Dist: psycopg2>=2.3.0; extra == "test"
Requires-Dist: testresources>=0.2.4; extra == "test"
Requires-Dist: testtools>=0.9.8; extra == "test"
Requires-Dist: timeline>=0.0.2; extra == "test"
Requires-Dist: transaction>=1.0.0; extra == "test"
Requires-Dist: Twisted>=10.0.0; extra == "test"
Requires-Dist: zope.component>=3.8.0; extra == "test"
Requires-Dist: zope.configuration; extra == "test"
Requires-Dist: zope.interface>=4.0.0; extra == "test"
Requires-Dist: zope.security>=3.7.2; extra == "test"

Storm is an Object Relational Mapper for Python developed at
Canonical.  API docs, a manual, and a tutorial are available from:

https://storm.canonical.com/


Introduction
============

The project was in development for more than a year for use in
Canonical projects such as Launchpad and Landscape before being
released as free software on July 9th, 2007.

Design:

 * Clean and lightweight API offers a short learning curve and
   long-term maintainability.
 * Storm is developed in a test-driven manner. An untested line of
   code is considered a bug.
 * Storm needs no special class constructors, nor imperative base
   classes.
 * Storm is well designed (different classes have very clear
   boundaries, with small and clean public APIs).
 * Designed from day one to work both with thin relational
   databases, such as SQLite, and big iron systems like PostgreSQL
   and MySQL.
 * Storm is easy to debug, since its code is written with a KISS
   principle, and thus is easy to understand.
 * Designed from day one to work both at the low end, with trivial
   small databases, and the high end, with applications accessing
   billion row tables and committing to multiple database backends.
 * It's very easy to write and support backends for Storm (current
   backends have around 100 lines of code).

Features:

 * Storm is fast.
 * Storm lets you efficiently access and update large datasets by
   allowing you to formulate complex queries spanning multiple
   tables using Python.
 * Storm allows you to fallback to SQL if needed (or if you just
   prefer), allowing you to mix "old school" code and ORM code
 * Storm handles composed primary keys with ease (no need for
   surrogate keys).
 * Storm doesn't do schema management, and as a result you're free
   to manage the schema as wanted, and creating classes that work
   with Storm is clean and simple.
 * Storm works very well connecting to several databases and using
   the same Python types (or different ones) with all of them.
 * Storm can handle obj.attr = <A SQL expression> assignments, when
   that's really needed (the expression is executed at INSERT/UPDATE
   time).
 * Storm handles relationships between objects even before they were
   added to a database.
 * Storm works well with existing database schemas.
 * Storm will flush changes to the database automatically when
   needed, so that queries made affect recently modified objects.


License
=======

Copyright (C) 2006-2020 Canonical, Ltd.  All contributions must have
copyright assigned to Canonical.

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
02110-1301 USA

On Ubuntu systems, the complete text of the GNU Lesser General
Public Version 2.1 License is in /usr/share/common-licenses/LGPL-2.1


Developing Storm
================

SHORT VERSION:  If you are running ubuntu, or probably debian, the
following should work.  If not, and for reference, the long version
is below.

 $ dev/ubuntu-deps
 $ echo "$PWD/** rwk," | sudo tee /etc/apparmor.d/local/usr.sbin.mysqld >/dev/null
 $ sudo aa-enforce /usr/sbin/mysqld
 $ make develop
 $ make check

LONG VERSION:

The following instructions describe the procedure for setting up a
development environment and running the test suite.

Installing dependencies
-----------------------

The following instructions assume that you're using Ubuntu.  The same procedure
will probably work without changes on a Debian system and with minimal changes
on a non-Debian-based linux distribution.  In order to run the test suite, and
exercise all supported backends, you will need to install MySQL and
PostgreSQL, along with the related Python database drivers:

 $ sudo apt-get install \
       mysql-server \
       postgresql pgbouncer \
       build-essential

These will take a few minutes to download.

The Python dependencies for running tests can be installed with apt-get:

 $ apt-get install \
       python3-fixtures \
       python3-pgbouncer \
       python3-psycopg2 \
       python3-testresources \
       python3-timeline \
       python3-transaction \
       python3-twisted \
       python3-zope.component \
       python3-zope.security

Alternatively, dependencies can be downloaded as eggs into the current
directory with:

 $ make develop

This ensures that all dependencies are available, downloading from
PyPI as appropriate.

Database setup
--------------

Most database setup is done automatically by the test suite.  However,
Ubuntu's default MySQL packaging ships an AppArmor profile that prevents it
from writing to a local data directory.  To allow the test suite to do this,
you will need to grant it access, which is most easily done by adding a line
such as this to /etc/apparmor.d/local/usr.sbin.mysqld:

  /path/to/storm/** rwk,

Then reload the profile:

  $ sudo aa-enforce /usr/sbin/mysqld

Running the tests
-----------------

Finally, its time to run the tests!  Go into the base directory of
the storm branch you want to test, and run:

 $ make check

They'll take a while to run.  All tests should pass: failures mean
there's a problem with your environment or a bug in Storm.
