[project]
name = "eve2cml"
dynamic = []
description = "A CLI tool to convert EVE-NG XML topology data into CML2 topology data as YAML"
authors = [
    { name = "Ralph Schmieder", email = "rschmied@cisco.com" },
]
dependencies = [
    "beautifulsoup4>=4.12.3",
    "pyyaml>=6.0.1",
]
requires-python = ">=3.8"
readme = "README.md"
keywords = [
    "automation",
    "tools",
    "simulation",
    "virtualization",
    "network-programming",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Telecommunications Industry",
    "Topic :: Internet",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
version = "0.1.0b5"

[project.license]
text = "MIT"

[project.urls]
Homepage = "https://developer.cisco.com/modeling-labs"
Repository = "https://github.com/ciscodevnet/eve2cml"
Issues = "https://github.com/ciscodevnet/eve2cml/issues"
Changelog = "https://github.com/ciscodevnet/eve2cml/blob/master/CHANGELOG.md"

[project.scripts]
eve2cml = "eve2cml.main:main"

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[tool.pdm]
distribution = true

[tool.pdm.version]
source = "scm"
write_to = "eve2cml/_version.py"
write_template = "__version__ = '{}'"

[tool.pdm.dev-dependencies]
dev = [
    "mypy>=1.8.0",
    "pytest>=8.0.2",
    "pytest-cov>=4.1.0",
    "ruff>=0.3.2",
    "types-beautifulsoup4>=4.12.0.20240229",
    "types-PyYAML>=6.0.12.20240311",
]

[tool.ruff]
include = [
    "**/*.py",
    "**/*.pyi",
    "**/pyproject.toml",
]

[tool.ruff.lint]
select = [
    "B",
    "C4",
    "E",
    "F",
    "I",
    "W",
    "UP",
]
ignore = [
    "E501",
    "W191",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q"
testpaths = [
    "tests",
    "integration",
]

[tool.coverage.run]
source = [
    "src",
]
